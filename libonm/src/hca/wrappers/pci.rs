/* automatically generated by rust-bindgen 0.70.1 */

pub const PCI_PATH_PROC_BUS_PCI: &[u8; 14] = b"/proc/bus/pci\0";
pub const PCI_PATH_SYS_BUS_PCI: &[u8; 13] = b"/sys/bus/pci\0";
pub const PCI_PATH_DEVMEM_DEVICE: &[u8; 9] = b"/dev/mem\0";
pub const PCI_PATH_ACPI_MCFG: &[u8; 31] = b"/sys/firmware/acpi/tables/MCFG\0";
pub const PCI_PATH_EFI_SYSTAB: &[u8; 25] = b"/sys/firmware/efi/systab\0";
pub const PCI_IDS: &[u8; 11] = b"pci.ids.gz\0";
pub const PCI_PATH_IDS_DIR: &[u8; 16] = b"/usr/share/misc\0";
pub const PCI_ID_DOMAIN: &[u8; 14] = b"pci.id.ucw.cz\0";
pub const PCILIB_VERSION: &[u8; 7] = b"3.10.0\0";
pub const PCI_VENDOR_ID: u32 = 0;
pub const PCI_DEVICE_ID: u32 = 2;
pub const PCI_COMMAND: u32 = 4;
pub const PCI_COMMAND_IO: u32 = 1;
pub const PCI_COMMAND_MEMORY: u32 = 2;
pub const PCI_COMMAND_MASTER: u32 = 4;
pub const PCI_COMMAND_SPECIAL: u32 = 8;
pub const PCI_COMMAND_INVALIDATE: u32 = 16;
pub const PCI_COMMAND_VGA_PALETTE: u32 = 32;
pub const PCI_COMMAND_PARITY: u32 = 64;
pub const PCI_COMMAND_WAIT: u32 = 128;
pub const PCI_COMMAND_SERR: u32 = 256;
pub const PCI_COMMAND_FAST_BACK: u32 = 512;
pub const PCI_COMMAND_DISABLE_INTx: u32 = 1024;
pub const PCI_STATUS: u32 = 6;
pub const PCI_STATUS_INTx: u32 = 8;
pub const PCI_STATUS_CAP_LIST: u32 = 16;
pub const PCI_STATUS_66MHZ: u32 = 32;
pub const PCI_STATUS_UDF: u32 = 64;
pub const PCI_STATUS_FAST_BACK: u32 = 128;
pub const PCI_STATUS_PARITY: u32 = 256;
pub const PCI_STATUS_DEVSEL_MASK: u32 = 1536;
pub const PCI_STATUS_DEVSEL_FAST: u32 = 0;
pub const PCI_STATUS_DEVSEL_MEDIUM: u32 = 512;
pub const PCI_STATUS_DEVSEL_SLOW: u32 = 1024;
pub const PCI_STATUS_SIG_TARGET_ABORT: u32 = 2048;
pub const PCI_STATUS_REC_TARGET_ABORT: u32 = 4096;
pub const PCI_STATUS_REC_MASTER_ABORT: u32 = 8192;
pub const PCI_STATUS_SIG_SYSTEM_ERROR: u32 = 16384;
pub const PCI_STATUS_DETECTED_PARITY: u32 = 32768;
pub const PCI_CLASS_REVISION: u32 = 8;
pub const PCI_REVISION_ID: u32 = 8;
pub const PCI_CLASS_PROG: u32 = 9;
pub const PCI_CLASS_DEVICE: u32 = 10;
pub const PCI_CACHE_LINE_SIZE: u32 = 12;
pub const PCI_LATENCY_TIMER: u32 = 13;
pub const PCI_HEADER_TYPE: u32 = 14;
pub const PCI_HEADER_TYPE_NORMAL: u32 = 0;
pub const PCI_HEADER_TYPE_BRIDGE: u32 = 1;
pub const PCI_HEADER_TYPE_CARDBUS: u32 = 2;
pub const PCI_BIST: u32 = 15;
pub const PCI_BIST_CODE_MASK: u32 = 15;
pub const PCI_BIST_START: u32 = 64;
pub const PCI_BIST_CAPABLE: u32 = 128;
pub const PCI_BASE_ADDRESS_0: u32 = 16;
pub const PCI_BASE_ADDRESS_1: u32 = 20;
pub const PCI_BASE_ADDRESS_2: u32 = 24;
pub const PCI_BASE_ADDRESS_3: u32 = 28;
pub const PCI_BASE_ADDRESS_4: u32 = 32;
pub const PCI_BASE_ADDRESS_5: u32 = 36;
pub const PCI_BASE_ADDRESS_SPACE: u32 = 1;
pub const PCI_BASE_ADDRESS_SPACE_IO: u32 = 1;
pub const PCI_BASE_ADDRESS_SPACE_MEMORY: u32 = 0;
pub const PCI_BASE_ADDRESS_MEM_TYPE_MASK: u32 = 6;
pub const PCI_BASE_ADDRESS_MEM_TYPE_32: u32 = 0;
pub const PCI_BASE_ADDRESS_MEM_TYPE_1M: u32 = 2;
pub const PCI_BASE_ADDRESS_MEM_TYPE_64: u32 = 4;
pub const PCI_BASE_ADDRESS_MEM_PREFETCH: u32 = 8;
pub const PCI_CARDBUS_CIS: u32 = 40;
pub const PCI_SUBSYSTEM_VENDOR_ID: u32 = 44;
pub const PCI_SUBSYSTEM_ID: u32 = 46;
pub const PCI_ROM_ADDRESS: u32 = 48;
pub const PCI_ROM_ADDRESS_ENABLE: u32 = 1;
pub const PCI_CAPABILITY_LIST: u32 = 52;
pub const PCI_INTERRUPT_LINE: u32 = 60;
pub const PCI_INTERRUPT_PIN: u32 = 61;
pub const PCI_MIN_GNT: u32 = 62;
pub const PCI_MAX_LAT: u32 = 63;
pub const PCI_PRIMARY_BUS: u32 = 24;
pub const PCI_SECONDARY_BUS: u32 = 25;
pub const PCI_SUBORDINATE_BUS: u32 = 26;
pub const PCI_SEC_LATENCY_TIMER: u32 = 27;
pub const PCI_IO_BASE: u32 = 28;
pub const PCI_IO_LIMIT: u32 = 29;
pub const PCI_IO_RANGE_TYPE_MASK: u32 = 15;
pub const PCI_IO_RANGE_TYPE_16: u32 = 0;
pub const PCI_IO_RANGE_TYPE_32: u32 = 1;
pub const PCI_IO_RANGE_MASK: i32 = -16;
pub const PCI_SEC_STATUS: u32 = 30;
pub const PCI_MEMORY_BASE: u32 = 32;
pub const PCI_MEMORY_LIMIT: u32 = 34;
pub const PCI_MEMORY_RANGE_TYPE_MASK: u32 = 15;
pub const PCI_MEMORY_RANGE_MASK: i32 = -16;
pub const PCI_PREF_MEMORY_BASE: u32 = 36;
pub const PCI_PREF_MEMORY_LIMIT: u32 = 38;
pub const PCI_PREF_RANGE_TYPE_MASK: u32 = 15;
pub const PCI_PREF_RANGE_TYPE_32: u32 = 0;
pub const PCI_PREF_RANGE_TYPE_64: u32 = 1;
pub const PCI_PREF_RANGE_MASK: i32 = -16;
pub const PCI_PREF_BASE_UPPER32: u32 = 40;
pub const PCI_PREF_LIMIT_UPPER32: u32 = 44;
pub const PCI_IO_BASE_UPPER16: u32 = 48;
pub const PCI_IO_LIMIT_UPPER16: u32 = 50;
pub const PCI_ROM_ADDRESS1: u32 = 56;
pub const PCI_BRIDGE_CONTROL: u32 = 62;
pub const PCI_BRIDGE_CTL_PARITY: u32 = 1;
pub const PCI_BRIDGE_CTL_SERR: u32 = 2;
pub const PCI_BRIDGE_CTL_NO_ISA: u32 = 4;
pub const PCI_BRIDGE_CTL_VGA: u32 = 8;
pub const PCI_BRIDGE_CTL_VGA_16BIT: u32 = 16;
pub const PCI_BRIDGE_CTL_MASTER_ABORT: u32 = 32;
pub const PCI_BRIDGE_CTL_BUS_RESET: u32 = 64;
pub const PCI_BRIDGE_CTL_FAST_BACK: u32 = 128;
pub const PCI_BRIDGE_CTL_PRI_DISCARD_TIMER: u32 = 256;
pub const PCI_BRIDGE_CTL_SEC_DISCARD_TIMER: u32 = 512;
pub const PCI_BRIDGE_CTL_DISCARD_TIMER_STATUS: u32 = 1024;
pub const PCI_BRIDGE_CTL_DISCARD_TIMER_SERR_EN: u32 = 2048;
pub const PCI_CB_CAPABILITY_LIST: u32 = 20;
pub const PCI_CB_SEC_STATUS: u32 = 22;
pub const PCI_CB_PRIMARY_BUS: u32 = 24;
pub const PCI_CB_CARD_BUS: u32 = 25;
pub const PCI_CB_SUBORDINATE_BUS: u32 = 26;
pub const PCI_CB_LATENCY_TIMER: u32 = 27;
pub const PCI_CB_MEMORY_BASE_0: u32 = 28;
pub const PCI_CB_MEMORY_LIMIT_0: u32 = 32;
pub const PCI_CB_MEMORY_BASE_1: u32 = 36;
pub const PCI_CB_MEMORY_LIMIT_1: u32 = 40;
pub const PCI_CB_IO_BASE_0: u32 = 44;
pub const PCI_CB_IO_BASE_0_HI: u32 = 46;
pub const PCI_CB_IO_LIMIT_0: u32 = 48;
pub const PCI_CB_IO_LIMIT_0_HI: u32 = 50;
pub const PCI_CB_IO_BASE_1: u32 = 52;
pub const PCI_CB_IO_BASE_1_HI: u32 = 54;
pub const PCI_CB_IO_LIMIT_1: u32 = 56;
pub const PCI_CB_IO_LIMIT_1_HI: u32 = 58;
pub const PCI_CB_IO_RANGE_MASK: i32 = -4;
pub const PCI_CB_BRIDGE_CONTROL: u32 = 62;
pub const PCI_CB_BRIDGE_CTL_PARITY: u32 = 1;
pub const PCI_CB_BRIDGE_CTL_SERR: u32 = 2;
pub const PCI_CB_BRIDGE_CTL_ISA: u32 = 4;
pub const PCI_CB_BRIDGE_CTL_VGA: u32 = 8;
pub const PCI_CB_BRIDGE_CTL_MASTER_ABORT: u32 = 32;
pub const PCI_CB_BRIDGE_CTL_CB_RESET: u32 = 64;
pub const PCI_CB_BRIDGE_CTL_16BIT_INT: u32 = 128;
pub const PCI_CB_BRIDGE_CTL_PREFETCH_MEM0: u32 = 256;
pub const PCI_CB_BRIDGE_CTL_PREFETCH_MEM1: u32 = 512;
pub const PCI_CB_BRIDGE_CTL_POST_WRITES: u32 = 1024;
pub const PCI_CB_SUBSYSTEM_VENDOR_ID: u32 = 64;
pub const PCI_CB_SUBSYSTEM_ID: u32 = 66;
pub const PCI_CB_LEGACY_MODE_BASE: u32 = 68;
pub const PCI_CAP_LIST_ID: u32 = 0;
pub const PCI_CAP_ID_NULL: u32 = 0;
pub const PCI_CAP_ID_PM: u32 = 1;
pub const PCI_CAP_ID_AGP: u32 = 2;
pub const PCI_CAP_ID_VPD: u32 = 3;
pub const PCI_CAP_ID_SLOTID: u32 = 4;
pub const PCI_CAP_ID_MSI: u32 = 5;
pub const PCI_CAP_ID_CHSWP: u32 = 6;
pub const PCI_CAP_ID_PCIX: u32 = 7;
pub const PCI_CAP_ID_HT: u32 = 8;
pub const PCI_CAP_ID_VNDR: u32 = 9;
pub const PCI_CAP_ID_DBG: u32 = 10;
pub const PCI_CAP_ID_CCRC: u32 = 11;
pub const PCI_CAP_ID_HOTPLUG: u32 = 12;
pub const PCI_CAP_ID_SSVID: u32 = 13;
pub const PCI_CAP_ID_AGP3: u32 = 14;
pub const PCI_CAP_ID_SECURE: u32 = 15;
pub const PCI_CAP_ID_EXP: u32 = 16;
pub const PCI_CAP_ID_MSIX: u32 = 17;
pub const PCI_CAP_ID_SATA: u32 = 18;
pub const PCI_CAP_ID_AF: u32 = 19;
pub const PCI_CAP_ID_EA: u32 = 20;
pub const PCI_CAP_LIST_NEXT: u32 = 1;
pub const PCI_CAP_FLAGS: u32 = 2;
pub const PCI_CAP_SIZEOF: u32 = 4;
pub const PCI_EXT_CAP_ID_NULL: u32 = 0;
pub const PCI_EXT_CAP_ID_AER: u32 = 1;
pub const PCI_EXT_CAP_ID_VC: u32 = 2;
pub const PCI_EXT_CAP_ID_DSN: u32 = 3;
pub const PCI_EXT_CAP_ID_PB: u32 = 4;
pub const PCI_EXT_CAP_ID_RCLINK: u32 = 5;
pub const PCI_EXT_CAP_ID_RCILINK: u32 = 6;
pub const PCI_EXT_CAP_ID_RCEC: u32 = 7;
pub const PCI_EXT_CAP_ID_MFVC: u32 = 8;
pub const PCI_EXT_CAP_ID_VC2: u32 = 9;
pub const PCI_EXT_CAP_ID_RCRB: u32 = 10;
pub const PCI_EXT_CAP_ID_VNDR: u32 = 11;
pub const PCI_EXT_CAP_ID_ACS: u32 = 13;
pub const PCI_EXT_CAP_ID_ARI: u32 = 14;
pub const PCI_EXT_CAP_ID_ATS: u32 = 15;
pub const PCI_EXT_CAP_ID_SRIOV: u32 = 16;
pub const PCI_EXT_CAP_ID_MRIOV: u32 = 17;
pub const PCI_EXT_CAP_ID_MCAST: u32 = 18;
pub const PCI_EXT_CAP_ID_PRI: u32 = 19;
pub const PCI_EXT_CAP_ID_REBAR: u32 = 21;
pub const PCI_EXT_CAP_ID_DPA: u32 = 22;
pub const PCI_EXT_CAP_ID_TPH: u32 = 23;
pub const PCI_EXT_CAP_ID_LTR: u32 = 24;
pub const PCI_EXT_CAP_ID_SECPCI: u32 = 25;
pub const PCI_EXT_CAP_ID_PMUX: u32 = 26;
pub const PCI_EXT_CAP_ID_PASID: u32 = 27;
pub const PCI_EXT_CAP_ID_LNR: u32 = 28;
pub const PCI_EXT_CAP_ID_DPC: u32 = 29;
pub const PCI_EXT_CAP_ID_L1PM: u32 = 30;
pub const PCI_EXT_CAP_ID_PTM: u32 = 31;
pub const PCI_EXT_CAP_ID_M_PCIE: u32 = 32;
pub const PCI_EXT_CAP_ID_FRS: u32 = 33;
pub const PCI_EXT_CAP_ID_RTR: u32 = 34;
pub const PCI_EXT_CAP_ID_DVSEC: u32 = 35;
pub const PCI_EXT_CAP_ID_VF_REBAR: u32 = 36;
pub const PCI_EXT_CAP_ID_DLNK: u32 = 37;
pub const PCI_EXT_CAP_ID_16GT: u32 = 38;
pub const PCI_EXT_CAP_ID_LMR: u32 = 39;
pub const PCI_EXT_CAP_ID_HIER_ID: u32 = 40;
pub const PCI_EXT_CAP_ID_NPEM: u32 = 41;
pub const PCI_EXT_CAP_ID_DOE: u32 = 46;
pub const PCI_PM_CAP_VER_MASK: u32 = 7;
pub const PCI_PM_CAP_PME_CLOCK: u32 = 8;
pub const PCI_PM_CAP_DSI: u32 = 32;
pub const PCI_PM_CAP_AUX_C_MASK: u32 = 448;
pub const PCI_PM_CAP_D1: u32 = 512;
pub const PCI_PM_CAP_D2: u32 = 1024;
pub const PCI_PM_CAP_PME_D0: u32 = 2048;
pub const PCI_PM_CAP_PME_D1: u32 = 4096;
pub const PCI_PM_CAP_PME_D2: u32 = 8192;
pub const PCI_PM_CAP_PME_D3_HOT: u32 = 16384;
pub const PCI_PM_CAP_PME_D3_COLD: u32 = 32768;
pub const PCI_PM_CTRL: u32 = 4;
pub const PCI_PM_CTRL_STATE_MASK: u32 = 3;
pub const PCI_PM_CTRL_NO_SOFT_RST: u32 = 8;
pub const PCI_PM_CTRL_PME_ENABLE: u32 = 256;
pub const PCI_PM_CTRL_DATA_SEL_MASK: u32 = 7680;
pub const PCI_PM_CTRL_DATA_SCALE_MASK: u32 = 24576;
pub const PCI_PM_CTRL_PME_STATUS: u32 = 32768;
pub const PCI_PM_PPB_EXTENSIONS: u32 = 6;
pub const PCI_PM_PPB_B2_B3: u32 = 64;
pub const PCI_PM_BPCC_ENABLE: u32 = 128;
pub const PCI_PM_DATA_REGISTER: u32 = 7;
pub const PCI_PM_SIZEOF: u32 = 8;
pub const PCI_AGP_VERSION: u32 = 2;
pub const PCI_AGP_RFU: u32 = 3;
pub const PCI_AGP_STATUS: u32 = 4;
pub const PCI_AGP_STATUS_RQ_MASK: u32 = 4278190080;
pub const PCI_AGP_STATUS_ISOCH: u32 = 65536;
pub const PCI_AGP_STATUS_ARQSZ_MASK: u32 = 57344;
pub const PCI_AGP_STATUS_CAL_MASK: u32 = 7168;
pub const PCI_AGP_STATUS_SBA: u32 = 512;
pub const PCI_AGP_STATUS_ITA_COH: u32 = 256;
pub const PCI_AGP_STATUS_GART64: u32 = 128;
pub const PCI_AGP_STATUS_HTRANS: u32 = 64;
pub const PCI_AGP_STATUS_64BIT: u32 = 32;
pub const PCI_AGP_STATUS_FW: u32 = 16;
pub const PCI_AGP_STATUS_AGP3: u32 = 8;
pub const PCI_AGP_STATUS_RATE4: u32 = 4;
pub const PCI_AGP_STATUS_RATE2: u32 = 2;
pub const PCI_AGP_STATUS_RATE1: u32 = 1;
pub const PCI_AGP_COMMAND: u32 = 8;
pub const PCI_AGP_COMMAND_RQ_MASK: u32 = 4278190080;
pub const PCI_AGP_COMMAND_ARQSZ_MASK: u32 = 57344;
pub const PCI_AGP_COMMAND_CAL_MASK: u32 = 7168;
pub const PCI_AGP_COMMAND_SBA: u32 = 512;
pub const PCI_AGP_COMMAND_AGP: u32 = 256;
pub const PCI_AGP_COMMAND_GART64: u32 = 128;
pub const PCI_AGP_COMMAND_64BIT: u32 = 32;
pub const PCI_AGP_COMMAND_FW: u32 = 16;
pub const PCI_AGP_COMMAND_RATE4: u32 = 4;
pub const PCI_AGP_COMMAND_RATE2: u32 = 2;
pub const PCI_AGP_COMMAND_RATE1: u32 = 1;
pub const PCI_AGP_SIZEOF: u32 = 12;
pub const PCI_VPD_ADDR: u32 = 2;
pub const PCI_VPD_ADDR_MASK: u32 = 32767;
pub const PCI_VPD_ADDR_F: u32 = 32768;
pub const PCI_VPD_DATA: u32 = 4;
pub const PCI_SID_ESR: u32 = 2;
pub const PCI_SID_ESR_NSLOTS: u32 = 31;
pub const PCI_SID_ESR_FIC: u32 = 32;
pub const PCI_SID_CHASSIS_NR: u32 = 3;
pub const PCI_MSI_FLAGS: u32 = 2;
pub const PCI_MSI_FLAGS_MASK_BIT: u32 = 256;
pub const PCI_MSI_FLAGS_64BIT: u32 = 128;
pub const PCI_MSI_FLAGS_QSIZE: u32 = 112;
pub const PCI_MSI_FLAGS_QMASK: u32 = 14;
pub const PCI_MSI_FLAGS_ENABLE: u32 = 1;
pub const PCI_MSI_RFU: u32 = 3;
pub const PCI_MSI_ADDRESS_LO: u32 = 4;
pub const PCI_MSI_ADDRESS_HI: u32 = 8;
pub const PCI_MSI_DATA_32: u32 = 8;
pub const PCI_MSI_DATA_64: u32 = 12;
pub const PCI_MSI_MASK_BIT_32: u32 = 12;
pub const PCI_MSI_MASK_BIT_64: u32 = 16;
pub const PCI_MSI_PENDING_32: u32 = 16;
pub const PCI_MSI_PENDING_64: u32 = 20;
pub const PCI_PCIX_COMMAND: u32 = 2;
pub const PCI_PCIX_COMMAND_DPERE: u32 = 1;
pub const PCI_PCIX_COMMAND_ERO: u32 = 2;
pub const PCI_PCIX_COMMAND_MAX_MEM_READ_BYTE_COUNT: u32 = 12;
pub const PCI_PCIX_COMMAND_MAX_OUTSTANDING_SPLIT_TRANS: u32 = 112;
pub const PCI_PCIX_COMMAND_RESERVED: u32 = 3968;
pub const PCI_PCIX_STATUS: u32 = 4;
pub const PCI_PCIX_STATUS_FUNCTION: u32 = 7;
pub const PCI_PCIX_STATUS_DEVICE: u32 = 248;
pub const PCI_PCIX_STATUS_BUS: u32 = 65280;
pub const PCI_PCIX_STATUS_64BIT: u32 = 65536;
pub const PCI_PCIX_STATUS_133MHZ: u32 = 131072;
pub const PCI_PCIX_STATUS_SC_DISCARDED: u32 = 262144;
pub const PCI_PCIX_STATUS_UNEXPECTED_SC: u32 = 524288;
pub const PCI_PCIX_STATUS_DEVICE_COMPLEXITY: u32 = 1048576;
pub const PCI_PCIX_STATUS_DESIGNED_MAX_MEM_READ_BYTE_COUNT: u32 = 6291456;
pub const PCI_PCIX_STATUS_DESIGNED_MAX_OUTSTANDING_SPLIT_TRANS: u32 = 58720256;
pub const PCI_PCIX_STATUS_DESIGNED_MAX_CUMULATIVE_READ_SIZE: u32 = 469762048;
pub const PCI_PCIX_STATUS_RCVD_SC_ERR_MESS: u32 = 536870912;
pub const PCI_PCIX_STATUS_266MHZ: u32 = 1073741824;
pub const PCI_PCIX_STATUS_533MHZ: u32 = 2147483648;
pub const PCI_PCIX_SIZEOF: u32 = 4;
pub const PCI_PCIX_BRIDGE_SEC_STATUS: u32 = 2;
pub const PCI_PCIX_BRIDGE_SEC_STATUS_64BIT: u32 = 1;
pub const PCI_PCIX_BRIDGE_SEC_STATUS_133MHZ: u32 = 2;
pub const PCI_PCIX_BRIDGE_SEC_STATUS_SC_DISCARDED: u32 = 4;
pub const PCI_PCIX_BRIDGE_SEC_STATUS_UNEXPECTED_SC: u32 = 8;
pub const PCI_PCIX_BRIDGE_SEC_STATUS_SC_OVERRUN: u32 = 16;
pub const PCI_PCIX_BRIDGE_SEC_STATUS_SPLIT_REQUEST_DELAYED: u32 = 32;
pub const PCI_PCIX_BRIDGE_SEC_STATUS_CLOCK_FREQ: u32 = 448;
pub const PCI_PCIX_BRIDGE_SEC_STATUS_RESERVED: u32 = 65024;
pub const PCI_PCIX_BRIDGE_STATUS: u32 = 4;
pub const PCI_PCIX_BRIDGE_STATUS_FUNCTION: u32 = 7;
pub const PCI_PCIX_BRIDGE_STATUS_DEVICE: u32 = 248;
pub const PCI_PCIX_BRIDGE_STATUS_BUS: u32 = 65280;
pub const PCI_PCIX_BRIDGE_STATUS_64BIT: u32 = 65536;
pub const PCI_PCIX_BRIDGE_STATUS_133MHZ: u32 = 131072;
pub const PCI_PCIX_BRIDGE_STATUS_SC_DISCARDED: u32 = 262144;
pub const PCI_PCIX_BRIDGE_STATUS_UNEXPECTED_SC: u32 = 524288;
pub const PCI_PCIX_BRIDGE_STATUS_SC_OVERRUN: u32 = 1048576;
pub const PCI_PCIX_BRIDGE_STATUS_SPLIT_REQUEST_DELAYED: u32 = 2097152;
pub const PCI_PCIX_BRIDGE_STATUS_RESERVED: u32 = 4290772992;
pub const PCI_PCIX_BRIDGE_UPSTREAM_SPLIT_TRANS_CTRL: u32 = 8;
pub const PCI_PCIX_BRIDGE_DOWNSTREAM_SPLIT_TRANS_CTRL: u32 = 12;
pub const PCI_PCIX_BRIDGE_STR_CAPACITY: u32 = 65535;
pub const PCI_PCIX_BRIDGE_STR_COMMITMENT_LIMIT: u32 = 4294901760;
pub const PCI_PCIX_BRIDGE_SIZEOF: u32 = 12;
pub const PCI_HT_CMD: u32 = 2;
pub const PCI_HT_CMD_TYP_HI: u32 = 57344;
pub const PCI_HT_CMD_TYP_HI_PRI: u32 = 0;
pub const PCI_HT_CMD_TYP_HI_SEC: u32 = 8192;
pub const PCI_HT_CMD_TYP: u32 = 63488;
pub const PCI_HT_CMD_TYP_SW: u32 = 16384;
pub const PCI_HT_CMD_TYP_IDC: u32 = 32768;
pub const PCI_HT_CMD_TYP_RID: u32 = 34816;
pub const PCI_HT_CMD_TYP_UIDC: u32 = 36864;
pub const PCI_HT_CMD_TYP_ECSA: u32 = 38912;
pub const PCI_HT_CMD_TYP_AM: u32 = 40960;
pub const PCI_HT_CMD_TYP_MSIM: u32 = 43008;
pub const PCI_HT_CMD_TYP_DR: u32 = 45056;
pub const PCI_HT_CMD_TYP_VCS: u32 = 47104;
pub const PCI_HT_CMD_TYP_RM: u32 = 49152;
pub const PCI_HT_CMD_TYP_X86: u32 = 51200;
pub const PCI_HT_LCTR_CFLE: u32 = 2;
pub const PCI_HT_LCTR_CST: u32 = 4;
pub const PCI_HT_LCTR_CFE: u32 = 8;
pub const PCI_HT_LCTR_LKFAIL: u32 = 16;
pub const PCI_HT_LCTR_INIT: u32 = 32;
pub const PCI_HT_LCTR_EOC: u32 = 64;
pub const PCI_HT_LCTR_TXO: u32 = 128;
pub const PCI_HT_LCTR_CRCERR: u32 = 3840;
pub const PCI_HT_LCTR_ISOCEN: u32 = 4096;
pub const PCI_HT_LCTR_LSEN: u32 = 8192;
pub const PCI_HT_LCTR_EXTCTL: u32 = 16384;
pub const PCI_HT_LCTR_64B: u32 = 32768;
pub const PCI_HT_LCNF_MLWI: u32 = 7;
pub const PCI_HT_LCNF_LW_8B: u32 = 0;
pub const PCI_HT_LCNF_LW_16B: u32 = 1;
pub const PCI_HT_LCNF_LW_32B: u32 = 3;
pub const PCI_HT_LCNF_LW_2B: u32 = 4;
pub const PCI_HT_LCNF_LW_4B: u32 = 5;
pub const PCI_HT_LCNF_LW_NC: u32 = 7;
pub const PCI_HT_LCNF_DFI: u32 = 8;
pub const PCI_HT_LCNF_MLWO: u32 = 112;
pub const PCI_HT_LCNF_DFO: u32 = 128;
pub const PCI_HT_LCNF_LWI: u32 = 1792;
pub const PCI_HT_LCNF_DFIE: u32 = 2048;
pub const PCI_HT_LCNF_LWO: u32 = 28672;
pub const PCI_HT_LCNF_DFOE: u32 = 32768;
pub const PCI_HT_RID_MIN: u32 = 31;
pub const PCI_HT_RID_MAJ: u32 = 224;
pub const PCI_HT_LFRER_FREQ: u32 = 15;
pub const PCI_HT_LFRER_200: u32 = 0;
pub const PCI_HT_LFRER_300: u32 = 1;
pub const PCI_HT_LFRER_400: u32 = 2;
pub const PCI_HT_LFRER_500: u32 = 3;
pub const PCI_HT_LFRER_600: u32 = 4;
pub const PCI_HT_LFRER_800: u32 = 5;
pub const PCI_HT_LFRER_1000: u32 = 6;
pub const PCI_HT_LFRER_1200: u32 = 7;
pub const PCI_HT_LFRER_1400: u32 = 8;
pub const PCI_HT_LFRER_1600: u32 = 9;
pub const PCI_HT_LFRER_VEND: u32 = 15;
pub const PCI_HT_LFRER_ERR: u32 = 240;
pub const PCI_HT_LFRER_PROT: u32 = 16;
pub const PCI_HT_LFRER_OV: u32 = 32;
pub const PCI_HT_LFRER_EOC: u32 = 64;
pub const PCI_HT_LFRER_CTLT: u32 = 128;
pub const PCI_HT_LFCAP_200: u32 = 1;
pub const PCI_HT_LFCAP_300: u32 = 2;
pub const PCI_HT_LFCAP_400: u32 = 4;
pub const PCI_HT_LFCAP_500: u32 = 8;
pub const PCI_HT_LFCAP_600: u32 = 16;
pub const PCI_HT_LFCAP_800: u32 = 32;
pub const PCI_HT_LFCAP_1000: u32 = 64;
pub const PCI_HT_LFCAP_1200: u32 = 128;
pub const PCI_HT_LFCAP_1400: u32 = 256;
pub const PCI_HT_LFCAP_1600: u32 = 512;
pub const PCI_HT_LFCAP_VEND: u32 = 32768;
pub const PCI_HT_FTR_ISOCFC: u32 = 1;
pub const PCI_HT_FTR_LDTSTOP: u32 = 2;
pub const PCI_HT_FTR_CRCTM: u32 = 4;
pub const PCI_HT_FTR_ECTLT: u32 = 8;
pub const PCI_HT_FTR_64BA: u32 = 16;
pub const PCI_HT_FTR_UIDRD: u32 = 32;
pub const PCI_HT_EH_PFLE: u32 = 1;
pub const PCI_HT_EH_OFLE: u32 = 2;
pub const PCI_HT_EH_PFE: u32 = 4;
pub const PCI_HT_EH_OFE: u32 = 8;
pub const PCI_HT_EH_EOCFE: u32 = 16;
pub const PCI_HT_EH_RFE: u32 = 32;
pub const PCI_HT_EH_CRCFE: u32 = 64;
pub const PCI_HT_EH_SERRFE: u32 = 128;
pub const PCI_HT_EH_CF: u32 = 256;
pub const PCI_HT_EH_RE: u32 = 512;
pub const PCI_HT_EH_PNFE: u32 = 1024;
pub const PCI_HT_EH_ONFE: u32 = 2048;
pub const PCI_HT_EH_EOCNFE: u32 = 4096;
pub const PCI_HT_EH_RNFE: u32 = 8192;
pub const PCI_HT_EH_CRCNFE: u32 = 16384;
pub const PCI_HT_EH_SERRNFE: u32 = 32768;
pub const PCI_HT_PRI_CMD: u32 = 2;
pub const PCI_HT_PRI_CMD_BUID: u32 = 31;
pub const PCI_HT_PRI_CMD_UC: u32 = 992;
pub const PCI_HT_PRI_CMD_MH: u32 = 1024;
pub const PCI_HT_PRI_CMD_DD: u32 = 2048;
pub const PCI_HT_PRI_CMD_DUL: u32 = 4096;
pub const PCI_HT_PRI_LCTR0: u32 = 4;
pub const PCI_HT_PRI_LCNF0: u32 = 6;
pub const PCI_HT_PRI_LCTR1: u32 = 8;
pub const PCI_HT_PRI_LCNF1: u32 = 10;
pub const PCI_HT_PRI_RID: u32 = 12;
pub const PCI_HT_PRI_LFRER0: u32 = 13;
pub const PCI_HT_PRI_LFCAP0: u32 = 14;
pub const PCI_HT_PRI_FTR: u32 = 16;
pub const PCI_HT_PRI_LFRER1: u32 = 17;
pub const PCI_HT_PRI_LFCAP1: u32 = 18;
pub const PCI_HT_PRI_ES: u32 = 20;
pub const PCI_HT_PRI_EH: u32 = 22;
pub const PCI_HT_PRI_MBU: u32 = 24;
pub const PCI_HT_PRI_MLU: u32 = 25;
pub const PCI_HT_PRI_BN: u32 = 26;
pub const PCI_HT_PRI_SIZEOF: u32 = 28;
pub const PCI_HT_SEC_CMD: u32 = 2;
pub const PCI_HT_SEC_CMD_WR: u32 = 1;
pub const PCI_HT_SEC_CMD_DE: u32 = 2;
pub const PCI_HT_SEC_CMD_DN: u32 = 124;
pub const PCI_HT_SEC_CMD_CS: u32 = 128;
pub const PCI_HT_SEC_CMD_HH: u32 = 256;
pub const PCI_HT_SEC_CMD_AS: u32 = 1024;
pub const PCI_HT_SEC_CMD_HIECE: u32 = 2048;
pub const PCI_HT_SEC_CMD_DUL: u32 = 4096;
pub const PCI_HT_SEC_LCTR: u32 = 4;
pub const PCI_HT_SEC_LCNF: u32 = 6;
pub const PCI_HT_SEC_RID: u32 = 8;
pub const PCI_HT_SEC_LFRER: u32 = 9;
pub const PCI_HT_SEC_LFCAP: u32 = 10;
pub const PCI_HT_SEC_FTR: u32 = 12;
pub const PCI_HT_SEC_FTR_EXTRS: u32 = 256;
pub const PCI_HT_SEC_FTR_UCNFE: u32 = 512;
pub const PCI_HT_SEC_ES: u32 = 16;
pub const PCI_HT_SEC_EH: u32 = 18;
pub const PCI_HT_SEC_MBU: u32 = 20;
pub const PCI_HT_SEC_MLU: u32 = 21;
pub const PCI_HT_SEC_SIZEOF: u32 = 24;
pub const PCI_HT_SW_CMD: u32 = 2;
pub const PCI_HT_SW_CMD_VIBERR: u32 = 128;
pub const PCI_HT_SW_CMD_VIBFL: u32 = 256;
pub const PCI_HT_SW_CMD_VIBFT: u32 = 512;
pub const PCI_HT_SW_CMD_VIBNFT: u32 = 1024;
pub const PCI_HT_SW_PMASK: u32 = 4;
pub const PCI_HT_SW_SWINF: u32 = 8;
pub const PCI_HT_SW_SWINF_DP: u32 = 31;
pub const PCI_HT_SW_SWINF_EN: u32 = 32;
pub const PCI_HT_SW_SWINF_CR: u32 = 64;
pub const PCI_HT_SW_SWINF_PCIDX: u32 = 3840;
pub const PCI_HT_SW_SWINF_BLRIDX: u32 = 258048;
pub const PCI_HT_SW_SWINF_SBIDX: u32 = 8192;
pub const PCI_HT_SW_SWINF_HP: u32 = 262144;
pub const PCI_HT_SW_SWINF_HIDE: u32 = 524288;
pub const PCI_HT_SW_PCD: u32 = 12;
pub const PCI_HT_SW_BLRD: u32 = 16;
pub const PCI_HT_SW_SBD: u32 = 20;
pub const PCI_HT_SW_SIZEOF: u32 = 24;
pub const PCI_HT_SW_PC_PCR: u32 = 0;
pub const PCI_HT_SW_PC_NPCR: u32 = 1;
pub const PCI_HT_SW_PC_RCR: u32 = 2;
pub const PCI_HT_SW_PC_PDWR: u32 = 3;
pub const PCI_HT_SW_PC_NPDWR: u32 = 4;
pub const PCI_HT_SW_PC_RDWR: u32 = 5;
pub const PCI_HT_SW_PC_PCT: u32 = 6;
pub const PCI_HT_SW_PC_NPCT: u32 = 7;
pub const PCI_HT_SW_PC_RCT: u32 = 8;
pub const PCI_HT_SW_PC_PDWT: u32 = 9;
pub const PCI_HT_SW_PC_NPDWT: u32 = 10;
pub const PCI_HT_SW_PC_RDWT: u32 = 11;
pub const PCI_HT_SW_BLR_BASE0_LO: u32 = 0;
pub const PCI_HT_SW_BLR_BASE0_HI: u32 = 1;
pub const PCI_HT_SW_BLR_LIM0_LO: u32 = 2;
pub const PCI_HT_SW_BLR_LIM0_HI: u32 = 3;
pub const PCI_HT_SW_SB_LO: u32 = 0;
pub const PCI_HT_SW_S0_HI: u32 = 1;
pub const PCI_HT_IDC_IDX: u32 = 2;
pub const PCI_HT_IDC_DATA: u32 = 4;
pub const PCI_HT_IDC_SIZEOF: u32 = 8;
pub const PCI_HT_IDC_IDX_LINT: u32 = 1;
pub const PCI_HT_IDC_LINT: u32 = 16711680;
pub const PCI_HT_IDC_IDX_IDR: u32 = 16;
pub const PCI_HT_IDC_IDR_MASK: u32 = 268435457;
pub const PCI_HT_IDC_IDR_POL: u32 = 268435458;
pub const PCI_HT_IDC_IDR_II_2: u32 = 268435484;
pub const PCI_HT_IDC_IDR_II_5: u32 = 268435488;
pub const PCI_HT_IDC_IDR_II_6: u32 = 16777152;
pub const PCI_HT_IDC_IDR_II_24: u32 = 4278190080;
pub const PCI_HT_IDC_IDR_II_32: u32 = 16777215;
pub const PCI_HT_IDC_IDR_PASSPW: u32 = 1073741824;
pub const PCI_HT_IDC_IDR_WEOI: u32 = 2147483648;
pub const PCI_HT_RID_RID: u32 = 2;
pub const PCI_HT_RID_SIZEOF: u32 = 4;
pub const PCI_HT_UIDC_CS: u32 = 4;
pub const PCI_HT_UIDC_CE: u32 = 8;
pub const PCI_HT_UIDC_SIZEOF: u32 = 12;
pub const PCI_HT_ECSA_ADDR: u32 = 4;
pub const PCI_HT_ECSA_ADDR_REG: u32 = 4092;
pub const PCI_HT_ECSA_ADDR_FUN: u32 = 28672;
pub const PCI_HT_ECSA_ADDR_DEV: u32 = 987136;
pub const PCI_HT_ECSA_ADDR_BUS: u32 = 267386880;
pub const PCI_HT_ECSA_ADDR_TYPE: u32 = 268435456;
pub const PCI_HT_ECSA_DATA: u32 = 8;
pub const PCI_HT_ECSA_SIZEOF: u32 = 12;
pub const PCI_HT_AM_CMD: u32 = 2;
pub const PCI_HT_AM_CMD_NDMA: u32 = 15;
pub const PCI_HT_AM_CMD_IOSIZ: u32 = 496;
pub const PCI_HT_AM_CMD_MT: u32 = 1536;
pub const PCI_HT_AM_CMD_MT_40B: u32 = 0;
pub const PCI_HT_AM_CMD_MT_64B: u32 = 512;
pub const PCI_HT_AM_SBW_CTR_COMP: u32 = 1;
pub const PCI_HT_AM_SBW_CTR_NCOH: u32 = 2;
pub const PCI_HT_AM_SBW_CTR_ISOC: u32 = 4;
pub const PCI_HT_AM_SBW_CTR_EN: u32 = 8;
pub const PCI_HT_AM40_SBNPW: u32 = 4;
pub const PCI_HT_AM40_SBW_BASE: u32 = 1048575;
pub const PCI_HT_AM40_SBW_CTR: u32 = 4026531840;
pub const PCI_HT_AM40_SBPW: u32 = 8;
pub const PCI_HT_AM40_DMA_PBASE0: u32 = 12;
pub const PCI_HT_AM40_DMA_CTR0: u32 = 15;
pub const PCI_HT_AM40_DMA_CTR_CTR: u32 = 240;
pub const PCI_HT_AM40_DMA_SLIM0: u32 = 16;
pub const PCI_HT_AM40_DMA_SBASE0: u32 = 18;
pub const PCI_HT_AM40_SIZEOF: u32 = 12;
pub const PCI_HT_AM64_IDX: u32 = 4;
pub const PCI_HT_AM64_DATA_LO: u32 = 8;
pub const PCI_HT_AM64_DATA_HI: u32 = 12;
pub const PCI_HT_AM64_SIZEOF: u32 = 16;
pub const PCI_HT_AM64_IDX_SBNPW: u32 = 0;
pub const PCI_HT_AM64_W_BASE_LO: u32 = 4293918720;
pub const PCI_HT_AM64_W_CTR: u32 = 15;
pub const PCI_HT_AM64_IDX_SBPW: u32 = 1;
pub const PCI_HT_AM64_IDX_PBNPW: u32 = 2;
pub const PCI_HT_AM64_IDX_DMAPB0: u32 = 4;
pub const PCI_HT_AM64_IDX_DMASB0: u32 = 5;
pub const PCI_HT_AM64_IDX_DMASL0: u32 = 6;
pub const PCI_HT_MSIM_CMD: u32 = 2;
pub const PCI_HT_MSIM_CMD_EN: u32 = 1;
pub const PCI_HT_MSIM_CMD_FIXD: u32 = 2;
pub const PCI_HT_MSIM_ADDR_LO: u32 = 4;
pub const PCI_HT_MSIM_ADDR_HI: u32 = 8;
pub const PCI_HT_MSIM_SIZEOF: u32 = 12;
pub const PCI_HT_DR_CMD: u32 = 2;
pub const PCI_HT_DR_CMD_NDRS: u32 = 15;
pub const PCI_HT_DR_CMD_IDX: u32 = 496;
pub const PCI_HT_DR_EN: u32 = 4;
pub const PCI_HT_DR_DATA: u32 = 8;
pub const PCI_HT_DR_SIZEOF: u32 = 12;
pub const PCI_HT_DR_IDX_BASE_LO: u32 = 0;
pub const PCI_HT_DR_OTNRD: u32 = 1;
pub const PCI_HT_DR_BL_LO: u32 = 4294967040;
pub const PCI_HT_DR_IDX_BASE_HI: u32 = 1;
pub const PCI_HT_DR_IDX_LIMIT_LO: u32 = 2;
pub const PCI_HT_DR_IDX_LIMIT_HI: u32 = 3;
pub const PCI_HT_VCS_SUP: u32 = 4;
pub const PCI_HT_VCS_L1EN: u32 = 5;
pub const PCI_HT_VCS_L0EN: u32 = 6;
pub const PCI_HT_VCS_SBD: u32 = 8;
pub const PCI_HT_VCS_SINT: u32 = 9;
pub const PCI_HT_VCS_SSUP: u32 = 10;
pub const PCI_HT_VCS_SSUP_0: u32 = 0;
pub const PCI_HT_VCS_SSUP_3: u32 = 1;
pub const PCI_HT_VCS_SSUP_15: u32 = 2;
pub const PCI_HT_VCS_NFCBD: u32 = 12;
pub const PCI_HT_VCS_NFCINT: u32 = 13;
pub const PCI_HT_VCS_SIZEOF: u32 = 16;
pub const PCI_HT_RM_CTR0: u32 = 4;
pub const PCI_HT_RM_CTR_LRETEN: u32 = 1;
pub const PCI_HT_RM_CTR_FSER: u32 = 2;
pub const PCI_HT_RM_CTR_ROLNEN: u32 = 4;
pub const PCI_HT_RM_CTR_FSS: u32 = 8;
pub const PCI_HT_RM_CTR_RETNEN: u32 = 16;
pub const PCI_HT_RM_CTR_RETFEN: u32 = 32;
pub const PCI_HT_RM_CTR_AA: u32 = 192;
pub const PCI_HT_RM_STS0: u32 = 5;
pub const PCI_HT_RM_STS_RETSNT: u32 = 1;
pub const PCI_HT_RM_STS_CNTROL: u32 = 2;
pub const PCI_HT_RM_STS_SRCV: u32 = 4;
pub const PCI_HT_RM_CTR1: u32 = 6;
pub const PCI_HT_RM_STS1: u32 = 7;
pub const PCI_HT_RM_CNT0: u32 = 8;
pub const PCI_HT_RM_CNT1: u32 = 10;
pub const PCI_HT_RM_SIZEOF: u32 = 12;
pub const PCI_VNDR_LENGTH: u32 = 2;
pub const PCI_EXP_FLAGS: u32 = 2;
pub const PCI_EXP_FLAGS_VERS: u32 = 15;
pub const PCI_EXP_FLAGS_TYPE: u32 = 240;
pub const PCI_EXP_TYPE_ENDPOINT: u32 = 0;
pub const PCI_EXP_TYPE_LEG_END: u32 = 1;
pub const PCI_EXP_TYPE_ROOT_PORT: u32 = 4;
pub const PCI_EXP_TYPE_UPSTREAM: u32 = 5;
pub const PCI_EXP_TYPE_DOWNSTREAM: u32 = 6;
pub const PCI_EXP_TYPE_PCI_BRIDGE: u32 = 7;
pub const PCI_EXP_TYPE_PCIE_BRIDGE: u32 = 8;
pub const PCI_EXP_TYPE_ROOT_INT_EP: u32 = 9;
pub const PCI_EXP_TYPE_ROOT_EC: u32 = 10;
pub const PCI_EXP_FLAGS_SLOT: u32 = 256;
pub const PCI_EXP_FLAGS_IRQ: u32 = 15872;
pub const PCI_EXP_DEVCAP: u32 = 4;
pub const PCI_EXP_DEVCAP_PAYLOAD: u32 = 7;
pub const PCI_EXP_DEVCAP_PHANTOM: u32 = 24;
pub const PCI_EXP_DEVCAP_EXT_TAG: u32 = 32;
pub const PCI_EXP_DEVCAP_L0S: u32 = 448;
pub const PCI_EXP_DEVCAP_L1: u32 = 3584;
pub const PCI_EXP_DEVCAP_ATN_BUT: u32 = 4096;
pub const PCI_EXP_DEVCAP_ATN_IND: u32 = 8192;
pub const PCI_EXP_DEVCAP_PWR_IND: u32 = 16384;
pub const PCI_EXP_DEVCAP_RBE: u32 = 32768;
pub const PCI_EXP_DEVCAP_PWR_VAL: u32 = 66846720;
pub const PCI_EXP_DEVCAP_PWR_SCL: u32 = 201326592;
pub const PCI_EXP_DEVCAP_FLRESET: u32 = 268435456;
pub const PCI_EXP_DEVCTL: u32 = 8;
pub const PCI_EXP_DEVCTL_CERE: u32 = 1;
pub const PCI_EXP_DEVCTL_NFERE: u32 = 2;
pub const PCI_EXP_DEVCTL_FERE: u32 = 4;
pub const PCI_EXP_DEVCTL_URRE: u32 = 8;
pub const PCI_EXP_DEVCTL_RELAXED: u32 = 16;
pub const PCI_EXP_DEVCTL_PAYLOAD: u32 = 224;
pub const PCI_EXP_DEVCTL_EXT_TAG: u32 = 256;
pub const PCI_EXP_DEVCTL_PHANTOM: u32 = 512;
pub const PCI_EXP_DEVCTL_AUX_PME: u32 = 1024;
pub const PCI_EXP_DEVCTL_NOSNOOP: u32 = 2048;
pub const PCI_EXP_DEVCTL_READRQ: u32 = 28672;
pub const PCI_EXP_DEVCTL_BCRE: u32 = 32768;
pub const PCI_EXP_DEVCTL_FLRESET: u32 = 32768;
pub const PCI_EXP_DEVSTA: u32 = 10;
pub const PCI_EXP_DEVSTA_CED: u32 = 1;
pub const PCI_EXP_DEVSTA_NFED: u32 = 2;
pub const PCI_EXP_DEVSTA_FED: u32 = 4;
pub const PCI_EXP_DEVSTA_URD: u32 = 8;
pub const PCI_EXP_DEVSTA_AUXPD: u32 = 16;
pub const PCI_EXP_DEVSTA_TRPND: u32 = 32;
pub const PCI_EXP_LNKCAP: u32 = 12;
pub const PCI_EXP_LNKCAP_SPEED: u32 = 15;
pub const PCI_EXP_LNKCAP_WIDTH: u32 = 1008;
pub const PCI_EXP_LNKCAP_ASPM: u32 = 3072;
pub const PCI_EXP_LNKCAP_L0S: u32 = 28672;
pub const PCI_EXP_LNKCAP_L1: u32 = 229376;
pub const PCI_EXP_LNKCAP_CLOCKPM: u32 = 262144;
pub const PCI_EXP_LNKCAP_SURPRISE: u32 = 524288;
pub const PCI_EXP_LNKCAP_DLLA: u32 = 1048576;
pub const PCI_EXP_LNKCAP_LBNC: u32 = 2097152;
pub const PCI_EXP_LNKCAP_AOC: u32 = 4194304;
pub const PCI_EXP_LNKCAP_PORT: u32 = 4278190080;
pub const PCI_EXP_LNKCTL: u32 = 16;
pub const PCI_EXP_LNKCTL_ASPM: u32 = 3;
pub const PCI_EXP_LNKCTL_RCB: u32 = 8;
pub const PCI_EXP_LNKCTL_DISABLE: u32 = 16;
pub const PCI_EXP_LNKCTL_RETRAIN: u32 = 32;
pub const PCI_EXP_LNKCTL_CLOCK: u32 = 64;
pub const PCI_EXP_LNKCTL_XSYNCH: u32 = 128;
pub const PCI_EXP_LNKCTL_CLOCKPM: u32 = 256;
pub const PCI_EXP_LNKCTL_HWAUTWD: u32 = 512;
pub const PCI_EXP_LNKCTL_BWMIE: u32 = 1024;
pub const PCI_EXP_LNKCTL_AUTBWIE: u32 = 2048;
pub const PCI_EXP_LNKSTA: u32 = 18;
pub const PCI_EXP_LNKSTA_SPEED: u32 = 15;
pub const PCI_EXP_LNKSTA_WIDTH: u32 = 1008;
pub const PCI_EXP_LNKSTA_TR_ERR: u32 = 1024;
pub const PCI_EXP_LNKSTA_TRAIN: u32 = 2048;
pub const PCI_EXP_LNKSTA_SL_CLK: u32 = 4096;
pub const PCI_EXP_LNKSTA_DL_ACT: u32 = 8192;
pub const PCI_EXP_LNKSTA_BWMGMT: u32 = 16384;
pub const PCI_EXP_LNKSTA_AUTBW: u32 = 32768;
pub const PCI_EXP_SLTCAP: u32 = 20;
pub const PCI_EXP_SLTCAP_ATNB: u32 = 1;
pub const PCI_EXP_SLTCAP_PWRC: u32 = 2;
pub const PCI_EXP_SLTCAP_MRL: u32 = 4;
pub const PCI_EXP_SLTCAP_ATNI: u32 = 8;
pub const PCI_EXP_SLTCAP_PWRI: u32 = 16;
pub const PCI_EXP_SLTCAP_HPS: u32 = 32;
pub const PCI_EXP_SLTCAP_HPC: u32 = 64;
pub const PCI_EXP_SLTCAP_PWR_VAL: u32 = 32640;
pub const PCI_EXP_SLTCAP_PWR_SCL: u32 = 98304;
pub const PCI_EXP_SLTCAP_INTERLOCK: u32 = 131072;
pub const PCI_EXP_SLTCAP_NOCMDCOMP: u32 = 262144;
pub const PCI_EXP_SLTCAP_PSN: u32 = 4294443008;
pub const PCI_EXP_SLTCTL: u32 = 24;
pub const PCI_EXP_SLTCTL_ATNB: u32 = 1;
pub const PCI_EXP_SLTCTL_PWRF: u32 = 2;
pub const PCI_EXP_SLTCTL_MRLS: u32 = 4;
pub const PCI_EXP_SLTCTL_PRSD: u32 = 8;
pub const PCI_EXP_SLTCTL_CMDC: u32 = 16;
pub const PCI_EXP_SLTCTL_HPIE: u32 = 32;
pub const PCI_EXP_SLTCTL_ATNI: u32 = 192;
pub const PCI_EXP_SLTCTL_PWRI: u32 = 768;
pub const PCI_EXP_SLTCTL_PWRC: u32 = 1024;
pub const PCI_EXP_SLTCTL_INTERLOCK: u32 = 2048;
pub const PCI_EXP_SLTCTL_LLCHG: u32 = 4096;
pub const PCI_EXP_SLTSTA: u32 = 26;
pub const PCI_EXP_SLTSTA_ATNB: u32 = 1;
pub const PCI_EXP_SLTSTA_PWRF: u32 = 2;
pub const PCI_EXP_SLTSTA_MRLS: u32 = 4;
pub const PCI_EXP_SLTSTA_PRSD: u32 = 8;
pub const PCI_EXP_SLTSTA_CMDC: u32 = 16;
pub const PCI_EXP_SLTSTA_MRL_ST: u32 = 32;
pub const PCI_EXP_SLTSTA_PRES: u32 = 64;
pub const PCI_EXP_SLTSTA_INTERLOCK: u32 = 128;
pub const PCI_EXP_SLTSTA_LLCHG: u32 = 256;
pub const PCI_EXP_RTCTL: u32 = 28;
pub const PCI_EXP_RTCTL_SECEE: u32 = 1;
pub const PCI_EXP_RTCTL_SENFEE: u32 = 2;
pub const PCI_EXP_RTCTL_SEFEE: u32 = 4;
pub const PCI_EXP_RTCTL_PMEIE: u32 = 8;
pub const PCI_EXP_RTCTL_CRSVIS: u32 = 16;
pub const PCI_EXP_RTCAP: u32 = 30;
pub const PCI_EXP_RTCAP_CRSVIS: u32 = 1;
pub const PCI_EXP_RTSTA: u32 = 32;
pub const PCI_EXP_RTSTA_PME_REQID: u32 = 65535;
pub const PCI_EXP_RTSTA_PME_STATUS: u32 = 65536;
pub const PCI_EXP_RTSTA_PME_PENDING: u32 = 131072;
pub const PCI_EXP_DEVCAP2: u32 = 36;
pub const PCI_EXP_DEVCAP2_TIMEOUT_DIS: u32 = 16;
pub const PCI_EXP_DEVCAP2_ARI: u32 = 32;
pub const PCI_EXP_DEVCAP2_ATOMICOP_ROUTING: u32 = 64;
pub const PCI_EXP_DEVCAP2_32BIT_ATOMICOP_COMP: u32 = 128;
pub const PCI_EXP_DEVCAP2_64BIT_ATOMICOP_COMP: u32 = 256;
pub const PCI_EXP_DEVCAP2_128BIT_CAS_COMP: u32 = 512;
pub const PCI_EXP_DEVCAP2_NROPRPRP: u32 = 1024;
pub const PCI_EXP_DEVCAP2_LTR: u32 = 2048;
pub const PCI_EXP_DEVCAP2_10BIT_TAG_COMP: u32 = 65536;
pub const PCI_EXP_DEVCAP2_10BIT_TAG_REQ: u32 = 131072;
pub const PCI_EXP_DEVCAP2_EXTFMT: u32 = 1048576;
pub const PCI_EXP_DEVCAP2_EE_TLP: u32 = 2097152;
pub const PCI_EXP_DEVCAP2_EPR_INIT: u32 = 67108864;
pub const PCI_EXP_DEVCAP2_FRS: u32 = 2147483648;
pub const PCI_EXP_DEVCTL2: u32 = 40;
pub const PCI_EXP_DEVCTL2_TIMEOUT_DIS: u32 = 16;
pub const PCI_EXP_DEVCTL2_ARI: u32 = 32;
pub const PCI_EXP_DEVCTL2_ATOMICOP_REQUESTER_EN: u32 = 64;
pub const PCI_EXP_DEVCTL2_ATOMICOP_EGRESS_BLOCK: u32 = 128;
pub const PCI_EXP_DEVCTL2_LTR: u32 = 1024;
pub const PCI_EXP_DEVCTL2_10BIT_TAG_REQ: u32 = 4096;
pub const PCI_EXP_DEVSTA2: u32 = 42;
pub const PCI_EXP_LNKCAP2: u32 = 44;
pub const PCI_EXP_LNKCAP2_CROSSLINK: u32 = 256;
pub const PCI_EXP_LNKCAP2_RETIMER: u32 = 8388608;
pub const PCI_EXP_LNKCAP2_2RETIMERS: u32 = 16777216;
pub const PCI_EXP_LNKCAP2_DRS: u32 = 2147483648;
pub const PCI_EXP_LNKCTL2: u32 = 48;
pub const PCI_EXP_LNKCTL2_CMPLNC: u32 = 16;
pub const PCI_EXP_LNKCTL2_SPEED_DIS: u32 = 32;
pub const PCI_EXP_LNKCTL2_MOD_CMPLNC: u32 = 1024;
pub const PCI_EXP_LNKCTL2_CMPLNC_SOS: u32 = 2048;
pub const PCI_EXP_LNKSTA2: u32 = 50;
pub const PCI_EXP_LINKSTA2_EQU_COMP: u32 = 2;
pub const PCI_EXP_LINKSTA2_EQU_PHASE1: u32 = 4;
pub const PCI_EXP_LINKSTA2_EQU_PHASE2: u32 = 8;
pub const PCI_EXP_LINKSTA2_EQU_PHASE3: u32 = 16;
pub const PCI_EXP_LINKSTA2_EQU_REQ: u32 = 32;
pub const PCI_EXP_LINKSTA2_RETIMER: u32 = 64;
pub const PCI_EXP_LINKSTA2_2RETIMERS: u32 = 128;
pub const PCI_EXP_LINKSTA2_DRS_RCVD: u32 = 32768;
pub const PCI_EXP_SLTCAP2: u32 = 52;
pub const PCI_EXP_SLTCTL2: u32 = 56;
pub const PCI_EXP_SLTSTA2: u32 = 58;
pub const PCI_MSIX_ENABLE: u32 = 32768;
pub const PCI_MSIX_MASK: u32 = 16384;
pub const PCI_MSIX_TABSIZE: u32 = 2047;
pub const PCI_MSIX_TABLE: u32 = 4;
pub const PCI_MSIX_PBA: u32 = 8;
pub const PCI_MSIX_BIR: u32 = 7;
pub const PCI_SSVID_VENDOR: u32 = 4;
pub const PCI_SSVID_DEVICE: u32 = 6;
pub const PCI_AF_CAP: u32 = 3;
pub const PCI_AF_CAP_TP: u32 = 1;
pub const PCI_AF_CAP_FLR: u32 = 2;
pub const PCI_AF_CTRL: u32 = 4;
pub const PCI_AF_CTRL_FLR: u32 = 1;
pub const PCI_AF_STATUS: u32 = 5;
pub const PCI_AF_STATUS_TP: u32 = 1;
pub const PCI_SATA_HBA_BARS: u32 = 4;
pub const PCI_SATA_HBA_REG0: u32 = 8;
pub const PCI_EA_CAP_TYPE1_SECONDARY: u32 = 4;
pub const PCI_EA_CAP_TYPE1_SUBORDINATE: u32 = 5;
pub const PCI_EA_CAP_ENT_WRITABLE: u32 = 1073741824;
pub const PCI_EA_CAP_ENT_ENABLE: u32 = 2147483648;
pub const PCI_ERR_UNCOR_STATUS: u32 = 4;
pub const PCI_ERR_UNC_TRAIN: u32 = 1;
pub const PCI_ERR_UNC_DLP: u32 = 16;
pub const PCI_ERR_UNC_SDES: u32 = 32;
pub const PCI_ERR_UNC_POISON_TLP: u32 = 4096;
pub const PCI_ERR_UNC_FCP: u32 = 8192;
pub const PCI_ERR_UNC_COMP_TIME: u32 = 16384;
pub const PCI_ERR_UNC_COMP_ABORT: u32 = 32768;
pub const PCI_ERR_UNC_UNX_COMP: u32 = 65536;
pub const PCI_ERR_UNC_RX_OVER: u32 = 131072;
pub const PCI_ERR_UNC_MALF_TLP: u32 = 262144;
pub const PCI_ERR_UNC_ECRC: u32 = 524288;
pub const PCI_ERR_UNC_UNSUP: u32 = 1048576;
pub const PCI_ERR_UNC_ACS_VIOL: u32 = 2097152;
pub const PCI_ERR_UNCOR_MASK: u32 = 8;
pub const PCI_ERR_UNCOR_SEVER: u32 = 12;
pub const PCI_ERR_COR_STATUS: u32 = 16;
pub const PCI_ERR_COR_RCVR: u32 = 1;
pub const PCI_ERR_COR_BAD_TLP: u32 = 64;
pub const PCI_ERR_COR_BAD_DLLP: u32 = 128;
pub const PCI_ERR_COR_REP_ROLL: u32 = 256;
pub const PCI_ERR_COR_REP_TIMER: u32 = 4096;
pub const PCI_ERR_COR_REP_ANFE: u32 = 8192;
pub const PCI_ERR_COR_MASK: u32 = 20;
pub const PCI_ERR_CAP: u32 = 24;
pub const PCI_ERR_CAP_ECRC_GENC: u32 = 32;
pub const PCI_ERR_CAP_ECRC_GENE: u32 = 64;
pub const PCI_ERR_CAP_ECRC_CHKC: u32 = 128;
pub const PCI_ERR_CAP_ECRC_CHKE: u32 = 256;
pub const PCI_ERR_CAP_MULT_HDRC: u32 = 512;
pub const PCI_ERR_CAP_MULT_HDRE: u32 = 1024;
pub const PCI_ERR_CAP_TLP_PFX: u32 = 2048;
pub const PCI_ERR_CAP_HDR_LOG: u32 = 4096;
pub const PCI_ERR_HEADER_LOG: u32 = 28;
pub const PCI_ERR_ROOT_COMMAND: u32 = 44;
pub const PCI_ERR_ROOT_CMD_COR_EN: u32 = 1;
pub const PCI_ERR_ROOT_CMD_NONFATAL_EN: u32 = 2;
pub const PCI_ERR_ROOT_CMD_FATAL_EN: u32 = 4;
pub const PCI_ERR_ROOT_STATUS: u32 = 48;
pub const PCI_ERR_ROOT_COR_RCV: u32 = 1;
pub const PCI_ERR_ROOT_MULTI_COR_RCV: u32 = 2;
pub const PCI_ERR_ROOT_UNCOR_RCV: u32 = 4;
pub const PCI_ERR_ROOT_MULTI_UNCOR_RCV: u32 = 8;
pub const PCI_ERR_ROOT_FIRST_FATAL: u32 = 16;
pub const PCI_ERR_ROOT_NONFATAL_RCV: u32 = 32;
pub const PCI_ERR_ROOT_FATAL_RCV: u32 = 64;
pub const PCI_ERR_ROOT_COR_SRC: u32 = 52;
pub const PCI_ERR_ROOT_SRC: u32 = 54;
pub const PCI_VC_PORT_REG1: u32 = 4;
pub const PCI_VC_PORT_REG2: u32 = 8;
pub const PCI_VC_PORT_CTRL: u32 = 12;
pub const PCI_VC_PORT_STATUS: u32 = 14;
pub const PCI_VC_RES_CAP: u32 = 16;
pub const PCI_VC_RES_CTRL: u32 = 20;
pub const PCI_VC_RES_STATUS: u32 = 26;
pub const PCI_PWR_DSR: u32 = 4;
pub const PCI_PWR_DATA: u32 = 8;
pub const PCI_PWR_CAP: u32 = 12;
pub const PCI_RCLINK_ESD: u32 = 4;
pub const PCI_RCLINK_LINK1: u32 = 16;
pub const PCI_RCLINK_LINK_DESC: u32 = 0;
pub const PCI_RCLINK_LINK_ADDR: u32 = 8;
pub const PCI_RCLINK_LINK_SIZE: u32 = 16;
pub const PCI_RCEC_BUSN_REG_VER: u32 = 2;
pub const PCI_RCEC_RCIEP_BMAP: u32 = 4;
pub const PCI_RCEC_BUSN_REG: u32 = 8;
pub const PCI_EVNDR_HEADER: u32 = 4;
pub const PCI_EVNDR_REGISTERS: u32 = 8;
pub const PCI_DVSEC_HEADER1: u32 = 4;
pub const PCI_DVSEC_HEADER2: u32 = 8;
pub const PCI_DVSEC_VENDOR_ID_CXL: u32 = 7832;
pub const PCI_DVSEC_ID_CXL: u32 = 0;
pub const PCI_CXL_DEV_LEN: u32 = 56;
pub const PCI_CXL_DEV_CAP: u32 = 10;
pub const PCI_CXL_DEV_CAP_CACHE: u32 = 1;
pub const PCI_CXL_DEV_CAP_IO: u32 = 2;
pub const PCI_CXL_DEV_CAP_MEM: u32 = 4;
pub const PCI_CXL_DEV_CAP_MEM_HWINIT: u32 = 8;
pub const PCI_CXL_DEV_CAP_VIRAL: u32 = 16384;
pub const PCI_CXL_DEV_CTRL: u32 = 12;
pub const PCI_CXL_DEV_CTRL_CACHE: u32 = 1;
pub const PCI_CXL_DEV_CTRL_IO: u32 = 2;
pub const PCI_CXL_DEV_CTRL_MEM: u32 = 4;
pub const PCI_CXL_DEV_CTRL_CACHE_CLN: u32 = 2048;
pub const PCI_CXL_DEV_CTRL_VIRAL: u32 = 16384;
pub const PCI_CXL_DEV_STATUS: u32 = 14;
pub const PCI_CXL_DEV_STATUS_VIRAL: u32 = 16384;
pub const PCI_CXL_DEV_STATUS2: u32 = 18;
pub const PCI_CXL_DEV_STATUS_CACHE_INV: u32 = 1;
pub const PCI_CXL_DEV_STATUS_RC: u32 = 2;
pub const PCI_CXL_DEV_STATUS_RE: u32 = 4;
pub const PCI_CXL_DEV_STATUS_PMC: u32 = 32768;
pub const PCI_CXL_DEV_CAP2: u32 = 22;
pub const PCI_CXL_DEV_CAP2_CACHE_UNK: u32 = 0;
pub const PCI_CXL_DEV_CAP2_CACHE_64K: u32 = 1;
pub const PCI_CXL_DEV_CAP2_CACHE_1M: u32 = 2;
pub const PCI_CXL_DEV_RANGE1_SIZE_HI: u32 = 24;
pub const PCI_CXL_DEV_RANGE1_SIZE_LO: u32 = 28;
pub const PCI_CXL_RANGE_VALID: u32 = 1;
pub const PCI_CXL_RANGE_ACTIVE: u32 = 2;
pub const PCI_CXL_DEV_RANGE1_BASE_HI: u32 = 32;
pub const PCI_CXL_DEV_RANGE1_BASE_LO: u32 = 36;
pub const PCI_CXL_DEV_RANGE2_SIZE_HI: u32 = 40;
pub const PCI_CXL_DEV_RANGE2_SIZE_LO: u32 = 44;
pub const PCI_CXL_DEV_RANGE2_BASE_HI: u32 = 48;
pub const PCI_CXL_DEV_RANGE2_BASE_LO: u32 = 52;
pub const PCI_CXL_PORT_EXT_LEN: u32 = 40;
pub const PCI_CXL_PORT_EXT_STATUS: u32 = 10;
pub const PCI_CXL_PORT_PM_INIT_COMPLETE: u32 = 1;
pub const PCI_CXL_PORT_CTRL: u32 = 12;
pub const PCI_CXL_PORT_UNMASK_SBR: u32 = 1;
pub const PCI_CXL_PORT_UNMASK_LINK: u32 = 2;
pub const PCI_CXL_PORT_ALT_MEMORY: u32 = 4;
pub const PCI_CXL_PORT_ALT_BME: u32 = 8;
pub const PCI_CXL_PORT_VIRAL_EN: u32 = 16384;
pub const PCI_CXL_PORT_ALT_BUS_BASE: u32 = 14;
pub const PCI_CXL_PORT_ALT_BUS_LIMIT: u32 = 15;
pub const PCI_CXL_PORT_ALT_MEM_BASE: u32 = 16;
pub const PCI_CXL_PORT_ALT_MEM_LIMIT: u32 = 18;
pub const PCI_CXL_RL_BLOCK1_LO: u32 = 12;
pub const PCI_CXL_GPF_DEV_LEN: u32 = 16;
pub const PCI_CXL_GPF_DEV_PHASE2_DUR: u32 = 10;
pub const PCI_CXL_GPF_DEV_PHASE2_POW: u32 = 12;
pub const PCI_CXL_GPF_DEV_1US: u32 = 0;
pub const PCI_CXL_GPF_DEV_10US: u32 = 1;
pub const PCI_CXL_GPF_DEV_100US: u32 = 2;
pub const PCI_CXL_GPF_DEV_1MS: u32 = 3;
pub const PCI_CXL_GPF_DEV_10MS: u32 = 4;
pub const PCI_CXL_GPF_DEV_100MS: u32 = 5;
pub const PCI_CXL_GPF_DEV_1S: u32 = 6;
pub const PCI_CXL_GPF_DEV_10S: u32 = 7;
pub const PCI_CXL_GPF_PORT_LEN: u32 = 16;
pub const PCI_CXL_GPF_PORT_PHASE1_CTRL: u32 = 12;
pub const PCI_CXL_GPF_PORT_PHASE2_CTRL: u32 = 14;
pub const PCI_CXL_GPF_PORT_1US: u32 = 0;
pub const PCI_CXL_GPF_PORT_10US: u32 = 1;
pub const PCI_CXL_GPF_PORT_100US: u32 = 2;
pub const PCI_CXL_GPF_PORT_1MS: u32 = 3;
pub const PCI_CXL_GPF_PORT_10MS: u32 = 4;
pub const PCI_CXL_GPF_PORT_100MS: u32 = 5;
pub const PCI_CXL_GPF_PORT_1S: u32 = 6;
pub const PCI_CXL_GPF_PORT_10S: u32 = 7;
pub const PCI_CXL_FB_LEN: u32 = 32;
pub const PCI_CXL_FB_PORT_CAP: u32 = 10;
pub const PCI_CXL_FB_CAP_CACHE: u32 = 1;
pub const PCI_CXL_FB_CAP_IO: u32 = 2;
pub const PCI_CXL_FB_CAP_MEM: u32 = 4;
pub const PCI_CXL_FB_CAP_68B_FLIT: u32 = 32;
pub const PCI_CXL_FB_CAP_MULT_LOG_DEV: u32 = 64;
pub const PCI_CXL_FB_CAP_256B_FLIT: u32 = 8192;
pub const PCI_CXL_FB_CAP_PBR_FLIT: u32 = 16384;
pub const PCI_CXL_FB_PORT_CTRL: u32 = 12;
pub const PCI_CXL_FB_CTRL_CACHE: u32 = 1;
pub const PCI_CXL_FB_CTRL_IO: u32 = 2;
pub const PCI_CXL_FB_CTRL_MEM: u32 = 4;
pub const PCI_CXL_FB_CTRL_SYNC_HDR_BYP: u32 = 8;
pub const PCI_CXL_FB_CTRL_DRFT_BUF: u32 = 16;
pub const PCI_CXL_FB_CTRL_68B_FLIT: u32 = 32;
pub const PCI_CXL_FB_CTRL_MULT_LOG_DEV: u32 = 64;
pub const PCI_CXL_FB_CTRL_RCD: u32 = 128;
pub const PCI_CXL_FB_CTRL_RETIMER1: u32 = 256;
pub const PCI_CXL_FB_CTRL_RETIMER2: u32 = 512;
pub const PCI_CXL_FB_CTRL_256B_FLIT: u32 = 8192;
pub const PCI_CXL_FB_CTRL_PBR_FLIT: u32 = 16384;
pub const PCI_CXL_FB_PORT_STATUS: u32 = 14;
pub const PCI_CXL_FB_STAT_CACHE: u32 = 1;
pub const PCI_CXL_FB_STAT_IO: u32 = 2;
pub const PCI_CXL_FB_STAT_MEM: u32 = 4;
pub const PCI_CXL_FB_STAT_SYNC_HDR_BYP: u32 = 8;
pub const PCI_CXL_FB_STAT_DRFT_BUF: u32 = 16;
pub const PCI_CXL_FB_STAT_68B_FLIT: u32 = 32;
pub const PCI_CXL_FB_STAT_MULT_LOG_DEV: u32 = 64;
pub const PCI_CXL_FB_STAT_256B_FLIT: u32 = 8192;
pub const PCI_CXL_FB_STAT_PBR_FLIT: u32 = 16384;
pub const PCI_CXL_FB_MOD_TS_DATA: u32 = 16;
pub const PCI_CXL_FB_PORT_CAP2: u32 = 20;
pub const PCI_CXL_FB_CAP2_NOP_HINT: u32 = 1;
pub const PCI_CXL_FB_PORT_CTRL2: u32 = 24;
pub const PCI_CXL_FB_CTRL2_NOP_HINT: u32 = 1;
pub const PCI_CXL_FB_PORT_STATUS2: u32 = 28;
pub const PCI_CXL_MLD_LEN: u32 = 16;
pub const PCI_CXL_MLD_NUM_LD: u32 = 10;
pub const PCI_CXL_MLD_MAX_LD: u32 = 16;
pub const PCI_CXL_FUN_MAP_LEN: u32 = 44;
pub const PCI_CXL_FUN_MAP_REG_0: u32 = 12;
pub const PCI_CXL_FUN_MAP_REG_1: u32 = 16;
pub const PCI_CXL_FUN_MAP_REG_2: u32 = 20;
pub const PCI_CXL_FUN_MAP_REG_3: u32 = 24;
pub const PCI_CXL_FUN_MAP_REG_4: u32 = 28;
pub const PCI_CXL_FUN_MAP_REG_5: u32 = 32;
pub const PCI_CXL_FUN_MAP_REG_6: u32 = 36;
pub const PCI_CXL_FUN_MAP_REG_7: u32 = 40;
pub const PCI_ACS_CAP: u32 = 4;
pub const PCI_ACS_CAP_VALID: u32 = 1;
pub const PCI_ACS_CAP_BLOCK: u32 = 2;
pub const PCI_ACS_CAP_REQ_RED: u32 = 4;
pub const PCI_ACS_CAP_CMPLT_RED: u32 = 8;
pub const PCI_ACS_CAP_FORWARD: u32 = 16;
pub const PCI_ACS_CAP_EGRESS: u32 = 32;
pub const PCI_ACS_CAP_TRANS: u32 = 64;
pub const PCI_ACS_CTRL: u32 = 6;
pub const PCI_ACS_CTRL_VALID: u32 = 1;
pub const PCI_ACS_CTRL_BLOCK: u32 = 2;
pub const PCI_ACS_CTRL_REQ_RED: u32 = 4;
pub const PCI_ACS_CTRL_CMPLT_RED: u32 = 8;
pub const PCI_ACS_CTRL_FORWARD: u32 = 16;
pub const PCI_ACS_CTRL_EGRESS: u32 = 32;
pub const PCI_ACS_CTRL_TRANS: u32 = 64;
pub const PCI_ACS_EGRESS_CTRL: u32 = 8;
pub const PCI_ARI_CAP: u32 = 4;
pub const PCI_ARI_CAP_MFVC: u32 = 1;
pub const PCI_ARI_CAP_ACS: u32 = 2;
pub const PCI_ARI_CTRL: u32 = 6;
pub const PCI_ARI_CTRL_MFVC: u32 = 1;
pub const PCI_ARI_CTRL_ACS: u32 = 2;
pub const PCI_ATS_CAP: u32 = 4;
pub const PCI_ATS_CTRL: u32 = 6;
pub const PCI_ATS_CTRL_ENABLE: u32 = 32768;
pub const PCI_IOV_CAP: u32 = 4;
pub const PCI_IOV_CAP_VFM: u32 = 1;
pub const PCI_IOV_CAP_VF_10BIT_TAG_REQ: u32 = 4;
pub const PCI_IOV_CTRL: u32 = 8;
pub const PCI_IOV_CTRL_VFE: u32 = 1;
pub const PCI_IOV_CTRL_VFME: u32 = 2;
pub const PCI_IOV_CTRL_VFMIE: u32 = 4;
pub const PCI_IOV_CTRL_MSE: u32 = 8;
pub const PCI_IOV_CTRL_ARI: u32 = 16;
pub const PCI_IOV_CTRL_VF_10BIT_TAG_REQ_EN: u32 = 32;
pub const PCI_IOV_STATUS: u32 = 10;
pub const PCI_IOV_STATUS_MS: u32 = 1;
pub const PCI_IOV_INITIALVF: u32 = 12;
pub const PCI_IOV_TOTALVF: u32 = 14;
pub const PCI_IOV_NUMVF: u32 = 16;
pub const PCI_IOV_FDL: u32 = 18;
pub const PCI_IOV_OFFSET: u32 = 20;
pub const PCI_IOV_STRIDE: u32 = 22;
pub const PCI_IOV_DID: u32 = 26;
pub const PCI_IOV_SUPPS: u32 = 28;
pub const PCI_IOV_SYSPS: u32 = 32;
pub const PCI_IOV_BAR_BASE: u32 = 36;
pub const PCI_IOV_NUM_BAR: u32 = 6;
pub const PCI_IOV_MSAO: u32 = 60;
pub const PCI_MCAST_CAP: u32 = 4;
pub const PCI_MCAST_CAP_ECRC: u32 = 32768;
pub const PCI_MCAST_CTRL: u32 = 6;
pub const PCI_MCAST_CTRL_ENABLE: u32 = 32768;
pub const PCI_MCAST_BAR: u32 = 8;
pub const PCI_MCAST_BAR_MASK: i32 = -4096;
pub const PCI_MCAST_RCV: u32 = 16;
pub const PCI_MCAST_BLOCK: u32 = 24;
pub const PCI_MCAST_BLOCK_UNTRANS: u32 = 32;
pub const PCI_MCAST_OVL_BAR: u32 = 40;
pub const PCI_MCAST_OVL_MASK: i32 = -64;
pub const PCI_PRI_CTRL: u32 = 4;
pub const PCI_PRI_CTRL_ENABLE: u32 = 1;
pub const PCI_PRI_CTRL_RESET: u32 = 2;
pub const PCI_PRI_STATUS: u32 = 6;
pub const PCI_PRI_STATUS_RF: u32 = 1;
pub const PCI_PRI_STATUS_UPRGI: u32 = 2;
pub const PCI_PRI_STATUS_STOPPED: u32 = 256;
pub const PCI_PRI_MAX_REQ: u32 = 8;
pub const PCI_PRI_ALLOC_REQ: u32 = 12;
pub const PCI_TPH_CAPABILITIES: u32 = 4;
pub const PCI_TPH_INTVEC_SUP: u32 = 2;
pub const PCI_TPH_DEV_SUP: u32 = 4;
pub const PCI_TPH_EXT_REQ_SUP: u32 = 256;
pub const PCI_TPH_ST_LOC_MASK: u32 = 1536;
pub const PCI_TPH_ST_NONE: u32 = 0;
pub const PCI_TPH_ST_CAP: u32 = 512;
pub const PCI_TPH_ST_MSIX: u32 = 1024;
pub const PCI_TPH_ST_SIZE_SHIFT: u32 = 16;
pub const PCI_LTR_MAX_SNOOP: u32 = 4;
pub const PCI_LTR_VALUE_MASK: u32 = 1023;
pub const PCI_LTR_SCALE_SHIFT: u32 = 10;
pub const PCI_LTR_SCALE_MASK: u32 = 7;
pub const PCI_LTR_MAX_NOSNOOP: u32 = 6;
pub const PCI_SEC_LNKCTL3: u32 = 4;
pub const PCI_SEC_LNKCTL3_PERFORM_LINK_EQU: u32 = 1;
pub const PCI_SEC_LNKCTL3_LNK_EQU_REQ_INTR_EN: u32 = 2;
pub const PCI_SEC_LANE_ERR: u32 = 8;
pub const PCI_SEC_LANE_EQU_CTRL: u32 = 12;
pub const PCI_PASID_CAP: u32 = 4;
pub const PCI_PASID_CAP_EXEC: u32 = 2;
pub const PCI_PASID_CAP_PRIV: u32 = 4;
pub const PCI_PASID_CTRL: u32 = 6;
pub const PCI_PASID_CTRL_ENABLE: u32 = 1;
pub const PCI_PASID_CTRL_EXEC: u32 = 2;
pub const PCI_PASID_CTRL_PRIV: u32 = 4;
pub const PCI_DPC_CAP: u32 = 4;
pub const PCI_DPC_CAP_RP_EXT: u32 = 32;
pub const PCI_DPC_CAP_TLP_BLOCK: u32 = 64;
pub const PCI_DPC_CAP_SW_TRIGGER: u32 = 128;
pub const PCI_DPC_CAP_DL_ACT_ERR: u32 = 4096;
pub const PCI_DPC_CTL: u32 = 6;
pub const PCI_DPC_CTL_CMPL: u32 = 4;
pub const PCI_DPC_CTL_INT: u32 = 8;
pub const PCI_DPC_CTL_ERR_COR: u32 = 16;
pub const PCI_DPC_CTL_TLP: u32 = 32;
pub const PCI_DPC_CTL_SW_TRIGGER: u32 = 64;
pub const PCI_DPC_CTL_DL_ACTIVE: u32 = 128;
pub const PCI_DPC_STATUS: u32 = 8;
pub const PCI_DPC_STS_TRIGGER: u32 = 1;
pub const PCI_DPC_STS_INT: u32 = 8;
pub const PCI_DPC_STS_RP_BUSY: u32 = 16;
pub const PCI_DPC_SOURCE: u32 = 10;
pub const PCI_L1PM_SUBSTAT_CAP: u32 = 4;
pub const PCI_L1PM_SUBSTAT_CAP_PM_L12: u32 = 1;
pub const PCI_L1PM_SUBSTAT_CAP_PM_L11: u32 = 2;
pub const PCI_L1PM_SUBSTAT_CAP_ASPM_L12: u32 = 4;
pub const PCI_L1PM_SUBSTAT_CAP_ASPM_L11: u32 = 8;
pub const PCI_L1PM_SUBSTAT_CAP_L1PM_SUPP: u32 = 16;
pub const PCI_L1PM_SUBSTAT_CTL1: u32 = 8;
pub const PCI_L1PM_SUBSTAT_CTL1_PM_L12: u32 = 1;
pub const PCI_L1PM_SUBSTAT_CTL1_PM_L11: u32 = 2;
pub const PCI_L1PM_SUBSTAT_CTL1_ASPM_L12: u32 = 4;
pub const PCI_L1PM_SUBSTAT_CTL1_ASPM_L11: u32 = 8;
pub const PCI_L1PM_SUBSTAT_CTL2: u32 = 12;
pub const PCI_DOE_CAP: u32 = 4;
pub const PCI_DOE_CAP_INT_SUPP: u32 = 1;
pub const PCI_DOE_CTL: u32 = 8;
pub const PCI_DOE_CTL_ABORT: u32 = 1;
pub const PCI_DOE_CTL_INT: u32 = 2;
pub const PCI_DOE_CTL_GO: u32 = 2147483648;
pub const PCI_DOE_STS: u32 = 12;
pub const PCI_DOE_STS_BUSY: u32 = 1;
pub const PCI_DOE_STS_INT: u32 = 2;
pub const PCI_DOE_STS_ERROR: u32 = 3;
pub const PCI_DOE_STS_OBJECT_READY: u32 = 2147483648;
pub const PCI_CLASS_NOT_DEFINED: u32 = 0;
pub const PCI_CLASS_NOT_DEFINED_VGA: u32 = 1;
pub const PCI_BASE_CLASS_STORAGE: u32 = 1;
pub const PCI_CLASS_STORAGE_SCSI: u32 = 256;
pub const PCI_CLASS_STORAGE_IDE: u32 = 257;
pub const PCI_CLASS_STORAGE_FLOPPY: u32 = 258;
pub const PCI_CLASS_STORAGE_IPI: u32 = 259;
pub const PCI_CLASS_STORAGE_RAID: u32 = 260;
pub const PCI_CLASS_STORAGE_ATA: u32 = 261;
pub const PCI_CLASS_STORAGE_SATA: u32 = 262;
pub const PCI_CLASS_STORAGE_SAS: u32 = 263;
pub const PCI_CLASS_STORAGE_OTHER: u32 = 384;
pub const PCI_BASE_CLASS_NETWORK: u32 = 2;
pub const PCI_CLASS_NETWORK_ETHERNET: u32 = 512;
pub const PCI_CLASS_NETWORK_TOKEN_RING: u32 = 513;
pub const PCI_CLASS_NETWORK_FDDI: u32 = 514;
pub const PCI_CLASS_NETWORK_ATM: u32 = 515;
pub const PCI_CLASS_NETWORK_ISDN: u32 = 516;
pub const PCI_CLASS_NETWORK_OTHER: u32 = 640;
pub const PCI_BASE_CLASS_DISPLAY: u32 = 3;
pub const PCI_CLASS_DISPLAY_VGA: u32 = 768;
pub const PCI_CLASS_DISPLAY_XGA: u32 = 769;
pub const PCI_CLASS_DISPLAY_3D: u32 = 770;
pub const PCI_CLASS_DISPLAY_OTHER: u32 = 896;
pub const PCI_BASE_CLASS_MULTIMEDIA: u32 = 4;
pub const PCI_CLASS_MULTIMEDIA_VIDEO: u32 = 1024;
pub const PCI_CLASS_MULTIMEDIA_AUDIO: u32 = 1025;
pub const PCI_CLASS_MULTIMEDIA_PHONE: u32 = 1026;
pub const PCI_CLASS_MULTIMEDIA_AUDIO_DEV: u32 = 1027;
pub const PCI_CLASS_MULTIMEDIA_OTHER: u32 = 1152;
pub const PCI_BASE_CLASS_MEMORY: u32 = 5;
pub const PCI_CLASS_MEMORY_RAM: u32 = 1280;
pub const PCI_CLASS_MEMORY_FLASH: u32 = 1281;
pub const PCI_CLASS_MEMORY_OTHER: u32 = 1408;
pub const PCI_BASE_CLASS_BRIDGE: u32 = 6;
pub const PCI_CLASS_BRIDGE_HOST: u32 = 1536;
pub const PCI_CLASS_BRIDGE_ISA: u32 = 1537;
pub const PCI_CLASS_BRIDGE_EISA: u32 = 1538;
pub const PCI_CLASS_BRIDGE_MC: u32 = 1539;
pub const PCI_CLASS_BRIDGE_PCI: u32 = 1540;
pub const PCI_CLASS_BRIDGE_PCMCIA: u32 = 1541;
pub const PCI_CLASS_BRIDGE_NUBUS: u32 = 1542;
pub const PCI_CLASS_BRIDGE_CARDBUS: u32 = 1543;
pub const PCI_CLASS_BRIDGE_RACEWAY: u32 = 1544;
pub const PCI_CLASS_BRIDGE_PCI_SEMI: u32 = 1545;
pub const PCI_CLASS_BRIDGE_IB_TO_PCI: u32 = 1546;
pub const PCI_CLASS_BRIDGE_OTHER: u32 = 1664;
pub const PCI_BASE_CLASS_COMMUNICATION: u32 = 7;
pub const PCI_CLASS_COMMUNICATION_SERIAL: u32 = 1792;
pub const PCI_CLASS_COMMUNICATION_PARALLEL: u32 = 1793;
pub const PCI_CLASS_COMMUNICATION_MSERIAL: u32 = 1794;
pub const PCI_CLASS_COMMUNICATION_MODEM: u32 = 1795;
pub const PCI_CLASS_COMMUNICATION_OTHER: u32 = 1920;
pub const PCI_BASE_CLASS_SYSTEM: u32 = 8;
pub const PCI_CLASS_SYSTEM_PIC: u32 = 2048;
pub const PCI_CLASS_SYSTEM_DMA: u32 = 2049;
pub const PCI_CLASS_SYSTEM_TIMER: u32 = 2050;
pub const PCI_CLASS_SYSTEM_RTC: u32 = 2051;
pub const PCI_CLASS_SYSTEM_PCI_HOTPLUG: u32 = 2052;
pub const PCI_CLASS_SYSTEM_OTHER: u32 = 2176;
pub const PCI_BASE_CLASS_INPUT: u32 = 9;
pub const PCI_CLASS_INPUT_KEYBOARD: u32 = 2304;
pub const PCI_CLASS_INPUT_PEN: u32 = 2305;
pub const PCI_CLASS_INPUT_MOUSE: u32 = 2306;
pub const PCI_CLASS_INPUT_SCANNER: u32 = 2307;
pub const PCI_CLASS_INPUT_GAMEPORT: u32 = 2308;
pub const PCI_CLASS_INPUT_OTHER: u32 = 2432;
pub const PCI_BASE_CLASS_DOCKING: u32 = 10;
pub const PCI_CLASS_DOCKING_GENERIC: u32 = 2560;
pub const PCI_CLASS_DOCKING_OTHER: u32 = 2688;
pub const PCI_BASE_CLASS_PROCESSOR: u32 = 11;
pub const PCI_CLASS_PROCESSOR_386: u32 = 2816;
pub const PCI_CLASS_PROCESSOR_486: u32 = 2817;
pub const PCI_CLASS_PROCESSOR_PENTIUM: u32 = 2818;
pub const PCI_CLASS_PROCESSOR_ALPHA: u32 = 2832;
pub const PCI_CLASS_PROCESSOR_POWERPC: u32 = 2848;
pub const PCI_CLASS_PROCESSOR_MIPS: u32 = 2864;
pub const PCI_CLASS_PROCESSOR_CO: u32 = 2880;
pub const PCI_BASE_CLASS_SERIAL: u32 = 12;
pub const PCI_CLASS_SERIAL_FIREWIRE: u32 = 3072;
pub const PCI_CLASS_SERIAL_ACCESS: u32 = 3073;
pub const PCI_CLASS_SERIAL_SSA: u32 = 3074;
pub const PCI_CLASS_SERIAL_USB: u32 = 3075;
pub const PCI_CLASS_SERIAL_FIBER: u32 = 3076;
pub const PCI_CLASS_SERIAL_SMBUS: u32 = 3077;
pub const PCI_CLASS_SERIAL_INFINIBAND: u32 = 3078;
pub const PCI_BASE_CLASS_WIRELESS: u32 = 13;
pub const PCI_CLASS_WIRELESS_IRDA: u32 = 3328;
pub const PCI_CLASS_WIRELESS_CONSUMER_IR: u32 = 3329;
pub const PCI_CLASS_WIRELESS_RF: u32 = 3344;
pub const PCI_CLASS_WIRELESS_OTHER: u32 = 3456;
pub const PCI_BASE_CLASS_INTELLIGENT: u32 = 14;
pub const PCI_CLASS_INTELLIGENT_I2O: u32 = 3584;
pub const PCI_BASE_CLASS_SATELLITE: u32 = 15;
pub const PCI_CLASS_SATELLITE_TV: u32 = 3840;
pub const PCI_CLASS_SATELLITE_AUDIO: u32 = 3841;
pub const PCI_CLASS_SATELLITE_VOICE: u32 = 3843;
pub const PCI_CLASS_SATELLITE_DATA: u32 = 3844;
pub const PCI_BASE_CLASS_CRYPT: u32 = 16;
pub const PCI_CLASS_CRYPT_NETWORK: u32 = 4096;
pub const PCI_CLASS_CRYPT_ENTERTAINMENT: u32 = 4112;
pub const PCI_CLASS_CRYPT_OTHER: u32 = 4224;
pub const PCI_BASE_CLASS_SIGNAL: u32 = 17;
pub const PCI_CLASS_SIGNAL_DPIO: u32 = 4352;
pub const PCI_CLASS_SIGNAL_PERF_CTR: u32 = 4353;
pub const PCI_CLASS_SIGNAL_SYNCHRONIZER: u32 = 4368;
pub const PCI_CLASS_SIGNAL_OTHER: u32 = 4480;
pub const PCI_CLASS_OTHERS: u32 = 255;
pub const PCI_VENDOR_ID_INTEL: u32 = 32902;
pub const PCI_VENDOR_ID_COMPAQ: u32 = 3601;
pub const PCI_IORESOURCE_TYPE_BITS: u32 = 7936;
pub const PCI_IORESOURCE_IO: u32 = 256;
pub const PCI_IORESOURCE_MEM: u32 = 512;
pub const PCI_IORESOURCE_PREFETCH: u32 = 8192;
pub const PCI_IORESOURCE_MEM_64: u32 = 1048576;
pub const PCI_IORESOURCE_IO_16BIT_ADDR: u32 = 1;
pub const PCI_IORESOURCE_PCI_EA_BEI: u32 = 32;
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const PCI_U64_FMT_X: &[u8; 3] = b"lx\0";
pub const PCI_U64_FMT_U: &[u8; 3] = b"lu\0";
pub const PCIADDR_T_FMT: &[u8; 6] = b"%08lx\0";
pub const PCIADDR_PORT_FMT: &[u8; 6] = b"%04lx\0";
pub const PCIIRQ_FMT: &[u8; 3] = b"%d\0";
pub const PCI_LIB_VERSION: u32 = 199168;
pub const PCI_ADDR_FLAG_MASK: u32 = 15;
pub const PCI_FILL_IDENT: u32 = 1;
pub const PCI_FILL_IRQ: u32 = 2;
pub const PCI_FILL_BASES: u32 = 4;
pub const PCI_FILL_ROM_BASE: u32 = 8;
pub const PCI_FILL_SIZES: u32 = 16;
pub const PCI_FILL_CLASS: u32 = 32;
pub const PCI_FILL_CAPS: u32 = 64;
pub const PCI_FILL_EXT_CAPS: u32 = 128;
pub const PCI_FILL_PHYS_SLOT: u32 = 256;
pub const PCI_FILL_MODULE_ALIAS: u32 = 512;
pub const PCI_FILL_LABEL: u32 = 1024;
pub const PCI_FILL_NUMA_NODE: u32 = 2048;
pub const PCI_FILL_IO_FLAGS: u32 = 4096;
pub const PCI_FILL_DT_NODE: u32 = 8192;
pub const PCI_FILL_IOMMU_GROUP: u32 = 16384;
pub const PCI_FILL_BRIDGE_BASES: u32 = 32768;
pub const PCI_FILL_RESCAN: u32 = 65536;
pub const PCI_FILL_CLASS_EXT: u32 = 131072;
pub const PCI_FILL_SUBSYS: u32 = 262144;
pub const PCI_FILL_PARENT: u32 = 524288;
pub const PCI_FILL_DRIVER: u32 = 1048576;
pub const PCI_CAP_NORMAL: u32 = 1;
pub const PCI_CAP_EXTENDED: u32 = 2;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type u8_ = u8;
pub type u16_ = u16;
pub type u32_ = u32;
pub type u64_ = u64;
pub type pciaddr_t = u64_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pci_methods {
    _unused: [u8; 0],
}
pub const pci_access_type_PCI_ACCESS_AUTO: pci_access_type = 0;
pub const pci_access_type_PCI_ACCESS_SYS_BUS_PCI: pci_access_type = 1;
pub const pci_access_type_PCI_ACCESS_PROC_BUS_PCI: pci_access_type = 2;
pub const pci_access_type_PCI_ACCESS_I386_TYPE1: pci_access_type = 3;
pub const pci_access_type_PCI_ACCESS_I386_TYPE2: pci_access_type = 4;
pub const pci_access_type_PCI_ACCESS_FBSD_DEVICE: pci_access_type = 5;
pub const pci_access_type_PCI_ACCESS_AIX_DEVICE: pci_access_type = 6;
pub const pci_access_type_PCI_ACCESS_NBSD_LIBPCI: pci_access_type = 7;
pub const pci_access_type_PCI_ACCESS_OBSD_DEVICE: pci_access_type = 8;
pub const pci_access_type_PCI_ACCESS_DUMP: pci_access_type = 9;
pub const pci_access_type_PCI_ACCESS_DARWIN: pci_access_type = 10;
pub const pci_access_type_PCI_ACCESS_SYLIXOS_DEVICE: pci_access_type = 11;
pub const pci_access_type_PCI_ACCESS_HURD: pci_access_type = 12;
pub const pci_access_type_PCI_ACCESS_WIN32_CFGMGR32: pci_access_type = 13;
pub const pci_access_type_PCI_ACCESS_WIN32_KLDBG: pci_access_type = 14;
pub const pci_access_type_PCI_ACCESS_WIN32_SYSDBG: pci_access_type = 15;
pub const pci_access_type_PCI_ACCESS_MMIO_TYPE1: pci_access_type = 16;
pub const pci_access_type_PCI_ACCESS_MMIO_TYPE1_EXT: pci_access_type = 17;
pub const pci_access_type_PCI_ACCESS_ECAM: pci_access_type = 18;
pub const pci_access_type_PCI_ACCESS_MAX: pci_access_type = 19;
pub type pci_access_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pci_access {
    pub method: ::std::os::raw::c_uint,
    pub writeable: ::std::os::raw::c_int,
    pub buscentric: ::std::os::raw::c_int,
    pub id_file_name: *mut ::std::os::raw::c_char,
    pub free_id_name: ::std::os::raw::c_int,
    pub numeric_ids: ::std::os::raw::c_int,
    pub id_lookup_mode: ::std::os::raw::c_uint,
    pub debugging: ::std::os::raw::c_int,
    pub error:
        ::std::option::Option<unsafe extern "C" fn(msg: *mut ::std::os::raw::c_char, ...) -> !>,
    pub warning: ::std::option::Option<unsafe extern "C" fn(msg: *mut ::std::os::raw::c_char, ...)>,
    pub debug: ::std::option::Option<unsafe extern "C" fn(msg: *mut ::std::os::raw::c_char, ...)>,
    pub devices: *mut pci_dev,
    pub methods: *mut pci_methods,
    pub params: *mut pci_param,
    pub id_hash: *mut *mut id_entry,
    pub current_id_bucket: *mut id_bucket,
    pub id_load_failed: ::std::os::raw::c_int,
    pub id_cache_status: ::std::os::raw::c_int,
    pub id_udev: *mut udev,
    pub id_udev_hwdb: *mut udev_hwdb,
    pub fd: ::std::os::raw::c_int,
    pub fd_rw: ::std::os::raw::c_int,
    pub fd_pos: ::std::os::raw::c_int,
    pub fd_vpd: ::std::os::raw::c_int,
    pub cached_dev: *mut pci_dev,
    pub aux: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pci_access"][::std::mem::size_of::<pci_access>() - 160usize];
    ["Alignment of pci_access"][::std::mem::align_of::<pci_access>() - 8usize];
    ["Offset of field: pci_access::method"][::std::mem::offset_of!(pci_access, method) - 0usize];
    ["Offset of field: pci_access::writeable"]
        [::std::mem::offset_of!(pci_access, writeable) - 4usize];
    ["Offset of field: pci_access::buscentric"]
        [::std::mem::offset_of!(pci_access, buscentric) - 8usize];
    ["Offset of field: pci_access::id_file_name"]
        [::std::mem::offset_of!(pci_access, id_file_name) - 16usize];
    ["Offset of field: pci_access::free_id_name"]
        [::std::mem::offset_of!(pci_access, free_id_name) - 24usize];
    ["Offset of field: pci_access::numeric_ids"]
        [::std::mem::offset_of!(pci_access, numeric_ids) - 28usize];
    ["Offset of field: pci_access::id_lookup_mode"]
        [::std::mem::offset_of!(pci_access, id_lookup_mode) - 32usize];
    ["Offset of field: pci_access::debugging"]
        [::std::mem::offset_of!(pci_access, debugging) - 36usize];
    ["Offset of field: pci_access::error"][::std::mem::offset_of!(pci_access, error) - 40usize];
    ["Offset of field: pci_access::warning"][::std::mem::offset_of!(pci_access, warning) - 48usize];
    ["Offset of field: pci_access::debug"][::std::mem::offset_of!(pci_access, debug) - 56usize];
    ["Offset of field: pci_access::devices"][::std::mem::offset_of!(pci_access, devices) - 64usize];
    ["Offset of field: pci_access::methods"][::std::mem::offset_of!(pci_access, methods) - 72usize];
    ["Offset of field: pci_access::params"][::std::mem::offset_of!(pci_access, params) - 80usize];
    ["Offset of field: pci_access::id_hash"][::std::mem::offset_of!(pci_access, id_hash) - 88usize];
    ["Offset of field: pci_access::current_id_bucket"]
        [::std::mem::offset_of!(pci_access, current_id_bucket) - 96usize];
    ["Offset of field: pci_access::id_load_failed"]
        [::std::mem::offset_of!(pci_access, id_load_failed) - 104usize];
    ["Offset of field: pci_access::id_cache_status"]
        [::std::mem::offset_of!(pci_access, id_cache_status) - 108usize];
    ["Offset of field: pci_access::id_udev"]
        [::std::mem::offset_of!(pci_access, id_udev) - 112usize];
    ["Offset of field: pci_access::id_udev_hwdb"]
        [::std::mem::offset_of!(pci_access, id_udev_hwdb) - 120usize];
    ["Offset of field: pci_access::fd"][::std::mem::offset_of!(pci_access, fd) - 128usize];
    ["Offset of field: pci_access::fd_rw"][::std::mem::offset_of!(pci_access, fd_rw) - 132usize];
    ["Offset of field: pci_access::fd_pos"][::std::mem::offset_of!(pci_access, fd_pos) - 136usize];
    ["Offset of field: pci_access::fd_vpd"][::std::mem::offset_of!(pci_access, fd_vpd) - 140usize];
    ["Offset of field: pci_access::cached_dev"]
        [::std::mem::offset_of!(pci_access, cached_dev) - 144usize];
    ["Offset of field: pci_access::aux"][::std::mem::offset_of!(pci_access, aux) - 152usize];
};
extern "C" {
    pub fn pci_alloc() -> *mut pci_access;
}
extern "C" {
    pub fn pci_init(arg1: *mut pci_access);
}
extern "C" {
    pub fn pci_cleanup(arg1: *mut pci_access);
}
extern "C" {
    pub fn pci_scan_bus(acc: *mut pci_access);
}
extern "C" {
    pub fn pci_get_dev(
        acc: *mut pci_access,
        domain: ::std::os::raw::c_int,
        bus: ::std::os::raw::c_int,
        dev: ::std::os::raw::c_int,
        func: ::std::os::raw::c_int,
    ) -> *mut pci_dev;
}
extern "C" {
    pub fn pci_free_dev(arg1: *mut pci_dev);
}
extern "C" {
    pub fn pci_lookup_method(name: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_get_method_name(index: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pci_param {
    pub next: *mut pci_param,
    pub param: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub value_malloced: ::std::os::raw::c_int,
    pub help: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pci_param"][::std::mem::size_of::<pci_param>() - 40usize];
    ["Alignment of pci_param"][::std::mem::align_of::<pci_param>() - 8usize];
    ["Offset of field: pci_param::next"][::std::mem::offset_of!(pci_param, next) - 0usize];
    ["Offset of field: pci_param::param"][::std::mem::offset_of!(pci_param, param) - 8usize];
    ["Offset of field: pci_param::value"][::std::mem::offset_of!(pci_param, value) - 16usize];
    ["Offset of field: pci_param::value_malloced"]
        [::std::mem::offset_of!(pci_param, value_malloced) - 24usize];
    ["Offset of field: pci_param::help"][::std::mem::offset_of!(pci_param, help) - 32usize];
};
extern "C" {
    pub fn pci_get_param(
        acc: *mut pci_access,
        param: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pci_set_param(
        acc: *mut pci_access,
        param: *mut ::std::os::raw::c_char,
        value: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_walk_params(acc: *mut pci_access, prev: *mut pci_param) -> *mut pci_param;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pci_dev {
    pub next: *mut pci_dev,
    pub domain_16: u16_,
    pub bus: u8_,
    pub dev: u8_,
    pub func: u8_,
    pub known_fields: ::std::os::raw::c_uint,
    pub vendor_id: u16_,
    pub device_id: u16_,
    pub device_class: u16_,
    pub irq: ::std::os::raw::c_int,
    pub base_addr: [pciaddr_t; 6usize],
    pub size: [pciaddr_t; 6usize],
    pub rom_base_addr: pciaddr_t,
    pub rom_size: pciaddr_t,
    pub first_cap: *mut pci_cap,
    pub phy_slot: *mut ::std::os::raw::c_char,
    pub module_alias: *mut ::std::os::raw::c_char,
    pub label: *mut ::std::os::raw::c_char,
    pub numa_node: ::std::os::raw::c_int,
    pub flags: [pciaddr_t; 6usize],
    pub rom_flags: pciaddr_t,
    pub domain: ::std::os::raw::c_int,
    pub bridge_base_addr: [pciaddr_t; 4usize],
    pub bridge_size: [pciaddr_t; 4usize],
    pub bridge_flags: [pciaddr_t; 4usize],
    pub prog_if: u8_,
    pub rev_id: u8_,
    pub subsys_vendor_id: u16_,
    pub subsys_id: u16_,
    pub parent: *mut pci_dev,
    pub no_config_access: ::std::os::raw::c_int,
    pub access: *mut pci_access,
    pub methods: *mut pci_methods,
    pub cache: *mut u8_,
    pub cache_len: ::std::os::raw::c_int,
    pub hdrtype: ::std::os::raw::c_int,
    pub aux: *mut ::std::os::raw::c_void,
    pub properties: *mut pci_property,
    pub last_cap: *mut pci_cap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pci_dev"][::std::mem::size_of::<pci_dev>() - 424usize];
    ["Alignment of pci_dev"][::std::mem::align_of::<pci_dev>() - 8usize];
    ["Offset of field: pci_dev::next"][::std::mem::offset_of!(pci_dev, next) - 0usize];
    ["Offset of field: pci_dev::domain_16"][::std::mem::offset_of!(pci_dev, domain_16) - 8usize];
    ["Offset of field: pci_dev::bus"][::std::mem::offset_of!(pci_dev, bus) - 10usize];
    ["Offset of field: pci_dev::dev"][::std::mem::offset_of!(pci_dev, dev) - 11usize];
    ["Offset of field: pci_dev::func"][::std::mem::offset_of!(pci_dev, func) - 12usize];
    ["Offset of field: pci_dev::known_fields"]
        [::std::mem::offset_of!(pci_dev, known_fields) - 16usize];
    ["Offset of field: pci_dev::vendor_id"][::std::mem::offset_of!(pci_dev, vendor_id) - 20usize];
    ["Offset of field: pci_dev::device_id"][::std::mem::offset_of!(pci_dev, device_id) - 22usize];
    ["Offset of field: pci_dev::device_class"]
        [::std::mem::offset_of!(pci_dev, device_class) - 24usize];
    ["Offset of field: pci_dev::irq"][::std::mem::offset_of!(pci_dev, irq) - 28usize];
    ["Offset of field: pci_dev::base_addr"][::std::mem::offset_of!(pci_dev, base_addr) - 32usize];
    ["Offset of field: pci_dev::size"][::std::mem::offset_of!(pci_dev, size) - 80usize];
    ["Offset of field: pci_dev::rom_base_addr"]
        [::std::mem::offset_of!(pci_dev, rom_base_addr) - 128usize];
    ["Offset of field: pci_dev::rom_size"][::std::mem::offset_of!(pci_dev, rom_size) - 136usize];
    ["Offset of field: pci_dev::first_cap"][::std::mem::offset_of!(pci_dev, first_cap) - 144usize];
    ["Offset of field: pci_dev::phy_slot"][::std::mem::offset_of!(pci_dev, phy_slot) - 152usize];
    ["Offset of field: pci_dev::module_alias"]
        [::std::mem::offset_of!(pci_dev, module_alias) - 160usize];
    ["Offset of field: pci_dev::label"][::std::mem::offset_of!(pci_dev, label) - 168usize];
    ["Offset of field: pci_dev::numa_node"][::std::mem::offset_of!(pci_dev, numa_node) - 176usize];
    ["Offset of field: pci_dev::flags"][::std::mem::offset_of!(pci_dev, flags) - 184usize];
    ["Offset of field: pci_dev::rom_flags"][::std::mem::offset_of!(pci_dev, rom_flags) - 232usize];
    ["Offset of field: pci_dev::domain"][::std::mem::offset_of!(pci_dev, domain) - 240usize];
    ["Offset of field: pci_dev::bridge_base_addr"]
        [::std::mem::offset_of!(pci_dev, bridge_base_addr) - 248usize];
    ["Offset of field: pci_dev::bridge_size"]
        [::std::mem::offset_of!(pci_dev, bridge_size) - 280usize];
    ["Offset of field: pci_dev::bridge_flags"]
        [::std::mem::offset_of!(pci_dev, bridge_flags) - 312usize];
    ["Offset of field: pci_dev::prog_if"][::std::mem::offset_of!(pci_dev, prog_if) - 344usize];
    ["Offset of field: pci_dev::rev_id"][::std::mem::offset_of!(pci_dev, rev_id) - 345usize];
    ["Offset of field: pci_dev::subsys_vendor_id"]
        [::std::mem::offset_of!(pci_dev, subsys_vendor_id) - 346usize];
    ["Offset of field: pci_dev::subsys_id"][::std::mem::offset_of!(pci_dev, subsys_id) - 348usize];
    ["Offset of field: pci_dev::parent"][::std::mem::offset_of!(pci_dev, parent) - 352usize];
    ["Offset of field: pci_dev::no_config_access"]
        [::std::mem::offset_of!(pci_dev, no_config_access) - 360usize];
    ["Offset of field: pci_dev::access"][::std::mem::offset_of!(pci_dev, access) - 368usize];
    ["Offset of field: pci_dev::methods"][::std::mem::offset_of!(pci_dev, methods) - 376usize];
    ["Offset of field: pci_dev::cache"][::std::mem::offset_of!(pci_dev, cache) - 384usize];
    ["Offset of field: pci_dev::cache_len"][::std::mem::offset_of!(pci_dev, cache_len) - 392usize];
    ["Offset of field: pci_dev::hdrtype"][::std::mem::offset_of!(pci_dev, hdrtype) - 396usize];
    ["Offset of field: pci_dev::aux"][::std::mem::offset_of!(pci_dev, aux) - 400usize];
    ["Offset of field: pci_dev::properties"]
        [::std::mem::offset_of!(pci_dev, properties) - 408usize];
    ["Offset of field: pci_dev::last_cap"][::std::mem::offset_of!(pci_dev, last_cap) - 416usize];
};
extern "C" {
    pub fn pci_read_byte(arg1: *mut pci_dev, pos: ::std::os::raw::c_int) -> u8_;
}
extern "C" {
    pub fn pci_read_word(arg1: *mut pci_dev, pos: ::std::os::raw::c_int) -> u16_;
}
extern "C" {
    pub fn pci_read_long(arg1: *mut pci_dev, pos: ::std::os::raw::c_int) -> u32_;
}
extern "C" {
    pub fn pci_read_vpd(
        d: *mut pci_dev,
        pos: ::std::os::raw::c_int,
        buf: *mut u8_,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_write_byte(
        arg1: *mut pci_dev,
        pos: ::std::os::raw::c_int,
        data: u8_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_write_word(
        arg1: *mut pci_dev,
        pos: ::std::os::raw::c_int,
        data: u16_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_write_long(
        arg1: *mut pci_dev,
        pos: ::std::os::raw::c_int,
        data: u32_,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_read_block(
        arg1: *mut pci_dev,
        pos: ::std::os::raw::c_int,
        buf: *mut u8_,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_write_block(
        arg1: *mut pci_dev,
        pos: ::std::os::raw::c_int,
        buf: *mut u8_,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_fill_info(arg1: *mut pci_dev, flags: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_get_string_property(d: *mut pci_dev, prop: u32_) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pci_setup_cache(arg1: *mut pci_dev, cache: *mut u8_, len: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pci_cap {
    pub next: *mut pci_cap,
    pub id: u16_,
    pub type_: u16_,
    pub addr: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pci_cap"][::std::mem::size_of::<pci_cap>() - 16usize];
    ["Alignment of pci_cap"][::std::mem::align_of::<pci_cap>() - 8usize];
    ["Offset of field: pci_cap::next"][::std::mem::offset_of!(pci_cap, next) - 0usize];
    ["Offset of field: pci_cap::id"][::std::mem::offset_of!(pci_cap, id) - 8usize];
    ["Offset of field: pci_cap::type_"][::std::mem::offset_of!(pci_cap, type_) - 10usize];
    ["Offset of field: pci_cap::addr"][::std::mem::offset_of!(pci_cap, addr) - 12usize];
};
extern "C" {
    pub fn pci_find_cap(
        arg1: *mut pci_dev,
        id: ::std::os::raw::c_uint,
        type_: ::std::os::raw::c_uint,
    ) -> *mut pci_cap;
}
extern "C" {
    pub fn pci_find_cap_nr(
        arg1: *mut pci_dev,
        id: ::std::os::raw::c_uint,
        type_: ::std::os::raw::c_uint,
        cap_number: *mut ::std::os::raw::c_uint,
    ) -> *mut pci_cap;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pci_filter {
    pub domain: ::std::os::raw::c_int,
    pub bus: ::std::os::raw::c_int,
    pub slot: ::std::os::raw::c_int,
    pub func: ::std::os::raw::c_int,
    pub vendor: ::std::os::raw::c_int,
    pub device: ::std::os::raw::c_int,
    pub device_class: ::std::os::raw::c_int,
    pub device_class_mask: ::std::os::raw::c_uint,
    pub prog_if: ::std::os::raw::c_int,
    pub rfu: [::std::os::raw::c_int; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pci_filter"][::std::mem::size_of::<pci_filter>() - 40usize];
    ["Alignment of pci_filter"][::std::mem::align_of::<pci_filter>() - 4usize];
    ["Offset of field: pci_filter::domain"][::std::mem::offset_of!(pci_filter, domain) - 0usize];
    ["Offset of field: pci_filter::bus"][::std::mem::offset_of!(pci_filter, bus) - 4usize];
    ["Offset of field: pci_filter::slot"][::std::mem::offset_of!(pci_filter, slot) - 8usize];
    ["Offset of field: pci_filter::func"][::std::mem::offset_of!(pci_filter, func) - 12usize];
    ["Offset of field: pci_filter::vendor"][::std::mem::offset_of!(pci_filter, vendor) - 16usize];
    ["Offset of field: pci_filter::device"][::std::mem::offset_of!(pci_filter, device) - 20usize];
    ["Offset of field: pci_filter::device_class"]
        [::std::mem::offset_of!(pci_filter, device_class) - 24usize];
    ["Offset of field: pci_filter::device_class_mask"]
        [::std::mem::offset_of!(pci_filter, device_class_mask) - 28usize];
    ["Offset of field: pci_filter::prog_if"][::std::mem::offset_of!(pci_filter, prog_if) - 32usize];
    ["Offset of field: pci_filter::rfu"][::std::mem::offset_of!(pci_filter, rfu) - 36usize];
};
extern "C" {
    pub fn pci_filter_init(arg1: *mut pci_access, arg2: *mut pci_filter);
}
extern "C" {
    pub fn pci_filter_parse_slot(
        arg1: *mut pci_filter,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pci_filter_parse_id(
        arg1: *mut pci_filter,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pci_filter_match(arg1: *mut pci_filter, arg2: *mut pci_dev) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_lookup_name(
        a: *mut pci_access,
        buf: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        ...
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn pci_load_name_list(a: *mut pci_access) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pci_free_name_list(a: *mut pci_access);
}
extern "C" {
    pub fn pci_set_name_list_path(
        a: *mut pci_access,
        name: *mut ::std::os::raw::c_char,
        to_be_freed: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn pci_id_cache_flush(a: *mut pci_access);
}
pub const pci_lookup_mode_PCI_LOOKUP_VENDOR: pci_lookup_mode = 1;
pub const pci_lookup_mode_PCI_LOOKUP_DEVICE: pci_lookup_mode = 2;
pub const pci_lookup_mode_PCI_LOOKUP_CLASS: pci_lookup_mode = 4;
pub const pci_lookup_mode_PCI_LOOKUP_SUBSYSTEM: pci_lookup_mode = 8;
pub const pci_lookup_mode_PCI_LOOKUP_PROGIF: pci_lookup_mode = 16;
pub const pci_lookup_mode_PCI_LOOKUP_NUMERIC: pci_lookup_mode = 65536;
pub const pci_lookup_mode_PCI_LOOKUP_NO_NUMBERS: pci_lookup_mode = 131072;
pub const pci_lookup_mode_PCI_LOOKUP_MIXED: pci_lookup_mode = 262144;
pub const pci_lookup_mode_PCI_LOOKUP_NETWORK: pci_lookup_mode = 524288;
pub const pci_lookup_mode_PCI_LOOKUP_SKIP_LOCAL: pci_lookup_mode = 1048576;
pub const pci_lookup_mode_PCI_LOOKUP_CACHE: pci_lookup_mode = 2097152;
pub const pci_lookup_mode_PCI_LOOKUP_REFRESH_CACHE: pci_lookup_mode = 4194304;
pub const pci_lookup_mode_PCI_LOOKUP_NO_HWDB: pci_lookup_mode = 8388608;
pub type pci_lookup_mode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct id_entry {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct id_bucket {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct udev_hwdb {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pci_property {
    pub _address: u8,
}
