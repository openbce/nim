/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const __BITS_PER_LONG: u32 = 64;
pub const _SYS_TYPES_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const IB_USER_VERBS_ABI_VERSION: u32 = 6;
pub const IB_USER_VERBS_CMD_THRESHOLD: u32 = 50;
pub const IB_USER_VERBS_CMD_COMMAND_MASK: u32 = 255;
pub const IB_USER_VERBS_CMD_FLAG_EXTENDED: u32 = 2147483648;
pub const IB_USER_VERBS_MAX_LOG_IND_TBL_SIZE: u32 = 13;
pub const IB_DEVICE_NAME_MAX: u32 = 64;
pub const IB_UVERBS_ACCESS_OPTIONAL_FIRST: u32 = 1048576;
pub const IB_UVERBS_ACCESS_OPTIONAL_LAST: u32 = 536870912;
pub const IBV_ACCESS_OPTIONAL_FIRST: u32 = 1048576;
pub const IBV_DEVICE_RAW_SCATTER_FCS: u64 = 17179869184;
pub const IBV_DEVICE_PCI_WRITE_END_PADDING: u64 = 68719476736;
pub const ETHERNET_LL_SIZE: u32 = 6;
pub const IB_ROCE_UDP_ENCAP_VALID_PORT_MIN: u32 = 49152;
pub const IB_ROCE_UDP_ENCAP_VALID_PORT_MAX: u32 = 65535;
pub const IB_GRH_FLOWLABEL_MASK: u32 = 1048575;
pub const IBV_PATH_RECORD_REVERSIBLE: u32 = 128;
pub const IBV_PATH_FLAG_GMP: u32 = 1;
pub const IBV_PATH_FLAG_PRIMARY: u32 = 2;
pub const IBV_PATH_FLAG_ALTERNATE: u32 = 4;
pub const IBV_PATH_FLAG_OUTBOUND: u32 = 8;
pub const IBV_PATH_FLAG_INBOUND: u32 = 16;
pub const IBV_PATH_FLAG_INBOUND_REVERSE: u32 = 32;
pub const IBV_PATH_FLAG_BIDIRECTIONAL: u32 = 40;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const _BYTESWAP_H: u32 = 1;
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _ARPA_INET_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const IB_MAD_RPC_VERSION_MASK: u32 = 3840;
pub const IB_MAD_RPC_VERSION1: u32 = 256;
pub const IB_SUBNET_PATH_HOPS_MAX: u32 = 64;
pub const IB_DEFAULT_SUBN_PREFIX: i64 = -108086391056891904;
pub const IB_DEFAULT_QP1_QKEY: u32 = 2147549184;
pub const IB_MAD_SIZE: u32 = 256;
pub const IB_SMP_DATA_OFFS: u32 = 64;
pub const IB_SMP_DATA_SIZE: u32 = 64;
pub const IB_VENDOR_RANGE1_DATA_OFFS: u32 = 24;
pub const IB_VENDOR_RANGE1_DATA_SIZE: u32 = 232;
pub const IB_VENDOR_RANGE2_DATA_OFFS: u32 = 40;
pub const IB_VENDOR_RANGE2_DATA_SIZE: u32 = 216;
pub const IB_SA_DATA_SIZE: u32 = 200;
pub const IB_SA_DATA_OFFS: u32 = 56;
pub const IB_PC_DATA_OFFS: u32 = 64;
pub const IB_PC_DATA_SZ: u32 = 192;
pub const IB_SA_MCM_RECSZ: u32 = 53;
pub const IB_SA_PR_RECSZ: u32 = 64;
pub const IB_SA_NR_RECSZ: u32 = 108;
pub const IB_SA_GIR_RECSZ: u32 = 72;
pub const IB_BM_DATA_OFFS: u32 = 64;
pub const IB_BM_DATA_SZ: u32 = 192;
pub const IB_BM_BKEY_OFFS: u32 = 24;
pub const IB_BM_BKEY_AND_DATA_SZ: u32 = 232;
pub const IB_CC_DATA_OFFS: u32 = 64;
pub const IB_CC_DATA_SZ: u32 = 192;
pub const IB_CC_LOG_DATA_OFFS: u32 = 32;
pub const IB_CC_LOG_DATA_SZ: u32 = 224;
pub const IB_OPENIB_OUI: u32 = 5125;
pub const IB_FIELD_NAME_LEN: u32 = 32;
pub const IB_MIN_UCAST_LID: u32 = 1;
pub const IB_MAX_UCAST_LID: u32 = 49151;
pub const IB_MIN_MCAST_LID: u32 = 49152;
pub const IB_MAX_MCAST_LID: u32 = 65534;
pub const MAD_DEF_RETRIES: u32 = 3;
pub const MAD_DEF_TIMEOUT_MS: u32 = 1000;
pub const UMAD_MAX_DEVICES: u32 = 32;
pub const UMAD_ANY_PORT: u32 = 0;
pub const IB_UMAD_ABI_VERSION: u32 = 5;
pub const IB_UMAD_ABI_DIR: &[u8; 26] = b"/sys/class/infiniband_mad\0";
pub const IB_UMAD_ABI_FILE: &[u8; 12] = b"abi_version\0";
pub const IB_IOCTL_MAGIC: u32 = 27;
pub const UMAD_CA_NAME_LEN: u32 = 20;
pub const UMAD_CA_MAX_PORTS: u32 = 10;
pub const UMAD_CA_MAX_AGENTS: u32 = 32;
pub const SYS_INFINIBAND: &[u8; 22] = b"/sys/class/infiniband\0";
pub const SYS_INFINIBAND_MAD: &[u8; 26] = b"/sys/class/infiniband_mad\0";
pub const SYS_IB_MAD_PORT: &[u8; 5] = b"port\0";
pub const SYS_IB_MAD_DEV: &[u8; 6] = b"ibdev\0";
pub const UMAD_MAX_PORTS: u32 = 64;
pub const SYS_CA_PORTS_DIR: &[u8; 6] = b"ports\0";
pub const SYS_NODE_TYPE: &[u8; 10] = b"node_type\0";
pub const SYS_CA_FW_VERS: &[u8; 7] = b"fw_ver\0";
pub const SYS_CA_HW_VERS: &[u8; 7] = b"hw_rev\0";
pub const SYS_CA_TYPE: &[u8; 9] = b"hca_type\0";
pub const SYS_CA_NODE_GUID: &[u8; 10] = b"node_guid\0";
pub const SYS_CA_SYS_GUID: &[u8; 15] = b"sys_image_guid\0";
pub const SYS_PORT_LMC: &[u8; 15] = b"lid_mask_count\0";
pub const SYS_PORT_SMLID: &[u8; 7] = b"sm_lid\0";
pub const SYS_PORT_SMSL: &[u8; 6] = b"sm_sl\0";
pub const SYS_PORT_LID: &[u8; 4] = b"lid\0";
pub const SYS_PORT_STATE: &[u8; 6] = b"state\0";
pub const SYS_PORT_PHY_STATE: &[u8; 11] = b"phys_state\0";
pub const SYS_PORT_CAPMASK: &[u8; 9] = b"cap_mask\0";
pub const SYS_PORT_RATE: &[u8; 5] = b"rate\0";
pub const SYS_PORT_GUID: &[u8; 10] = b"port_guid\0";
pub const SYS_PORT_GID: &[u8; 7] = b"gids/0\0";
pub const SYS_PORT_LINK_LAYER: &[u8; 11] = b"link_layer\0";
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sched_param() {
    const UNINIT: ::std::mem::MaybeUninit<sched_param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sched_param>(),
        4usize,
        concat!("Size of: ", stringify!(sched_param))
    );
    assert_eq!(
        ::std::mem::align_of::<sched_param>(),
        4usize,
        concat!("Alignment of ", stringify!(sched_param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sched_priority) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sched_param),
            "::",
            stringify!(sched_priority)
        )
    );
}
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[test]
fn bindgen_test_layout_cpu_set_t() {
    const UNINIT: ::std::mem::MaybeUninit<cpu_set_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cpu_set_t>(),
        128usize,
        concat!("Size of: ", stringify!(cpu_set_t))
    );
    assert_eq!(
        ::std::mem::align_of::<cpu_set_t>(),
        8usize,
        concat!("Alignment of ", stringify!(cpu_set_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cpu_set_t),
            "::",
            stringify!(__bits)
        )
    );
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    const UNINIT: ::std::mem::MaybeUninit<tm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_min) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_hour) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mday) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_mon) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_year) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_wday) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_yday) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_isdst) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_gmtoff) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_zone) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
impl Default for tm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::std::mem::MaybeUninit<itimerspec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
impl Default for __locale_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___atomic_wide_counter__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__atomic_wide_counter__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__low) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__high) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___atomic_wide_counter() {
    const UNINIT: ::std::mem::MaybeUninit<__atomic_wide_counter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Size of: ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        ::std::mem::align_of::<__atomic_wide_counter>(),
        8usize,
        concat!("Alignment of ", stringify!(__atomic_wide_counter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__atomic_wide_counter),
            "::",
            stringify!(__value32)
        )
    );
}
impl Default for __atomic_wide_counter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_list> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[test]
fn bindgen_test_layout___pthread_internal_slist() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_internal_slist> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_slist>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_slist))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_slist),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_mutex_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__lock) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__owner) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__nusers) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__kind) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__spins) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__elision) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__list) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_rwlock_arch_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__readers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrphase_futex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__writers_futex) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad3) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad4) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cur_writer) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__shared) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__rwelision) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad1) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cond_s> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wseq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_refs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g1_orig_size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wrefs) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__g_signals) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___once_flag() {
    const UNINIT: ::std::mem::MaybeUninit<__once_flag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__once_flag>(),
        4usize,
        concat!("Size of: ", stringify!(__once_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<__once_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(__once_flag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__once_flag),
            "::",
            stringify!(__data)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutexattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_condattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_mutex_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_cond_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlock_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_rwlockattr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrier_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    const UNINIT: ::std::mem::MaybeUninit<pthread_barrierattr_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__align) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    const UNINIT: ::std::mem::MaybeUninit<__sigset_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__jmpbuf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__saved_mask) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[test]
fn bindgen_test_layout__pthread_cleanup_buffer() {
    const UNINIT: ::std::mem::MaybeUninit<_pthread_cleanup_buffer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_pthread_cleanup_buffer>(),
        32usize,
        concat!("Size of: ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        ::std::mem::align_of::<_pthread_cleanup_buffer>(),
        8usize,
        concat!("Alignment of ", stringify!(_pthread_cleanup_buffer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__canceltype) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__canceltype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__prev) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_pthread_cleanup_buffer),
            "::",
            stringify!(__prev)
        )
    );
}
impl Default for _pthread_cleanup_buffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___cancel_jmp_buf_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__cancel_jmp_buf_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__cancel_jmp_buf_tag>(),
        72usize,
        concat!("Size of: ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__cancel_jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__cancel_jmp_buf_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__mask_was_saved) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__cancel_jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[test]
fn bindgen_test_layout___pthread_unwind_buf_t() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_unwind_buf_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_unwind_buf_t>(),
        104usize,
        concat!("Size of: ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_unwind_buf_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_unwind_buf_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_jmp_buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__cancel_jmp_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_unwind_buf_t),
            "::",
            stringify!(__pad)
        )
    );
}
impl Default for __pthread_unwind_buf_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___pthread_cleanup_frame() {
    const UNINIT: ::std::mem::MaybeUninit<__pthread_cleanup_frame> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__pthread_cleanup_frame>(),
        24usize,
        concat!("Size of: ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cleanup_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cleanup_frame))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_routine) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_routine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_arg) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_arg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__do_it) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__do_it)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cancel_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cleanup_frame),
            "::",
            stringify!(__cancel_type)
        )
    );
}
impl Default for __pthread_cleanup_frame {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___kernel_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(__kernel_fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__kernel_fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::std::mem::MaybeUninit<timeval> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    const UNINIT: ::std::mem::MaybeUninit<fd_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__fds_bits) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub const IB_USER_VERBS_CMD_GET_CONTEXT: ib_uverbs_write_cmds = 0;
pub const IB_USER_VERBS_CMD_QUERY_DEVICE: ib_uverbs_write_cmds = 1;
pub const IB_USER_VERBS_CMD_QUERY_PORT: ib_uverbs_write_cmds = 2;
pub const IB_USER_VERBS_CMD_ALLOC_PD: ib_uverbs_write_cmds = 3;
pub const IB_USER_VERBS_CMD_DEALLOC_PD: ib_uverbs_write_cmds = 4;
pub const IB_USER_VERBS_CMD_CREATE_AH: ib_uverbs_write_cmds = 5;
pub const IB_USER_VERBS_CMD_MODIFY_AH: ib_uverbs_write_cmds = 6;
pub const IB_USER_VERBS_CMD_QUERY_AH: ib_uverbs_write_cmds = 7;
pub const IB_USER_VERBS_CMD_DESTROY_AH: ib_uverbs_write_cmds = 8;
pub const IB_USER_VERBS_CMD_REG_MR: ib_uverbs_write_cmds = 9;
pub const IB_USER_VERBS_CMD_REG_SMR: ib_uverbs_write_cmds = 10;
pub const IB_USER_VERBS_CMD_REREG_MR: ib_uverbs_write_cmds = 11;
pub const IB_USER_VERBS_CMD_QUERY_MR: ib_uverbs_write_cmds = 12;
pub const IB_USER_VERBS_CMD_DEREG_MR: ib_uverbs_write_cmds = 13;
pub const IB_USER_VERBS_CMD_ALLOC_MW: ib_uverbs_write_cmds = 14;
pub const IB_USER_VERBS_CMD_BIND_MW: ib_uverbs_write_cmds = 15;
pub const IB_USER_VERBS_CMD_DEALLOC_MW: ib_uverbs_write_cmds = 16;
pub const IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL: ib_uverbs_write_cmds = 17;
pub const IB_USER_VERBS_CMD_CREATE_CQ: ib_uverbs_write_cmds = 18;
pub const IB_USER_VERBS_CMD_RESIZE_CQ: ib_uverbs_write_cmds = 19;
pub const IB_USER_VERBS_CMD_DESTROY_CQ: ib_uverbs_write_cmds = 20;
pub const IB_USER_VERBS_CMD_POLL_CQ: ib_uverbs_write_cmds = 21;
pub const IB_USER_VERBS_CMD_PEEK_CQ: ib_uverbs_write_cmds = 22;
pub const IB_USER_VERBS_CMD_REQ_NOTIFY_CQ: ib_uverbs_write_cmds = 23;
pub const IB_USER_VERBS_CMD_CREATE_QP: ib_uverbs_write_cmds = 24;
pub const IB_USER_VERBS_CMD_QUERY_QP: ib_uverbs_write_cmds = 25;
pub const IB_USER_VERBS_CMD_MODIFY_QP: ib_uverbs_write_cmds = 26;
pub const IB_USER_VERBS_CMD_DESTROY_QP: ib_uverbs_write_cmds = 27;
pub const IB_USER_VERBS_CMD_POST_SEND: ib_uverbs_write_cmds = 28;
pub const IB_USER_VERBS_CMD_POST_RECV: ib_uverbs_write_cmds = 29;
pub const IB_USER_VERBS_CMD_ATTACH_MCAST: ib_uverbs_write_cmds = 30;
pub const IB_USER_VERBS_CMD_DETACH_MCAST: ib_uverbs_write_cmds = 31;
pub const IB_USER_VERBS_CMD_CREATE_SRQ: ib_uverbs_write_cmds = 32;
pub const IB_USER_VERBS_CMD_MODIFY_SRQ: ib_uverbs_write_cmds = 33;
pub const IB_USER_VERBS_CMD_QUERY_SRQ: ib_uverbs_write_cmds = 34;
pub const IB_USER_VERBS_CMD_DESTROY_SRQ: ib_uverbs_write_cmds = 35;
pub const IB_USER_VERBS_CMD_POST_SRQ_RECV: ib_uverbs_write_cmds = 36;
pub const IB_USER_VERBS_CMD_OPEN_XRCD: ib_uverbs_write_cmds = 37;
pub const IB_USER_VERBS_CMD_CLOSE_XRCD: ib_uverbs_write_cmds = 38;
pub const IB_USER_VERBS_CMD_CREATE_XSRQ: ib_uverbs_write_cmds = 39;
pub const IB_USER_VERBS_CMD_OPEN_QP: ib_uverbs_write_cmds = 40;
pub type ib_uverbs_write_cmds = ::std::os::raw::c_uint;
pub const IB_USER_VERBS_EX_CMD_QUERY_DEVICE: _bindgen_ty_11 = 1;
pub const IB_USER_VERBS_EX_CMD_CREATE_CQ: _bindgen_ty_11 = 18;
pub const IB_USER_VERBS_EX_CMD_CREATE_QP: _bindgen_ty_11 = 24;
pub const IB_USER_VERBS_EX_CMD_MODIFY_QP: _bindgen_ty_11 = 26;
pub const IB_USER_VERBS_EX_CMD_CREATE_FLOW: _bindgen_ty_11 = 50;
pub const IB_USER_VERBS_EX_CMD_DESTROY_FLOW: _bindgen_ty_11 = 51;
pub const IB_USER_VERBS_EX_CMD_CREATE_WQ: _bindgen_ty_11 = 52;
pub const IB_USER_VERBS_EX_CMD_MODIFY_WQ: _bindgen_ty_11 = 53;
pub const IB_USER_VERBS_EX_CMD_DESTROY_WQ: _bindgen_ty_11 = 54;
pub const IB_USER_VERBS_EX_CMD_CREATE_RWQ_IND_TBL: _bindgen_ty_11 = 55;
pub const IB_USER_VERBS_EX_CMD_DESTROY_RWQ_IND_TBL: _bindgen_ty_11 = 56;
pub const IB_USER_VERBS_EX_CMD_MODIFY_CQ: _bindgen_ty_11 = 57;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_async_event_desc {
    pub element: __u64,
    pub event_type: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_async_event_desc() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_async_event_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_async_event_desc>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_async_event_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_async_event_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_async_event_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_async_event_desc),
            "::",
            stringify!(element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_async_event_desc),
            "::",
            stringify!(event_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_async_event_desc),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_comp_event_desc {
    pub cq_handle: __u64,
}
#[test]
fn bindgen_test_layout_ib_uverbs_comp_event_desc() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_comp_event_desc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_comp_event_desc>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_comp_event_desc))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_comp_event_desc>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_comp_event_desc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_comp_event_desc),
            "::",
            stringify!(cq_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_cq_moderation_caps {
    pub max_cq_moderation_count: __u16,
    pub max_cq_moderation_period: __u16,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_cq_moderation_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_cq_moderation_caps> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_cq_moderation_caps>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_cq_moderation_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_cq_moderation_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_cq_moderation_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cq_moderation_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_cq_moderation_caps),
            "::",
            stringify!(max_cq_moderation_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cq_moderation_period) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_cq_moderation_caps),
            "::",
            stringify!(max_cq_moderation_period)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_cq_moderation_caps),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_cmd_hdr {
    pub command: __u32,
    pub in_words: __u16,
    pub out_words: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_cmd_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_cmd_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_cmd_hdr>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_cmd_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_cmd_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_cmd_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).command) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_cmd_hdr),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).in_words) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_cmd_hdr),
            "::",
            stringify!(in_words)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).out_words) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_cmd_hdr),
            "::",
            stringify!(out_words)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_cmd_hdr {
    pub response: __u64,
    pub provider_in_words: __u16,
    pub provider_out_words: __u16,
    pub cmd_hdr_reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_cmd_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_cmd_hdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_cmd_hdr>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_cmd_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_cmd_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_cmd_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_cmd_hdr),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).provider_in_words) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_cmd_hdr),
            "::",
            stringify!(provider_in_words)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).provider_out_words) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_cmd_hdr),
            "::",
            stringify!(provider_out_words)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_hdr_reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_cmd_hdr),
            "::",
            stringify!(cmd_hdr_reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_get_context {
    pub response: __u64,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_get_context() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_get_context> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_get_context>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_get_context))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_get_context>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_get_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_get_context),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_get_context),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_get_context_resp {
    pub async_fd: __u32,
    pub num_comp_vectors: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_get_context_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_get_context_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_get_context_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_get_context_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_get_context_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_get_context_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_get_context_resp),
            "::",
            stringify!(async_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_comp_vectors) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_get_context_resp),
            "::",
            stringify!(num_comp_vectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_get_context_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_device {
    pub response: __u64,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_device() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_device> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_device>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_device))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_device>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_device))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_query_device_resp {
    pub fw_ver: __u64,
    pub node_guid: __be64,
    pub sys_image_guid: __be64,
    pub max_mr_size: __u64,
    pub page_size_cap: __u64,
    pub vendor_id: __u32,
    pub vendor_part_id: __u32,
    pub hw_ver: __u32,
    pub max_qp: __u32,
    pub max_qp_wr: __u32,
    pub device_cap_flags: __u32,
    pub max_sge: __u32,
    pub max_sge_rd: __u32,
    pub max_cq: __u32,
    pub max_cqe: __u32,
    pub max_mr: __u32,
    pub max_pd: __u32,
    pub max_qp_rd_atom: __u32,
    pub max_ee_rd_atom: __u32,
    pub max_res_rd_atom: __u32,
    pub max_qp_init_rd_atom: __u32,
    pub max_ee_init_rd_atom: __u32,
    pub atomic_cap: __u32,
    pub max_ee: __u32,
    pub max_rdd: __u32,
    pub max_mw: __u32,
    pub max_raw_ipv6_qp: __u32,
    pub max_raw_ethy_qp: __u32,
    pub max_mcast_grp: __u32,
    pub max_mcast_qp_attach: __u32,
    pub max_total_mcast_qp_attach: __u32,
    pub max_ah: __u32,
    pub max_fmr: __u32,
    pub max_map_per_fmr: __u32,
    pub max_srq: __u32,
    pub max_srq_wr: __u32,
    pub max_srq_sge: __u32,
    pub max_pkeys: __u16,
    pub local_ca_ack_delay: __u8,
    pub phys_port_cnt: __u8,
    pub reserved: [__u8; 4usize],
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_device_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_device_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_device_resp>(),
        176usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_device_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_device_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_device_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fw_ver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(fw_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_guid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(node_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_image_guid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(sys_image_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mr_size) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_mr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_size_cap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(page_size_cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_part_id) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(vendor_part_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_ver) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(hw_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_qp) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_qp_wr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_qp_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_cap_flags) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(device_cap_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge_rd) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_sge_rd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cq) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cqe) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mr) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_pd) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_qp_rd_atom) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_qp_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ee_rd_atom) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_ee_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_res_rd_atom) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_res_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_qp_init_rd_atom) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_qp_init_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ee_init_rd_atom) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_ee_init_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atomic_cap) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(atomic_cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ee) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_ee)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rdd) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_rdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mw) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_mw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_raw_ipv6_qp) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_raw_ipv6_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_raw_ethy_qp) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_raw_ethy_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mcast_grp) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_mcast_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mcast_qp_attach) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_mcast_qp_attach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_total_mcast_qp_attach) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_total_mcast_qp_attach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ah) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_fmr) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_fmr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_map_per_fmr) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_map_per_fmr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_srq) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_srq_wr) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_srq_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_srq_sge) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_srq_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_pkeys) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(max_pkeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).local_ca_ack_delay) as usize - ptr as usize },
        170usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(local_ca_ack_delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phys_port_cnt) as usize - ptr as usize },
        171usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(phys_port_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_device_resp),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_query_device {
    pub comp_mask: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_query_device() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_query_device> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_query_device>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_query_device))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_query_device>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_query_device))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_odp_caps {
    pub general_caps: __u64,
    pub per_transport_caps: ib_uverbs_odp_caps__bindgen_ty_1,
    pub reserved: __u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_odp_caps__bindgen_ty_1 {
    pub rc_odp_caps: __u32,
    pub uc_odp_caps: __u32,
    pub ud_odp_caps: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_odp_caps__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_odp_caps__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_odp_caps__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(ib_uverbs_odp_caps__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_odp_caps__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_odp_caps__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rc_odp_caps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_odp_caps__bindgen_ty_1),
            "::",
            stringify!(rc_odp_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_odp_caps) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_odp_caps__bindgen_ty_1),
            "::",
            stringify!(uc_odp_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ud_odp_caps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_odp_caps__bindgen_ty_1),
            "::",
            stringify!(ud_odp_caps)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_odp_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_odp_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_odp_caps>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_odp_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_odp_caps>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_odp_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).general_caps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_odp_caps),
            "::",
            stringify!(general_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).per_transport_caps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_odp_caps),
            "::",
            stringify!(per_transport_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_odp_caps),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_rss_caps {
    pub supported_qpts: __u32,
    pub max_rwq_indirection_tables: __u32,
    pub max_rwq_indirection_table_size: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_rss_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_rss_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_rss_caps>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_rss_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_rss_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_rss_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported_qpts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rss_caps),
            "::",
            stringify!(supported_qpts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rwq_indirection_tables) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rss_caps),
            "::",
            stringify!(max_rwq_indirection_tables)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_rwq_indirection_table_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rss_caps),
            "::",
            stringify!(max_rwq_indirection_table_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rss_caps),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_tm_caps {
    pub max_rndv_hdr_size: __u32,
    pub max_num_tags: __u32,
    pub flags: __u32,
    pub max_ops: __u32,
    pub max_sge: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_tm_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_tm_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_tm_caps>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_tm_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_tm_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_tm_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rndv_hdr_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_tm_caps),
            "::",
            stringify!(max_rndv_hdr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num_tags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_tm_caps),
            "::",
            stringify!(max_num_tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_tm_caps),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ops) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_tm_caps),
            "::",
            stringify!(max_ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_tm_caps),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_tm_caps),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_query_device_resp {
    pub base: ib_uverbs_query_device_resp,
    pub comp_mask: __u32,
    pub response_length: __u32,
    pub odp_caps: ib_uverbs_odp_caps,
    pub timestamp_mask: __u64,
    pub hca_core_clock: __u64,
    pub device_cap_flags_ex: __u64,
    pub rss_caps: ib_uverbs_rss_caps,
    pub max_wq_type_rq: __u32,
    pub raw_packet_caps: __u32,
    pub tm_caps: ib_uverbs_tm_caps,
    pub cq_moderation_caps: ib_uverbs_cq_moderation_caps,
    pub max_dm_size: __u64,
    pub xrc_odp_caps: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_query_device_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_query_device_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_query_device_resp>(),
        304usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_query_device_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_query_device_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_query_device_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_length) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(response_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odp_caps) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(odp_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timestamp_mask) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(timestamp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hca_core_clock) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(hca_core_clock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_cap_flags_ex) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(device_cap_flags_ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rss_caps) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(rss_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wq_type_rq) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(max_wq_type_rq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_packet_caps) as usize - ptr as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(raw_packet_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_caps) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(tm_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_moderation_caps) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(cq_moderation_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dm_size) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(max_dm_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrc_odp_caps) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(xrc_odp_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_query_device_resp),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_port {
    pub response: __u64,
    pub port_num: __u8,
    pub reserved: [__u8; 7usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_port() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_port> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_port>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_port))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_port>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_port))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_query_port_resp {
    pub port_cap_flags: __u32,
    pub max_msg_sz: __u32,
    pub bad_pkey_cntr: __u32,
    pub qkey_viol_cntr: __u32,
    pub gid_tbl_len: __u32,
    pub pkey_tbl_len: __u16,
    pub lid: __u16,
    pub sm_lid: __u16,
    pub state: __u8,
    pub max_mtu: __u8,
    pub active_mtu: __u8,
    pub lmc: __u8,
    pub max_vl_num: __u8,
    pub sm_sl: __u8,
    pub subnet_timeout: __u8,
    pub init_type_reply: __u8,
    pub active_width: __u8,
    pub active_speed: __u8,
    pub phys_state: __u8,
    pub link_layer: __u8,
    pub flags: __u8,
    pub reserved: __u8,
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_port_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_port_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_port_resp>(),
        40usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_port_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_port_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_port_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_cap_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(port_cap_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_msg_sz) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(max_msg_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bad_pkey_cntr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(bad_pkey_cntr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey_viol_cntr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(qkey_viol_cntr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid_tbl_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(gid_tbl_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_tbl_len) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(pkey_tbl_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lid) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_lid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(sm_lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mtu) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(max_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_mtu) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(active_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmc) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(lmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_vl_num) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(max_vl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_sl) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(sm_sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subnet_timeout) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(subnet_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_type_reply) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(init_type_reply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_width) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(active_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_speed) as usize - ptr as usize },
        35usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(active_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phys_state) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(phys_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_layer) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(link_layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_alloc_pd {
    pub response: __u64,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_alloc_pd() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_alloc_pd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_alloc_pd>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_alloc_pd))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_alloc_pd>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_alloc_pd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_pd),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_pd),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_alloc_pd_resp {
    pub pd_handle: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_alloc_pd_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_alloc_pd_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_alloc_pd_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_alloc_pd_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_alloc_pd_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_alloc_pd_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_pd_resp),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_pd_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_dealloc_pd {
    pub pd_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_dealloc_pd() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_dealloc_pd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_dealloc_pd>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_dealloc_pd))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_dealloc_pd>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_dealloc_pd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_dealloc_pd),
            "::",
            stringify!(pd_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_open_xrcd {
    pub response: __u64,
    pub fd: __u32,
    pub oflags: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_open_xrcd() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_open_xrcd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_open_xrcd>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_open_xrcd))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_open_xrcd>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_open_xrcd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_xrcd),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_xrcd),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oflags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_xrcd),
            "::",
            stringify!(oflags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_xrcd),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_open_xrcd_resp {
    pub xrcd_handle: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_open_xrcd_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_open_xrcd_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_open_xrcd_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_open_xrcd_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_open_xrcd_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_open_xrcd_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrcd_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_xrcd_resp),
            "::",
            stringify!(xrcd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_xrcd_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_close_xrcd {
    pub xrcd_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_close_xrcd() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_close_xrcd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_close_xrcd>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_close_xrcd))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_close_xrcd>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_close_xrcd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrcd_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_close_xrcd),
            "::",
            stringify!(xrcd_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_reg_mr {
    pub response: __u64,
    pub start: __u64,
    pub length: __u64,
    pub hca_va: __u64,
    pub pd_handle: __u32,
    pub access_flags: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_reg_mr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_reg_mr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_reg_mr>(),
        40usize,
        concat!("Size of: ", stringify!(ib_uverbs_reg_mr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_reg_mr>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_reg_mr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hca_va) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr),
            "::",
            stringify!(hca_va)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr),
            "::",
            stringify!(access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_reg_mr_resp {
    pub mr_handle: __u32,
    pub lkey: __u32,
    pub rkey: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_reg_mr_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_reg_mr_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_reg_mr_resp>(),
        12usize,
        concat!("Size of: ", stringify!(ib_uverbs_reg_mr_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_reg_mr_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_reg_mr_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr_resp),
            "::",
            stringify!(mr_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lkey) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr_resp),
            "::",
            stringify!(lkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr_resp),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_reg_mr_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_rereg_mr {
    pub response: __u64,
    pub mr_handle: __u32,
    pub flags: __u32,
    pub start: __u64,
    pub length: __u64,
    pub hca_va: __u64,
    pub pd_handle: __u32,
    pub access_flags: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_rereg_mr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_rereg_mr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_rereg_mr>(),
        48usize,
        concat!("Size of: ", stringify!(ib_uverbs_rereg_mr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_rereg_mr>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_rereg_mr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(mr_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hca_va) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(hca_va)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access_flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_rereg_mr_resp {
    pub lkey: __u32,
    pub rkey: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_rereg_mr_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_rereg_mr_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_rereg_mr_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_rereg_mr_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_rereg_mr_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_rereg_mr_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr_resp),
            "::",
            stringify!(lkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr_resp),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_rereg_mr_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_dereg_mr {
    pub mr_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_dereg_mr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_dereg_mr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_dereg_mr>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_dereg_mr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_dereg_mr>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_dereg_mr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_dereg_mr),
            "::",
            stringify!(mr_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_alloc_mw {
    pub response: __u64,
    pub pd_handle: __u32,
    pub mw_type: __u8,
    pub reserved: [__u8; 3usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_alloc_mw() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_alloc_mw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_alloc_mw>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_alloc_mw))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_alloc_mw>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_alloc_mw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_mw),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_mw),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mw_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_mw),
            "::",
            stringify!(mw_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_mw),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_mw),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_alloc_mw_resp {
    pub mw_handle: __u32,
    pub rkey: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_alloc_mw_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_alloc_mw_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_alloc_mw_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_alloc_mw_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_alloc_mw_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_alloc_mw_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mw_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_mw_resp),
            "::",
            stringify!(mw_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_mw_resp),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_alloc_mw_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_dealloc_mw {
    pub mw_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_dealloc_mw() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_dealloc_mw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_dealloc_mw>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_dealloc_mw))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_dealloc_mw>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_dealloc_mw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mw_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_dealloc_mw),
            "::",
            stringify!(mw_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_create_comp_channel {
    pub response: __u64,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_comp_channel() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_comp_channel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_comp_channel>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_comp_channel))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_comp_channel>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_comp_channel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_comp_channel),
            "::",
            stringify!(response)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_create_comp_channel_resp {
    pub fd: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_comp_channel_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_comp_channel_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_comp_channel_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_comp_channel_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_comp_channel_resp>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_create_comp_channel_resp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_comp_channel_resp),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_cq {
    pub response: __u64,
    pub user_handle: __u64,
    pub cqe: __u32,
    pub comp_vector: __u32,
    pub comp_channel: __s32,
    pub reserved: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_cq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_cq>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_cq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqe) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq),
            "::",
            stringify!(cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_vector) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq),
            "::",
            stringify!(comp_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_channel) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq),
            "::",
            stringify!(comp_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq),
            "::",
            stringify!(driver_data)
        )
    );
}
pub const IB_UVERBS_CQ_FLAGS_TIMESTAMP_COMPLETION: ib_uverbs_ex_create_cq_flags = 1;
pub const IB_UVERBS_CQ_FLAGS_IGNORE_OVERRUN: ib_uverbs_ex_create_cq_flags = 2;
pub type ib_uverbs_ex_create_cq_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_cq {
    pub user_handle: __u64,
    pub cqe: __u32,
    pub comp_vector: __u32,
    pub comp_channel: __s32,
    pub comp_mask: __u32,
    pub flags: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_create_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_create_cq> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_create_cq>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_create_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_create_cq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_create_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqe) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq),
            "::",
            stringify!(cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_vector) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq),
            "::",
            stringify!(comp_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_channel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq),
            "::",
            stringify!(comp_channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_cq_resp {
    pub cq_handle: __u32,
    pub cqe: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_cq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_cq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_cq_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_cq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_cq_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_cq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq_resp),
            "::",
            stringify!(cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqe) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq_resp),
            "::",
            stringify!(cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_cq_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_ex_create_cq_resp {
    pub base: ib_uverbs_create_cq_resp,
    pub comp_mask: __u32,
    pub response_length: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_create_cq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_create_cq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_create_cq_resp>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_create_cq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_create_cq_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_create_cq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq_resp),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq_resp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_length) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_cq_resp),
            "::",
            stringify!(response_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_resize_cq {
    pub response: __u64,
    pub cq_handle: __u32,
    pub cqe: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_resize_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_resize_cq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_resize_cq>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_resize_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_resize_cq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_resize_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_resize_cq),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_resize_cq),
            "::",
            stringify!(cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqe) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_resize_cq),
            "::",
            stringify!(cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_resize_cq),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_resize_cq_resp {
    pub cqe: __u32,
    pub reserved: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_resize_cq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_resize_cq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_resize_cq_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_resize_cq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_resize_cq_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_resize_cq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqe) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_resize_cq_resp),
            "::",
            stringify!(cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_resize_cq_resp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_resize_cq_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_poll_cq {
    pub response: __u64,
    pub cq_handle: __u32,
    pub ne: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_poll_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_poll_cq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_poll_cq>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_poll_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_poll_cq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_poll_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_poll_cq),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_poll_cq),
            "::",
            stringify!(cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_poll_cq),
            "::",
            stringify!(ne)
        )
    );
}
pub const IB_UVERBS_WC_SEND: ib_uverbs_wc_opcode = 0;
pub const IB_UVERBS_WC_RDMA_WRITE: ib_uverbs_wc_opcode = 1;
pub const IB_UVERBS_WC_RDMA_READ: ib_uverbs_wc_opcode = 2;
pub const IB_UVERBS_WC_COMP_SWAP: ib_uverbs_wc_opcode = 3;
pub const IB_UVERBS_WC_FETCH_ADD: ib_uverbs_wc_opcode = 4;
pub const IB_UVERBS_WC_BIND_MW: ib_uverbs_wc_opcode = 5;
pub const IB_UVERBS_WC_LOCAL_INV: ib_uverbs_wc_opcode = 6;
pub const IB_UVERBS_WC_TSO: ib_uverbs_wc_opcode = 7;
pub type ib_uverbs_wc_opcode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_uverbs_wc {
    pub wr_id: __u64,
    pub status: __u32,
    pub opcode: __u32,
    pub vendor_err: __u32,
    pub byte_len: __u32,
    pub ex: ib_uverbs_wc__bindgen_ty_1,
    pub qp_num: __u32,
    pub src_qp: __u32,
    pub wc_flags: __u32,
    pub pkey_index: __u16,
    pub slid: __u16,
    pub sl: __u8,
    pub dlid_path_bits: __u8,
    pub port_num: __u8,
    pub reserved: __u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_wc__bindgen_ty_1 {
    pub imm_data: __be32,
    pub invalidate_rkey: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_wc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_wc__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_wc__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_wc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_wc__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_wc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imm_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc__bindgen_ty_1),
            "::",
            stringify!(imm_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalidate_rkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc__bindgen_ty_1),
            "::",
            stringify!(invalidate_rkey)
        )
    );
}
impl Default for ib_uverbs_wc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_wc() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_wc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_wc>(),
        48usize,
        concat!("Size of: ", stringify!(ib_uverbs_wc))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_wc>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_wc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_err) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(vendor_err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_len) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(byte_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ex) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_num) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_qp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(src_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(wc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_index) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slid) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(slid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlid_path_bits) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(dlid_path_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_wc),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for ib_uverbs_wc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_poll_cq_resp {
    pub count: __u32,
    pub reserved: __u32,
    pub wc: __IncompleteArrayField<ib_uverbs_wc>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_poll_cq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_poll_cq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_poll_cq_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_poll_cq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_poll_cq_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_poll_cq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_poll_cq_resp),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_poll_cq_resp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_poll_cq_resp),
            "::",
            stringify!(wc)
        )
    );
}
impl Default for ib_uverbs_poll_cq_resp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_req_notify_cq {
    pub cq_handle: __u32,
    pub solicited_only: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_req_notify_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_req_notify_cq> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_req_notify_cq>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_req_notify_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_req_notify_cq>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_req_notify_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_req_notify_cq),
            "::",
            stringify!(cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).solicited_only) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_req_notify_cq),
            "::",
            stringify!(solicited_only)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_cq {
    pub response: __u64,
    pub cq_handle: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_destroy_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_destroy_cq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_destroy_cq>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_destroy_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_destroy_cq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_destroy_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_cq),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_cq),
            "::",
            stringify!(cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_cq),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_cq_resp {
    pub comp_events_reported: __u32,
    pub async_events_reported: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_destroy_cq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_destroy_cq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_destroy_cq_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_destroy_cq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_destroy_cq_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_destroy_cq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_events_reported) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_cq_resp),
            "::",
            stringify!(comp_events_reported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_events_reported) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_cq_resp),
            "::",
            stringify!(async_events_reported)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_global_route {
    pub dgid: [__u8; 16usize],
    pub flow_label: __u32,
    pub sgid_index: __u8,
    pub hop_limit: __u8,
    pub traffic_class: __u8,
    pub reserved: __u8,
}
#[test]
fn bindgen_test_layout_ib_uverbs_global_route() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_global_route> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_global_route>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_global_route))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_global_route>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_global_route))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_global_route),
            "::",
            stringify!(dgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_global_route),
            "::",
            stringify!(flow_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgid_index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_global_route),
            "::",
            stringify!(sgid_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_global_route),
            "::",
            stringify!(hop_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_global_route),
            "::",
            stringify!(traffic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_global_route),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ah_attr {
    pub grh: ib_uverbs_global_route,
    pub dlid: __u16,
    pub sl: __u8,
    pub src_path_bits: __u8,
    pub static_rate: __u8,
    pub is_global: __u8,
    pub port_num: __u8,
    pub reserved: __u8,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ah_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ah_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ah_attr>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_ah_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ah_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ah_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ah_attr),
            "::",
            stringify!(grh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ah_attr),
            "::",
            stringify!(dlid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ah_attr),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_path_bits) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ah_attr),
            "::",
            stringify!(src_path_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_rate) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ah_attr),
            "::",
            stringify!(static_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_global) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ah_attr),
            "::",
            stringify!(is_global)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ah_attr),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ah_attr),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_qp_attr {
    pub qp_attr_mask: __u32,
    pub qp_state: __u32,
    pub cur_qp_state: __u32,
    pub path_mtu: __u32,
    pub path_mig_state: __u32,
    pub qkey: __u32,
    pub rq_psn: __u32,
    pub sq_psn: __u32,
    pub dest_qp_num: __u32,
    pub qp_access_flags: __u32,
    pub ah_attr: ib_uverbs_ah_attr,
    pub alt_ah_attr: ib_uverbs_ah_attr,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub pkey_index: __u16,
    pub alt_pkey_index: __u16,
    pub en_sqd_async_notify: __u8,
    pub sq_draining: __u8,
    pub max_rd_atomic: __u8,
    pub max_dest_rd_atomic: __u8,
    pub min_rnr_timer: __u8,
    pub port_num: __u8,
    pub timeout: __u8,
    pub retry_cnt: __u8,
    pub rnr_retry: __u8,
    pub alt_port_num: __u8,
    pub alt_timeout: __u8,
    pub reserved: [__u8; 5usize],
}
#[test]
fn bindgen_test_layout_ib_uverbs_qp_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_qp_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_qp_attr>(),
        144usize,
        concat!("Size of: ", stringify!(ib_uverbs_qp_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_qp_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_qp_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_attr_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(qp_attr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(qp_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_qp_state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(cur_qp_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_mtu) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(path_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_mig_state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(path_mig_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(qkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_psn) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(rq_psn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_psn) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(sq_psn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest_qp_num) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(dest_qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_access_flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(qp_access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ah_attr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(ah_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_ah_attr) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(alt_ah_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_wr) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(max_send_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_wr) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(max_recv_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_sge) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(max_send_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_sge) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(max_recv_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_inline_data) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(max_inline_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_index) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_pkey_index) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(alt_pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).en_sqd_async_notify) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(en_sqd_async_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_draining) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(sq_draining)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rd_atomic) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(max_rd_atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dest_rd_atomic) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(max_dest_rd_atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_rnr_timer) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(min_rnr_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry_cnt) as usize - ptr as usize },
        135usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(retry_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnr_retry) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(rnr_retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_port_num) as usize - ptr as usize },
        137usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(alt_port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_timeout) as usize - ptr as usize },
        138usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(alt_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        139usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_attr),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_qp {
    pub response: __u64,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub send_cq_handle: __u32,
    pub recv_cq_handle: __u32,
    pub srq_handle: __u32,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub sq_sig_all: __u8,
    pub qp_type: __u8,
    pub is_srq: __u8,
    pub reserved: __u8,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_qp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_qp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_qp>(),
        56usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_qp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_qp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_qp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_cq_handle) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(send_cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_cq_handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(recv_cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_handle) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(srq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_wr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(max_send_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_wr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(max_recv_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_sge) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(max_send_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_sge) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(max_recv_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_inline_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(max_inline_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_sig_all) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(sq_sig_all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_type) as usize - ptr as usize },
        53usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(qp_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_srq) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(is_srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp),
            "::",
            stringify!(driver_data)
        )
    );
}
pub const IB_UVERBS_CREATE_QP_MASK_IND_TABLE: ib_uverbs_create_qp_mask = 1;
pub type ib_uverbs_create_qp_mask = ::std::os::raw::c_uint;
pub const IB_UVERBS_CREATE_QP_SUP_COMP_MASK: _bindgen_ty_12 = 1;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_qp {
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub send_cq_handle: __u32,
    pub recv_cq_handle: __u32,
    pub srq_handle: __u32,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub sq_sig_all: __u8,
    pub qp_type: __u8,
    pub is_srq: __u8,
    pub reserved: __u8,
    pub comp_mask: __u32,
    pub create_flags: __u32,
    pub rwq_ind_tbl_handle: __u32,
    pub source_qpn: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_create_qp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_create_qp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_create_qp>(),
        64usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_create_qp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_create_qp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_create_qp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_cq_handle) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(send_cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_cq_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(recv_cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_handle) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(srq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_wr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(max_send_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_wr) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(max_recv_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_sge) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(max_send_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_sge) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(max_recv_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_inline_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(max_inline_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_sig_all) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(sq_sig_all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_type) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(qp_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_srq) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(is_srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_flags) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(create_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rwq_ind_tbl_handle) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(rwq_ind_tbl_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_qpn) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp),
            "::",
            stringify!(source_qpn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_open_qp {
    pub response: __u64,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub qpn: __u32,
    pub qp_type: __u8,
    pub reserved: [__u8; 7usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_open_qp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_open_qp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_open_qp>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_open_qp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_open_qp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_open_qp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_qp),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_qp),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_qp),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpn) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_qp),
            "::",
            stringify!(qpn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_qp),
            "::",
            stringify!(qp_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_qp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_open_qp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_qp_resp {
    pub qp_handle: __u32,
    pub qpn: __u32,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub reserved: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_qp_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_qp_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_qp_resp>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_qp_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_qp_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_qp_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(qpn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_wr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(max_send_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_wr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(max_recv_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_sge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(max_send_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_sge) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(max_recv_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_inline_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(max_inline_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_qp_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_ex_create_qp_resp {
    pub base: ib_uverbs_create_qp_resp,
    pub comp_mask: __u32,
    pub response_length: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_create_qp_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_create_qp_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_create_qp_resp>(),
        40usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_create_qp_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_create_qp_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_create_qp_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp_resp),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp_resp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_length) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_qp_resp),
            "::",
            stringify!(response_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_qp_dest {
    pub dgid: [__u8; 16usize],
    pub flow_label: __u32,
    pub dlid: __u16,
    pub reserved: __u16,
    pub sgid_index: __u8,
    pub hop_limit: __u8,
    pub traffic_class: __u8,
    pub sl: __u8,
    pub src_path_bits: __u8,
    pub static_rate: __u8,
    pub is_global: __u8,
    pub port_num: __u8,
}
#[test]
fn bindgen_test_layout_ib_uverbs_qp_dest() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_qp_dest> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_qp_dest>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_qp_dest))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_qp_dest>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_qp_dest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(dgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(flow_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(dlid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgid_index) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(sgid_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(hop_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(traffic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_path_bits) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(src_path_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_rate) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(static_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_global) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(is_global)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        31usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_dest),
            "::",
            stringify!(port_num)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_qp {
    pub response: __u64,
    pub qp_handle: __u32,
    pub attr_mask: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_qp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_qp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_qp>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_qp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_qp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_qp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_mask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp),
            "::",
            stringify!(attr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_qp_resp {
    pub dest: ib_uverbs_qp_dest,
    pub alt_dest: ib_uverbs_qp_dest,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub qkey: __u32,
    pub rq_psn: __u32,
    pub sq_psn: __u32,
    pub dest_qp_num: __u32,
    pub qp_access_flags: __u32,
    pub pkey_index: __u16,
    pub alt_pkey_index: __u16,
    pub qp_state: __u8,
    pub cur_qp_state: __u8,
    pub path_mtu: __u8,
    pub path_mig_state: __u8,
    pub sq_draining: __u8,
    pub max_rd_atomic: __u8,
    pub max_dest_rd_atomic: __u8,
    pub min_rnr_timer: __u8,
    pub port_num: __u8,
    pub timeout: __u8,
    pub retry_cnt: __u8,
    pub rnr_retry: __u8,
    pub alt_port_num: __u8,
    pub alt_timeout: __u8,
    pub sq_sig_all: __u8,
    pub reserved: [__u8; 5usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_qp_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_qp_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_qp_resp>(),
        128usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_qp_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_qp_resp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_qp_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_dest) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(alt_dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_wr) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(max_send_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_wr) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(max_recv_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_sge) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(max_send_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_sge) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(max_recv_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_inline_data) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(max_inline_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(qkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_psn) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(rq_psn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_psn) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(sq_psn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest_qp_num) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(dest_qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_access_flags) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(qp_access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_index) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_pkey_index) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(alt_pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_state) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(qp_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_qp_state) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(cur_qp_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_mtu) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(path_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_mig_state) as usize - ptr as usize },
        111usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(path_mig_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_draining) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(sq_draining)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rd_atomic) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(max_rd_atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dest_rd_atomic) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(max_dest_rd_atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_rnr_timer) as usize - ptr as usize },
        115usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(min_rnr_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry_cnt) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(retry_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnr_retry) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(rnr_retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_port_num) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(alt_port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_timeout) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(alt_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_sig_all) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(sq_sig_all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        123usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_qp_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_modify_qp {
    pub dest: ib_uverbs_qp_dest,
    pub alt_dest: ib_uverbs_qp_dest,
    pub qp_handle: __u32,
    pub attr_mask: __u32,
    pub qkey: __u32,
    pub rq_psn: __u32,
    pub sq_psn: __u32,
    pub dest_qp_num: __u32,
    pub qp_access_flags: __u32,
    pub pkey_index: __u16,
    pub alt_pkey_index: __u16,
    pub qp_state: __u8,
    pub cur_qp_state: __u8,
    pub path_mtu: __u8,
    pub path_mig_state: __u8,
    pub en_sqd_async_notify: __u8,
    pub max_rd_atomic: __u8,
    pub max_dest_rd_atomic: __u8,
    pub min_rnr_timer: __u8,
    pub port_num: __u8,
    pub timeout: __u8,
    pub retry_cnt: __u8,
    pub rnr_retry: __u8,
    pub alt_port_num: __u8,
    pub alt_timeout: __u8,
    pub reserved: [__u8; 2usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_modify_qp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_modify_qp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_modify_qp>(),
        112usize,
        concat!("Size of: ", stringify!(ib_uverbs_modify_qp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_modify_qp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_modify_qp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_dest) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(alt_dest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_mask) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(attr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(qkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_psn) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(rq_psn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_psn) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(sq_psn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest_qp_num) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(dest_qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_access_flags) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(qp_access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_index) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_pkey_index) as usize - ptr as usize },
        94usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(alt_pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_state) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(qp_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_qp_state) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(cur_qp_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_mtu) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(path_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_mig_state) as usize - ptr as usize },
        99usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(path_mig_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).en_sqd_async_notify) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(en_sqd_async_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rd_atomic) as usize - ptr as usize },
        101usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(max_rd_atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dest_rd_atomic) as usize - ptr as usize },
        102usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(max_dest_rd_atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_rnr_timer) as usize - ptr as usize },
        103usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(min_rnr_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        105usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry_cnt) as usize - ptr as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(retry_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnr_retry) as usize - ptr as usize },
        107usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(rnr_retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_port_num) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(alt_port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_timeout) as usize - ptr as usize },
        109usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(alt_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        110usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_qp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_ex_modify_qp {
    pub base: ib_uverbs_modify_qp,
    pub rate_limit: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_modify_qp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_modify_qp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_modify_qp>(),
        120usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_modify_qp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_modify_qp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_modify_qp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_qp),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_limit) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_qp),
            "::",
            stringify!(rate_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_qp),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_modify_qp_resp {
    pub comp_mask: __u32,
    pub response_length: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_modify_qp_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_modify_qp_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_modify_qp_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_modify_qp_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_modify_qp_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_modify_qp_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_qp_resp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_qp_resp),
            "::",
            stringify!(response_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_qp {
    pub response: __u64,
    pub qp_handle: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_destroy_qp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_destroy_qp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_destroy_qp>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_destroy_qp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_destroy_qp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_destroy_qp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_qp),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_qp),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_qp),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_qp_resp {
    pub events_reported: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_destroy_qp_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_destroy_qp_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_destroy_qp_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_destroy_qp_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_destroy_qp_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_destroy_qp_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events_reported) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_qp_resp),
            "::",
            stringify!(events_reported)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_sge {
    pub addr: __u64,
    pub length: __u32,
    pub lkey: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_sge() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_sge> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_sge>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_sge))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_sge>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_sge))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_sge),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_sge),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lkey) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_sge),
            "::",
            stringify!(lkey)
        )
    );
}
pub const IB_UVERBS_WR_RDMA_WRITE: ib_uverbs_wr_opcode = 0;
pub const IB_UVERBS_WR_RDMA_WRITE_WITH_IMM: ib_uverbs_wr_opcode = 1;
pub const IB_UVERBS_WR_SEND: ib_uverbs_wr_opcode = 2;
pub const IB_UVERBS_WR_SEND_WITH_IMM: ib_uverbs_wr_opcode = 3;
pub const IB_UVERBS_WR_RDMA_READ: ib_uverbs_wr_opcode = 4;
pub const IB_UVERBS_WR_ATOMIC_CMP_AND_SWP: ib_uverbs_wr_opcode = 5;
pub const IB_UVERBS_WR_ATOMIC_FETCH_AND_ADD: ib_uverbs_wr_opcode = 6;
pub const IB_UVERBS_WR_LOCAL_INV: ib_uverbs_wr_opcode = 7;
pub const IB_UVERBS_WR_BIND_MW: ib_uverbs_wr_opcode = 8;
pub const IB_UVERBS_WR_SEND_WITH_INV: ib_uverbs_wr_opcode = 9;
pub const IB_UVERBS_WR_TSO: ib_uverbs_wr_opcode = 10;
pub const IB_UVERBS_WR_RDMA_READ_WITH_INV: ib_uverbs_wr_opcode = 11;
pub const IB_UVERBS_WR_MASKED_ATOMIC_CMP_AND_SWP: ib_uverbs_wr_opcode = 12;
pub const IB_UVERBS_WR_MASKED_ATOMIC_FETCH_AND_ADD: ib_uverbs_wr_opcode = 13;
pub type ib_uverbs_wr_opcode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_uverbs_send_wr {
    pub wr_id: __u64,
    pub num_sge: __u32,
    pub opcode: __u32,
    pub send_flags: __u32,
    pub ex: ib_uverbs_send_wr__bindgen_ty_1,
    pub wr: ib_uverbs_send_wr__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_send_wr__bindgen_ty_1 {
    pub imm_data: __be32,
    pub invalidate_rkey: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_send_wr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_send_wr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_send_wr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_send_wr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imm_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_1),
            "::",
            stringify!(imm_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalidate_rkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_1),
            "::",
            stringify!(invalidate_rkey)
        )
    );
}
impl Default for ib_uverbs_send_wr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_send_wr__bindgen_ty_2 {
    pub rdma: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1,
    pub atomic: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2,
    pub ud: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1 {
    pub remote_addr: __u64,
    pub rkey: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2 {
    pub remote_addr: __u64,
    pub compare_add: __u64,
    pub swap: __u64,
    pub rkey: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare_add) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(compare_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3 {
    pub ah: __u32,
    pub remote_qpn: __u32,
    pub remote_qkey: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ah) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_qpn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(remote_qpn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_qkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(remote_qkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_send_wr__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_send_wr__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_send_wr__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_send_wr__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdma) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2),
            "::",
            stringify!(rdma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atomic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2),
            "::",
            stringify!(atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ud) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr__bindgen_ty_2),
            "::",
            stringify!(ud)
        )
    );
}
impl Default for ib_uverbs_send_wr__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_send_wr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_send_wr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_send_wr>(),
        56usize,
        concat!("Size of: ", stringify!(ib_uverbs_send_wr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_send_wr>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_send_wr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sge) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr),
            "::",
            stringify!(num_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr),
            "::",
            stringify!(send_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ex) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr),
            "::",
            stringify!(ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_send_wr),
            "::",
            stringify!(wr)
        )
    );
}
impl Default for ib_uverbs_send_wr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_post_send {
    pub response: __u64,
    pub qp_handle: __u32,
    pub wr_count: __u32,
    pub sge_count: __u32,
    pub wqe_size: __u32,
    pub send_wr: __IncompleteArrayField<ib_uverbs_send_wr>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_post_send() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_post_send> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_post_send>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_post_send))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_post_send>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_post_send))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_send),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_send),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_send),
            "::",
            stringify!(wr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sge_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_send),
            "::",
            stringify!(sge_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wqe_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_send),
            "::",
            stringify!(wqe_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_wr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_send),
            "::",
            stringify!(send_wr)
        )
    );
}
impl Default for ib_uverbs_post_send {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_post_send_resp {
    pub bad_wr: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_post_send_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_post_send_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_post_send_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_post_send_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_post_send_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_post_send_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bad_wr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_send_resp),
            "::",
            stringify!(bad_wr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_recv_wr {
    pub wr_id: __u64,
    pub num_sge: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_recv_wr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_recv_wr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_recv_wr>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_recv_wr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_recv_wr>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_recv_wr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_recv_wr),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sge) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_recv_wr),
            "::",
            stringify!(num_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_recv_wr),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_post_recv {
    pub response: __u64,
    pub qp_handle: __u32,
    pub wr_count: __u32,
    pub sge_count: __u32,
    pub wqe_size: __u32,
    pub recv_wr: __IncompleteArrayField<ib_uverbs_recv_wr>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_post_recv() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_post_recv> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_post_recv>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_post_recv))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_post_recv>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_post_recv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_recv),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_recv),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_recv),
            "::",
            stringify!(wr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sge_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_recv),
            "::",
            stringify!(sge_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wqe_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_recv),
            "::",
            stringify!(wqe_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_wr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_recv),
            "::",
            stringify!(recv_wr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_post_recv_resp {
    pub bad_wr: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_post_recv_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_post_recv_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_post_recv_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_post_recv_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_post_recv_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_post_recv_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bad_wr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_recv_resp),
            "::",
            stringify!(bad_wr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_post_srq_recv {
    pub response: __u64,
    pub srq_handle: __u32,
    pub wr_count: __u32,
    pub sge_count: __u32,
    pub wqe_size: __u32,
    pub recv: __IncompleteArrayField<ib_uverbs_recv_wr>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_post_srq_recv() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_post_srq_recv> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_post_srq_recv>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_post_srq_recv))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_post_srq_recv>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_post_srq_recv))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_srq_recv),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_srq_recv),
            "::",
            stringify!(srq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_count) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_srq_recv),
            "::",
            stringify!(wr_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sge_count) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_srq_recv),
            "::",
            stringify!(sge_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wqe_size) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_srq_recv),
            "::",
            stringify!(wqe_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_srq_recv),
            "::",
            stringify!(recv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_post_srq_recv_resp {
    pub bad_wr: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_post_srq_recv_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_post_srq_recv_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_post_srq_recv_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_post_srq_recv_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_post_srq_recv_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_post_srq_recv_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bad_wr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_post_srq_recv_resp),
            "::",
            stringify!(bad_wr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_ah {
    pub response: __u64,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub reserved: __u32,
    pub attr: ib_uverbs_ah_attr,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_ah() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_ah> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_ah>(),
        56usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_ah))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_ah>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_ah))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_ah),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_ah),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_ah),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_ah),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_ah),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_ah),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_ah_resp {
    pub ah_handle: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_ah_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_ah_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_ah_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_ah_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_ah_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_ah_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ah_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_ah_resp),
            "::",
            stringify!(ah_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_ah_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_ah {
    pub ah_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_destroy_ah() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_destroy_ah> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_destroy_ah>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_destroy_ah))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_destroy_ah>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_destroy_ah))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ah_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_ah),
            "::",
            stringify!(ah_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_attach_mcast {
    pub gid: [__u8; 16usize],
    pub qp_handle: __u32,
    pub mlid: __u16,
    pub reserved: __u16,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_attach_mcast() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_attach_mcast> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_attach_mcast>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_attach_mcast))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_attach_mcast>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_attach_mcast))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_attach_mcast),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_attach_mcast),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_attach_mcast),
            "::",
            stringify!(mlid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_attach_mcast),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_attach_mcast),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_detach_mcast {
    pub gid: [__u8; 16usize],
    pub qp_handle: __u32,
    pub mlid: __u16,
    pub reserved: __u16,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_detach_mcast() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_detach_mcast> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_detach_mcast>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_detach_mcast))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_detach_mcast>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_detach_mcast))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_detach_mcast),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_detach_mcast),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_detach_mcast),
            "::",
            stringify!(mlid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_detach_mcast),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_detach_mcast),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_flow_spec_hdr {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
    pub flow_spec_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_hdr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_hdr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_hdr>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_hdr>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_hdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_hdr),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_hdr),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_spec_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_hdr),
            "::",
            stringify!(flow_spec_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_eth_filter {
    pub dst_mac: [__u8; 6usize],
    pub src_mac: [__u8; 6usize],
    pub ether_type: __be16,
    pub vlan_tag: __be16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_eth_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_eth_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_eth_filter>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_eth_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_eth_filter>(),
        2usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_eth_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_mac) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_eth_filter),
            "::",
            stringify!(dst_mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_mac) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_eth_filter),
            "::",
            stringify!(src_mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ether_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_eth_filter),
            "::",
            stringify!(ether_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vlan_tag) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_eth_filter),
            "::",
            stringify!(vlan_tag)
        )
    );
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_eth {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_eth__bindgen_ty_1,
    pub val: ib_uverbs_flow_eth_filter,
    pub mask: ib_uverbs_flow_eth_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_eth__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_eth__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_eth__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_eth__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_eth__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_eth__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_eth__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_eth__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_eth__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_eth() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_eth> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_eth>(),
        40usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_eth))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_eth>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_eth))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_eth),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_eth),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ib_uverbs_flow_spec_eth {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_ipv4_filter {
    pub src_ip: __be32,
    pub dst_ip: __be32,
    pub proto: __u8,
    pub tos: __u8,
    pub ttl: __u8,
    pub flags: __u8,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_ipv4_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_ipv4_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_ipv4_filter>(),
        12usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_ipv4_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_ipv4_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_ipv4_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv4_filter),
            "::",
            stringify!(src_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_ip) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv4_filter),
            "::",
            stringify!(dst_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv4_filter),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tos) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv4_filter),
            "::",
            stringify!(tos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttl) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv4_filter),
            "::",
            stringify!(ttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv4_filter),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_ipv4 {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_ipv4__bindgen_ty_1,
    pub val: ib_uverbs_flow_ipv4_filter,
    pub mask: ib_uverbs_flow_ipv4_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_ipv4__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_ipv4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_ipv4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_ipv4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_ipv4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_ipv4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_ipv4() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_ipv4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_ipv4>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_ipv4))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_ipv4>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_ipv4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv4),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv4),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ib_uverbs_flow_spec_ipv4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_tcp_udp_filter {
    pub dst_port: __be16,
    pub src_port: __be16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_tcp_udp_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_tcp_udp_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_tcp_udp_filter>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_tcp_udp_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_tcp_udp_filter>(),
        2usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_tcp_udp_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_tcp_udp_filter),
            "::",
            stringify!(dst_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_tcp_udp_filter),
            "::",
            stringify!(src_port)
        )
    );
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_tcp_udp {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1,
    pub val: ib_uverbs_flow_tcp_udp_filter,
    pub mask: ib_uverbs_flow_tcp_udp_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_tcp_udp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_tcp_udp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_tcp_udp>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_tcp_udp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_tcp_udp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_tcp_udp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tcp_udp),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tcp_udp),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ib_uverbs_flow_spec_tcp_udp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_ipv6_filter {
    pub src_ip: [__u8; 16usize],
    pub dst_ip: [__u8; 16usize],
    pub flow_label: __be32,
    pub next_hdr: __u8,
    pub traffic_class: __u8,
    pub hop_limit: __u8,
    pub reserved: __u8,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_ipv6_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_ipv6_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_ipv6_filter>(),
        40usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_ipv6_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_ipv6_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_ipv6_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv6_filter),
            "::",
            stringify!(src_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv6_filter),
            "::",
            stringify!(dst_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv6_filter),
            "::",
            stringify!(flow_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_hdr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv6_filter),
            "::",
            stringify!(next_hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv6_filter),
            "::",
            stringify!(traffic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv6_filter),
            "::",
            stringify!(hop_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_ipv6_filter),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_ipv6 {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_ipv6__bindgen_ty_1,
    pub val: ib_uverbs_flow_ipv6_filter,
    pub mask: ib_uverbs_flow_ipv6_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_ipv6__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_ipv6__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_ipv6__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_ipv6__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_ipv6__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_ipv6__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_ipv6() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_ipv6> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_ipv6>(),
        88usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_ipv6))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_ipv6>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_ipv6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv6),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_ipv6),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ib_uverbs_flow_spec_ipv6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_tag {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_action_tag__bindgen_ty_1,
    pub tag_id: __u32,
    pub reserved1: __u32,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_tag__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_tag__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_action_tag__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_tag__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_tag__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_action_tag__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_tag() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_action_tag> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_tag>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_action_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_action_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_tag),
            "::",
            stringify!(tag_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_tag),
            "::",
            stringify!(reserved1)
        )
    );
}
impl Default for ib_uverbs_flow_spec_action_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_drop {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_action_drop__bindgen_ty_1,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_drop__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_drop__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_action_drop__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_drop__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_drop__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_action_drop__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_drop() {
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_drop>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_action_drop))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_drop>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_action_drop))
    );
}
impl Default for ib_uverbs_flow_spec_action_drop {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_handle {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_action_handle__bindgen_ty_1,
    pub handle: __u32,
    pub reserved1: __u32,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_handle__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_handle__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_action_handle__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_handle__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_handle__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_action_handle__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_handle() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_action_handle> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_handle>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_action_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_handle>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_handle),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_handle),
            "::",
            stringify!(reserved1)
        )
    );
}
impl Default for ib_uverbs_flow_spec_action_handle {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_count {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_action_count__bindgen_ty_1,
    pub handle: __u32,
    pub reserved1: __u32,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_count__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<
        ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1,
    > = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_count__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_action_count__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_count__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_action_count__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_count__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_count__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_count__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_action_count__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_action_count() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_action_count> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_action_count>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_action_count))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_action_count>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_action_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_count),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_action_count),
            "::",
            stringify!(reserved1)
        )
    );
}
impl Default for ib_uverbs_flow_spec_action_count {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_tunnel_filter {
    pub tunnel_id: __be32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_tunnel_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_tunnel_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_tunnel_filter>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_tunnel_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_tunnel_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_tunnel_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tunnel_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_tunnel_filter),
            "::",
            stringify!(tunnel_id)
        )
    );
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_tunnel {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_tunnel__bindgen_ty_1,
    pub val: ib_uverbs_flow_tunnel_filter,
    pub mask: ib_uverbs_flow_tunnel_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_tunnel__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_tunnel__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_tunnel__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_tunnel__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_tunnel__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_tunnel__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_tunnel() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_tunnel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_tunnel>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_tunnel))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_tunnel>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_tunnel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tunnel),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_tunnel),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ib_uverbs_flow_spec_tunnel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_esp_filter {
    pub spi: __u32,
    pub seq: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_esp_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_esp_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_esp_filter>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_esp_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_esp_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_esp_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_esp_filter),
            "::",
            stringify!(spi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_esp_filter),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_esp {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_esp__bindgen_ty_1,
    pub val: ib_uverbs_flow_spec_esp_filter,
    pub mask: ib_uverbs_flow_spec_esp_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_esp__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_esp__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_esp__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_esp__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_esp__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_esp__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_esp__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_esp__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_esp__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_esp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_esp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_esp>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_esp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_esp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_esp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_esp),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_esp),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ib_uverbs_flow_spec_esp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_gre_filter {
    pub c_ks_res0_ver: __be16,
    pub protocol: __be16,
    pub key: __be32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_gre_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_gre_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_gre_filter>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_gre_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_gre_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_gre_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ks_res0_ver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_gre_filter),
            "::",
            stringify!(c_ks_res0_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_gre_filter),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_gre_filter),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_gre {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_gre__bindgen_ty_1,
    pub val: ib_uverbs_flow_gre_filter,
    pub mask: ib_uverbs_flow_gre_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_gre__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_gre__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_gre__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_gre__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_gre__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_gre__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_gre__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_gre__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_gre__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_gre() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_gre> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_gre>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_gre))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_gre>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_gre))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_gre),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_gre),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ib_uverbs_flow_spec_gre {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_mpls_filter {
    pub label: __be32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_mpls_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_mpls_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_mpls_filter>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_mpls_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_mpls_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_mpls_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_mpls_filter),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_mpls {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_mpls__bindgen_ty_1,
    pub val: ib_uverbs_flow_mpls_filter,
    pub mask: ib_uverbs_flow_mpls_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_mpls__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(reserved)
        )
    );
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_mpls__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_mpls__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_mpls__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_spec_mpls__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_mpls__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_spec_mpls__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_mpls__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
}
impl Default for ib_uverbs_flow_spec_mpls__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_spec_mpls() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_spec_mpls> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_spec_mpls>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_spec_mpls))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_spec_mpls>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_spec_mpls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_mpls),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_spec_mpls),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ib_uverbs_flow_spec_mpls {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_flow_attr {
    pub type_: __u32,
    pub size: __u16,
    pub priority: __u16,
    pub num_of_specs: __u8,
    pub reserved: [__u8; 2usize],
    pub port: __u8,
    pub flags: __u32,
    pub flow_specs: __IncompleteArrayField<ib_uverbs_flow_spec_hdr>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_attr>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_attr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_attr),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_attr),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_of_specs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_attr),
            "::",
            stringify!(num_of_specs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_attr),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_attr),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_attr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_specs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_attr),
            "::",
            stringify!(flow_specs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_flow {
    pub comp_mask: __u32,
    pub qp_handle: __u32,
    pub flow_attr: ib_uverbs_flow_attr,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_flow() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_flow> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_flow>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_flow))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_flow>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_flow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_flow),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_handle) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_flow),
            "::",
            stringify!(qp_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_flow),
            "::",
            stringify!(flow_attr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_create_flow_resp {
    pub comp_mask: __u32,
    pub flow_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_flow_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_flow_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_flow_resp>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_flow_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_flow_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_flow_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_flow_resp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_handle) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_flow_resp),
            "::",
            stringify!(flow_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_flow {
    pub comp_mask: __u32,
    pub flow_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_destroy_flow() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_destroy_flow> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_destroy_flow>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_destroy_flow))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_destroy_flow>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_destroy_flow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_flow),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_handle) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_flow),
            "::",
            stringify!(flow_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_srq {
    pub response: __u64,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub srq_limit: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_srq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_srq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_srq>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_srq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_srq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_srq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_limit) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq),
            "::",
            stringify!(srq_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_xsrq {
    pub response: __u64,
    pub user_handle: __u64,
    pub srq_type: __u32,
    pub pd_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub srq_limit: __u32,
    pub max_num_tags: __u32,
    pub xrcd_handle: __u32,
    pub cq_handle: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_xsrq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_xsrq> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_xsrq>(),
        48usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_xsrq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_xsrq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_xsrq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(srq_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_limit) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(srq_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num_tags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(max_num_tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrcd_handle) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(xrcd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_xsrq),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_srq_resp {
    pub srq_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub srqn: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_create_srq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_create_srq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_create_srq_resp>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_create_srq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_create_srq_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_create_srq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq_resp),
            "::",
            stringify!(srq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq_resp),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq_resp),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srqn) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq_resp),
            "::",
            stringify!(srqn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_create_srq_resp),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_modify_srq {
    pub srq_handle: __u32,
    pub attr_mask: __u32,
    pub max_wr: __u32,
    pub srq_limit: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_modify_srq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_modify_srq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_modify_srq>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_modify_srq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_modify_srq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_modify_srq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_srq),
            "::",
            stringify!(srq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_srq),
            "::",
            stringify!(attr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_srq),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_limit) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_srq),
            "::",
            stringify!(srq_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_modify_srq),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_srq {
    pub response: __u64,
    pub srq_handle: __u32,
    pub reserved: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_srq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_srq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_srq>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_srq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_srq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_srq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_srq),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_srq),
            "::",
            stringify!(srq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_srq),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driver_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_srq),
            "::",
            stringify!(driver_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_query_srq_resp {
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub srq_limit: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_srq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_srq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_srq_resp>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_srq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_srq_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_srq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_srq_resp),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_srq_resp),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_srq_resp),
            "::",
            stringify!(srq_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_srq_resp),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_srq {
    pub response: __u64,
    pub srq_handle: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_destroy_srq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_destroy_srq> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_destroy_srq>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_destroy_srq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_destroy_srq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_destroy_srq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_srq),
            "::",
            stringify!(response)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_srq),
            "::",
            stringify!(srq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_srq),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_srq_resp {
    pub events_reported: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_destroy_srq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_destroy_srq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_destroy_srq_resp>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_destroy_srq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_destroy_srq_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_destroy_srq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events_reported) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_destroy_srq_resp),
            "::",
            stringify!(events_reported)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_wq {
    pub comp_mask: __u32,
    pub wq_type: __u32,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub cq_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub create_flags: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_create_wq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_create_wq> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_create_wq>(),
        40usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_create_wq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_create_wq>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_create_wq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_type) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(wq_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(user_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(pd_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(create_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_wq_resp {
    pub comp_mask: __u32,
    pub response_length: __u32,
    pub wq_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub wqn: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_create_wq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_create_wq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_create_wq_resp>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_create_wq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_create_wq_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_create_wq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq_resp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq_resp),
            "::",
            stringify!(response_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq_resp),
            "::",
            stringify!(wq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq_resp),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq_resp),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wqn) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_wq_resp),
            "::",
            stringify!(wqn)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_destroy_wq {
    pub comp_mask: __u32,
    pub wq_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_destroy_wq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_destroy_wq> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_destroy_wq>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_destroy_wq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_destroy_wq>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_destroy_wq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_destroy_wq),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_handle) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_destroy_wq),
            "::",
            stringify!(wq_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_destroy_wq_resp {
    pub comp_mask: __u32,
    pub response_length: __u32,
    pub events_reported: __u32,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_destroy_wq_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_destroy_wq_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_destroy_wq_resp>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_destroy_wq_resp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_destroy_wq_resp>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_destroy_wq_resp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_destroy_wq_resp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_destroy_wq_resp),
            "::",
            stringify!(response_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events_reported) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_destroy_wq_resp),
            "::",
            stringify!(events_reported)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_destroy_wq_resp),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_modify_wq {
    pub attr_mask: __u32,
    pub wq_handle: __u32,
    pub wq_state: __u32,
    pub curr_wq_state: __u32,
    pub flags: __u32,
    pub flags_mask: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_modify_wq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_modify_wq> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_modify_wq>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_modify_wq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_modify_wq>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_modify_wq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_wq),
            "::",
            stringify!(attr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_handle) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_wq),
            "::",
            stringify!(wq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_wq),
            "::",
            stringify!(wq_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curr_wq_state) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_wq),
            "::",
            stringify!(curr_wq_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_wq),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_mask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_wq),
            "::",
            stringify!(flags_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_ex_create_rwq_ind_table {
    pub comp_mask: __u32,
    pub log_ind_tbl_size: __u32,
    pub wq_handles: __IncompleteArrayField<__u32>,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_create_rwq_ind_table() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_create_rwq_ind_table> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_create_rwq_ind_table>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_create_rwq_ind_table))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_create_rwq_ind_table>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_ind_tbl_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table),
            "::",
            stringify!(log_ind_tbl_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_handles) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table),
            "::",
            stringify!(wq_handles)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_rwq_ind_table_resp {
    pub comp_mask: __u32,
    pub response_length: __u32,
    pub ind_tbl_handle: __u32,
    pub ind_tbl_num: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_create_rwq_ind_table_resp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_create_rwq_ind_table_resp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_create_rwq_ind_table_resp>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table_resp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_create_rwq_ind_table_resp>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table_resp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table_resp),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).response_length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table_resp),
            "::",
            stringify!(response_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind_tbl_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table_resp),
            "::",
            stringify!(ind_tbl_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind_tbl_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_create_rwq_ind_table_resp),
            "::",
            stringify!(ind_tbl_num)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_destroy_rwq_ind_table {
    pub comp_mask: __u32,
    pub ind_tbl_handle: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_destroy_rwq_ind_table() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_destroy_rwq_ind_table> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_destroy_rwq_ind_table>(),
        8usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_destroy_rwq_ind_table))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_destroy_rwq_ind_table>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_ex_destroy_rwq_ind_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_destroy_rwq_ind_table),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind_tbl_handle) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_destroy_rwq_ind_table),
            "::",
            stringify!(ind_tbl_handle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_cq_moderation {
    pub cq_count: __u16,
    pub cq_period: __u16,
}
#[test]
fn bindgen_test_layout_ib_uverbs_cq_moderation() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_cq_moderation> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_cq_moderation>(),
        4usize,
        concat!("Size of: ", stringify!(ib_uverbs_cq_moderation))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_cq_moderation>(),
        2usize,
        concat!("Alignment of ", stringify!(ib_uverbs_cq_moderation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_cq_moderation),
            "::",
            stringify!(cq_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_period) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_cq_moderation),
            "::",
            stringify!(cq_period)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_modify_cq {
    pub cq_handle: __u32,
    pub attr_mask: __u32,
    pub attr: ib_uverbs_cq_moderation,
    pub reserved: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_ex_modify_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_ex_modify_cq> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_ex_modify_cq>(),
        16usize,
        concat!("Size of: ", stringify!(ib_uverbs_ex_modify_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_ex_modify_cq>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_ex_modify_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_cq),
            "::",
            stringify!(cq_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_mask) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_cq),
            "::",
            stringify!(attr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_cq),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_ex_modify_cq),
            "::",
            stringify!(reserved)
        )
    );
}
pub const IB_UVERBS_CORE_SUPPORT_OPTIONAL_MR_ACCESS: ib_uverbs_core_support = 1;
pub type ib_uverbs_core_support = ::std::os::raw::c_uint;
pub const IB_UVERBS_ACCESS_LOCAL_WRITE: ib_uverbs_access_flags = 1;
pub const IB_UVERBS_ACCESS_REMOTE_WRITE: ib_uverbs_access_flags = 2;
pub const IB_UVERBS_ACCESS_REMOTE_READ: ib_uverbs_access_flags = 4;
pub const IB_UVERBS_ACCESS_REMOTE_ATOMIC: ib_uverbs_access_flags = 8;
pub const IB_UVERBS_ACCESS_MW_BIND: ib_uverbs_access_flags = 16;
pub const IB_UVERBS_ACCESS_ZERO_BASED: ib_uverbs_access_flags = 32;
pub const IB_UVERBS_ACCESS_ON_DEMAND: ib_uverbs_access_flags = 64;
pub const IB_UVERBS_ACCESS_HUGETLB: ib_uverbs_access_flags = 128;
pub const IB_UVERBS_ACCESS_FLUSH_GLOBAL: ib_uverbs_access_flags = 256;
pub const IB_UVERBS_ACCESS_FLUSH_PERSISTENT: ib_uverbs_access_flags = 512;
pub const IB_UVERBS_ACCESS_RELAXED_ORDERING: ib_uverbs_access_flags = 1048576;
pub const IB_UVERBS_ACCESS_OPTIONAL_RANGE: ib_uverbs_access_flags = 1072693248;
pub type ib_uverbs_access_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_SRQT_BASIC: ib_uverbs_srq_type = 0;
pub const IB_UVERBS_SRQT_XRC: ib_uverbs_srq_type = 1;
pub const IB_UVERBS_SRQT_TM: ib_uverbs_srq_type = 2;
pub type ib_uverbs_srq_type = ::std::os::raw::c_uint;
pub const IB_UVERBS_WQT_RQ: ib_uverbs_wq_type = 0;
pub type ib_uverbs_wq_type = ::std::os::raw::c_uint;
pub const IB_UVERBS_WQ_FLAGS_CVLAN_STRIPPING: ib_uverbs_wq_flags = 1;
pub const IB_UVERBS_WQ_FLAGS_SCATTER_FCS: ib_uverbs_wq_flags = 2;
pub const IB_UVERBS_WQ_FLAGS_DELAY_DROP: ib_uverbs_wq_flags = 4;
pub const IB_UVERBS_WQ_FLAGS_PCI_WRITE_END_PADDING: ib_uverbs_wq_flags = 8;
pub type ib_uverbs_wq_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_QPT_RC: ib_uverbs_qp_type = 2;
pub const IB_UVERBS_QPT_UC: ib_uverbs_qp_type = 3;
pub const IB_UVERBS_QPT_UD: ib_uverbs_qp_type = 4;
pub const IB_UVERBS_QPT_RAW_PACKET: ib_uverbs_qp_type = 8;
pub const IB_UVERBS_QPT_XRC_INI: ib_uverbs_qp_type = 9;
pub const IB_UVERBS_QPT_XRC_TGT: ib_uverbs_qp_type = 10;
pub const IB_UVERBS_QPT_DRIVER: ib_uverbs_qp_type = 255;
pub type ib_uverbs_qp_type = ::std::os::raw::c_uint;
pub const IB_UVERBS_QP_CREATE_BLOCK_MULTICAST_LOOPBACK: ib_uverbs_qp_create_flags = 2;
pub const IB_UVERBS_QP_CREATE_SCATTER_FCS: ib_uverbs_qp_create_flags = 256;
pub const IB_UVERBS_QP_CREATE_CVLAN_STRIPPING: ib_uverbs_qp_create_flags = 512;
pub const IB_UVERBS_QP_CREATE_PCI_WRITE_END_PADDING: ib_uverbs_qp_create_flags = 2048;
pub const IB_UVERBS_QP_CREATE_SQ_SIG_ALL: ib_uverbs_qp_create_flags = 4096;
pub type ib_uverbs_qp_create_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_PCF_SM: ib_uverbs_query_port_cap_flags = 2;
pub const IB_UVERBS_PCF_NOTICE_SUP: ib_uverbs_query_port_cap_flags = 4;
pub const IB_UVERBS_PCF_TRAP_SUP: ib_uverbs_query_port_cap_flags = 8;
pub const IB_UVERBS_PCF_OPT_IPD_SUP: ib_uverbs_query_port_cap_flags = 16;
pub const IB_UVERBS_PCF_AUTO_MIGR_SUP: ib_uverbs_query_port_cap_flags = 32;
pub const IB_UVERBS_PCF_SL_MAP_SUP: ib_uverbs_query_port_cap_flags = 64;
pub const IB_UVERBS_PCF_MKEY_NVRAM: ib_uverbs_query_port_cap_flags = 128;
pub const IB_UVERBS_PCF_PKEY_NVRAM: ib_uverbs_query_port_cap_flags = 256;
pub const IB_UVERBS_PCF_LED_INFO_SUP: ib_uverbs_query_port_cap_flags = 512;
pub const IB_UVERBS_PCF_SM_DISABLED: ib_uverbs_query_port_cap_flags = 1024;
pub const IB_UVERBS_PCF_SYS_IMAGE_GUID_SUP: ib_uverbs_query_port_cap_flags = 2048;
pub const IB_UVERBS_PCF_PKEY_SW_EXT_PORT_TRAP_SUP: ib_uverbs_query_port_cap_flags = 4096;
pub const IB_UVERBS_PCF_EXTENDED_SPEEDS_SUP: ib_uverbs_query_port_cap_flags = 16384;
pub const IB_UVERBS_PCF_CM_SUP: ib_uverbs_query_port_cap_flags = 65536;
pub const IB_UVERBS_PCF_SNMP_TUNNEL_SUP: ib_uverbs_query_port_cap_flags = 131072;
pub const IB_UVERBS_PCF_REINIT_SUP: ib_uverbs_query_port_cap_flags = 262144;
pub const IB_UVERBS_PCF_DEVICE_MGMT_SUP: ib_uverbs_query_port_cap_flags = 524288;
pub const IB_UVERBS_PCF_VENDOR_CLASS_SUP: ib_uverbs_query_port_cap_flags = 1048576;
pub const IB_UVERBS_PCF_DR_NOTICE_SUP: ib_uverbs_query_port_cap_flags = 2097152;
pub const IB_UVERBS_PCF_CAP_MASK_NOTICE_SUP: ib_uverbs_query_port_cap_flags = 4194304;
pub const IB_UVERBS_PCF_BOOT_MGMT_SUP: ib_uverbs_query_port_cap_flags = 8388608;
pub const IB_UVERBS_PCF_LINK_LATENCY_SUP: ib_uverbs_query_port_cap_flags = 16777216;
pub const IB_UVERBS_PCF_CLIENT_REG_SUP: ib_uverbs_query_port_cap_flags = 33554432;
pub const IB_UVERBS_PCF_LINK_SPEED_WIDTH_TABLE_SUP: ib_uverbs_query_port_cap_flags = 134217728;
pub const IB_UVERBS_PCF_VENDOR_SPECIFIC_MADS_TABLE_SUP: ib_uverbs_query_port_cap_flags = 268435456;
pub const IB_UVERBS_PCF_MCAST_PKEY_TRAP_SUPPRESSION_SUP: ib_uverbs_query_port_cap_flags = 536870912;
pub const IB_UVERBS_PCF_MCAST_FDB_TOP_SUP: ib_uverbs_query_port_cap_flags = 1073741824;
pub const IB_UVERBS_PCF_HIERARCHY_INFO_SUP: ib_uverbs_query_port_cap_flags = 2147483648;
pub const IB_UVERBS_PCF_IP_BASED_GIDS: ib_uverbs_query_port_cap_flags = 67108864;
pub type ib_uverbs_query_port_cap_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_QPF_GRH_REQUIRED: ib_uverbs_query_port_flags = 1;
pub type ib_uverbs_query_port_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_FLOW_ACTION_ESP_KEYMAT_AES_GCM: ib_uverbs_flow_action_esp_keymat = 0;
pub type ib_uverbs_flow_action_esp_keymat = ::std::os::raw::c_uint;
pub const IB_UVERBS_FLOW_ACTION_IV_ALGO_SEQ: ib_uverbs_flow_action_esp_keymat_aes_gcm_iv_algo = 0;
pub type ib_uverbs_flow_action_esp_keymat_aes_gcm_iv_algo = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_action_esp_keymat_aes_gcm {
    pub iv: __u64,
    pub iv_algo: __u32,
    pub salt: __u32,
    pub icv_len: __u32,
    pub key_len: __u32,
    pub aes_key: [__u32; 8usize],
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_action_esp_keymat_aes_gcm() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_action_esp_keymat_aes_gcm> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_action_esp_keymat_aes_gcm>(),
        56usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_action_esp_keymat_aes_gcm)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_action_esp_keymat_aes_gcm>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_action_esp_keymat_aes_gcm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iv) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_keymat_aes_gcm),
            "::",
            stringify!(iv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iv_algo) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_keymat_aes_gcm),
            "::",
            stringify!(iv_algo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).salt) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_keymat_aes_gcm),
            "::",
            stringify!(salt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).icv_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_keymat_aes_gcm),
            "::",
            stringify!(icv_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key_len) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_keymat_aes_gcm),
            "::",
            stringify!(key_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).aes_key) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_keymat_aes_gcm),
            "::",
            stringify!(aes_key)
        )
    );
}
pub const IB_UVERBS_FLOW_ACTION_ESP_REPLAY_NONE: ib_uverbs_flow_action_esp_replay = 0;
pub const IB_UVERBS_FLOW_ACTION_ESP_REPLAY_BMP: ib_uverbs_flow_action_esp_replay = 1;
pub type ib_uverbs_flow_action_esp_replay = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_action_esp_replay_bmp {
    pub size: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_action_esp_replay_bmp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_action_esp_replay_bmp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_action_esp_replay_bmp>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_action_esp_replay_bmp)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_action_esp_replay_bmp>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_action_esp_replay_bmp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_replay_bmp),
            "::",
            stringify!(size)
        )
    );
}
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_INLINE_CRYPTO: ib_uverbs_flow_action_esp_flags = 0;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_FULL_OFFLOAD: ib_uverbs_flow_action_esp_flags = 1;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_TUNNEL: ib_uverbs_flow_action_esp_flags = 0;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_TRANSPORT: ib_uverbs_flow_action_esp_flags = 2;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_DECRYPT: ib_uverbs_flow_action_esp_flags = 0;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_ENCRYPT: ib_uverbs_flow_action_esp_flags = 4;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_ESN_NEW_WINDOW: ib_uverbs_flow_action_esp_flags = 8;
pub type ib_uverbs_flow_action_esp_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_uverbs_flow_action_esp_encap {
    pub __bindgen_anon_1: ib_uverbs_flow_action_esp_encap__bindgen_ty_1,
    pub __bindgen_anon_2: ib_uverbs_flow_action_esp_encap__bindgen_ty_2,
    pub len: __u16,
    pub type_: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_flow_action_esp_encap__bindgen_ty_1 {
    pub val_ptr: *mut ::std::os::raw::c_void,
    pub val_ptr_data_u64: __u64,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_action_esp_encap__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_action_esp_encap__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_action_esp_encap__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_action_esp_encap__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_action_esp_encap__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_action_esp_encap__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_encap__bindgen_ty_1),
            "::",
            stringify!(val_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val_ptr_data_u64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_encap__bindgen_ty_1),
            "::",
            stringify!(val_ptr_data_u64)
        )
    );
}
impl Default for ib_uverbs_flow_action_esp_encap__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_flow_action_esp_encap__bindgen_ty_2 {
    pub next_ptr: *mut ib_uverbs_flow_action_esp_encap,
    pub next_ptr_data_u64: __u64,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_action_esp_encap__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_action_esp_encap__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_action_esp_encap__bindgen_ty_2>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ib_uverbs_flow_action_esp_encap__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_action_esp_encap__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ib_uverbs_flow_action_esp_encap__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_encap__bindgen_ty_2),
            "::",
            stringify!(next_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_ptr_data_u64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_encap__bindgen_ty_2),
            "::",
            stringify!(next_ptr_data_u64)
        )
    );
}
impl Default for ib_uverbs_flow_action_esp_encap__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_action_esp_encap() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_action_esp_encap> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_action_esp_encap>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_action_esp_encap))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_action_esp_encap>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_action_esp_encap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_encap),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp_encap),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for ib_uverbs_flow_action_esp_encap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_action_esp {
    pub spi: __u32,
    pub seq: __u32,
    pub tfc_pad: __u32,
    pub flags: __u32,
    pub hard_limit_pkts: __u64,
}
#[test]
fn bindgen_test_layout_ib_uverbs_flow_action_esp() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_flow_action_esp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_flow_action_esp>(),
        24usize,
        concat!("Size of: ", stringify!(ib_uverbs_flow_action_esp))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_flow_action_esp>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_flow_action_esp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp),
            "::",
            stringify!(spi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tfc_pad) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp),
            "::",
            stringify!(tfc_pad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hard_limit_pkts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_flow_action_esp),
            "::",
            stringify!(hard_limit_pkts)
        )
    );
}
pub const IB_UVERBS_READ_COUNTERS_PREFER_CACHED: ib_uverbs_read_counters_flags = 1;
pub type ib_uverbs_read_counters_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH: ib_uverbs_advise_mr_advice = 0;
pub const IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_WRITE: ib_uverbs_advise_mr_advice = 1;
pub const IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_NO_FAULT: ib_uverbs_advise_mr_advice = 2;
pub type ib_uverbs_advise_mr_advice = ::std::os::raw::c_uint;
pub const IB_UVERBS_ADVISE_MR_FLAG_FLUSH: ib_uverbs_advise_mr_flag = 1;
pub type ib_uverbs_advise_mr_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_query_port_resp_ex {
    pub legacy_resp: ib_uverbs_query_port_resp,
    pub port_cap_flags2: __u16,
    pub reserved: [__u8; 6usize],
}
#[test]
fn bindgen_test_layout_ib_uverbs_query_port_resp_ex() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_query_port_resp_ex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_query_port_resp_ex>(),
        48usize,
        concat!("Size of: ", stringify!(ib_uverbs_query_port_resp_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_query_port_resp_ex>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_query_port_resp_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).legacy_resp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp_ex),
            "::",
            stringify!(legacy_resp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_cap_flags2) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp_ex),
            "::",
            stringify!(port_cap_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_query_port_resp_ex),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_qp_cap {
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_qp_cap() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_qp_cap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_qp_cap>(),
        20usize,
        concat!("Size of: ", stringify!(ib_uverbs_qp_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_qp_cap>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_uverbs_qp_cap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_wr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_cap),
            "::",
            stringify!(max_send_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_wr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_cap),
            "::",
            stringify!(max_recv_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_sge) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_cap),
            "::",
            stringify!(max_send_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_sge) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_cap),
            "::",
            stringify!(max_recv_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_inline_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_qp_cap),
            "::",
            stringify!(max_inline_data)
        )
    );
}
pub const RDMA_DRIVER_UNKNOWN: rdma_driver_id = 0;
pub const RDMA_DRIVER_MLX5: rdma_driver_id = 1;
pub const RDMA_DRIVER_MLX4: rdma_driver_id = 2;
pub const RDMA_DRIVER_CXGB3: rdma_driver_id = 3;
pub const RDMA_DRIVER_CXGB4: rdma_driver_id = 4;
pub const RDMA_DRIVER_MTHCA: rdma_driver_id = 5;
pub const RDMA_DRIVER_BNXT_RE: rdma_driver_id = 6;
pub const RDMA_DRIVER_OCRDMA: rdma_driver_id = 7;
pub const RDMA_DRIVER_NES: rdma_driver_id = 8;
pub const RDMA_DRIVER_I40IW: rdma_driver_id = 9;
pub const RDMA_DRIVER_IRDMA: rdma_driver_id = 9;
pub const RDMA_DRIVER_VMW_PVRDMA: rdma_driver_id = 10;
pub const RDMA_DRIVER_QEDR: rdma_driver_id = 11;
pub const RDMA_DRIVER_HNS: rdma_driver_id = 12;
pub const RDMA_DRIVER_USNIC: rdma_driver_id = 13;
pub const RDMA_DRIVER_RXE: rdma_driver_id = 14;
pub const RDMA_DRIVER_HFI1: rdma_driver_id = 15;
pub const RDMA_DRIVER_QIB: rdma_driver_id = 16;
pub const RDMA_DRIVER_EFA: rdma_driver_id = 17;
pub const RDMA_DRIVER_SIW: rdma_driver_id = 18;
pub const RDMA_DRIVER_ERDMA: rdma_driver_id = 19;
pub const RDMA_DRIVER_MANA: rdma_driver_id = 20;
pub type rdma_driver_id = ::std::os::raw::c_uint;
pub const IB_UVERBS_GID_TYPE_IB: ib_uverbs_gid_type = 0;
pub const IB_UVERBS_GID_TYPE_ROCE_V1: ib_uverbs_gid_type = 1;
pub const IB_UVERBS_GID_TYPE_ROCE_V2: ib_uverbs_gid_type = 2;
pub type ib_uverbs_gid_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_gid_entry {
    pub gid: [__u64; 2usize],
    pub gid_index: __u32,
    pub port_num: __u32,
    pub gid_type: __u32,
    pub netdev_ifindex: __u32,
}
#[test]
fn bindgen_test_layout_ib_uverbs_gid_entry() {
    const UNINIT: ::std::mem::MaybeUninit<ib_uverbs_gid_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_uverbs_gid_entry>(),
        32usize,
        concat!("Size of: ", stringify!(ib_uverbs_gid_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_uverbs_gid_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_uverbs_gid_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_gid_entry),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_gid_entry),
            "::",
            stringify!(gid_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_gid_entry),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_gid_entry),
            "::",
            stringify!(gid_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).netdev_ifindex) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_uverbs_gid_entry),
            "::",
            stringify!(netdev_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_gid {
    pub raw: [u8; 16usize],
    pub global: ibv_gid__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_gid__bindgen_ty_1 {
    pub subnet_prefix: __be64,
    pub interface_id: __be64,
}
#[test]
fn bindgen_test_layout_ibv_gid__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_gid__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_gid__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_gid__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_gid__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_gid__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subnet_prefix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid__bindgen_ty_1),
            "::",
            stringify!(subnet_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid__bindgen_ty_1),
            "::",
            stringify!(interface_id)
        )
    );
}
#[test]
fn bindgen_test_layout_ibv_gid() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_gid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_gid>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_gid))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_gid>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_gid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid),
            "::",
            stringify!(global)
        )
    );
}
impl Default for ibv_gid {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_GID_TYPE_IB: ibv_gid_type = 0;
pub const IBV_GID_TYPE_ROCE_V1: ibv_gid_type = 1;
pub const IBV_GID_TYPE_ROCE_V2: ibv_gid_type = 2;
pub type ibv_gid_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_gid_entry {
    pub gid: ibv_gid,
    pub gid_index: u32,
    pub port_num: u32,
    pub gid_type: u32,
    pub ndev_ifindex: u32,
}
#[test]
fn bindgen_test_layout_ibv_gid_entry() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_gid_entry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_gid_entry>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_gid_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_gid_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_gid_entry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid_entry),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid_index) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid_entry),
            "::",
            stringify!(gid_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid_entry),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid_entry),
            "::",
            stringify!(gid_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ndev_ifindex) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_gid_entry),
            "::",
            stringify!(ndev_ifindex)
        )
    );
}
impl Default for ibv_gid_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_NODE_UNKNOWN: ibv_node_type = -1;
pub const IBV_NODE_CA: ibv_node_type = 1;
pub const IBV_NODE_SWITCH: ibv_node_type = 2;
pub const IBV_NODE_ROUTER: ibv_node_type = 3;
pub const IBV_NODE_RNIC: ibv_node_type = 4;
pub const IBV_NODE_USNIC: ibv_node_type = 5;
pub const IBV_NODE_USNIC_UDP: ibv_node_type = 6;
pub const IBV_NODE_UNSPECIFIED: ibv_node_type = 7;
pub type ibv_node_type = ::std::os::raw::c_int;
pub const IBV_TRANSPORT_UNKNOWN: ibv_transport_type = -1;
pub const IBV_TRANSPORT_IB: ibv_transport_type = 0;
pub const IBV_TRANSPORT_IWARP: ibv_transport_type = 1;
pub const IBV_TRANSPORT_USNIC: ibv_transport_type = 2;
pub const IBV_TRANSPORT_USNIC_UDP: ibv_transport_type = 3;
pub const IBV_TRANSPORT_UNSPECIFIED: ibv_transport_type = 4;
pub type ibv_transport_type = ::std::os::raw::c_int;
pub const IBV_DEVICE_RESIZE_MAX_WR: ibv_device_cap_flags = 1;
pub const IBV_DEVICE_BAD_PKEY_CNTR: ibv_device_cap_flags = 2;
pub const IBV_DEVICE_BAD_QKEY_CNTR: ibv_device_cap_flags = 4;
pub const IBV_DEVICE_RAW_MULTI: ibv_device_cap_flags = 8;
pub const IBV_DEVICE_AUTO_PATH_MIG: ibv_device_cap_flags = 16;
pub const IBV_DEVICE_CHANGE_PHY_PORT: ibv_device_cap_flags = 32;
pub const IBV_DEVICE_UD_AV_PORT_ENFORCE: ibv_device_cap_flags = 64;
pub const IBV_DEVICE_CURR_QP_STATE_MOD: ibv_device_cap_flags = 128;
pub const IBV_DEVICE_SHUTDOWN_PORT: ibv_device_cap_flags = 256;
pub const IBV_DEVICE_INIT_TYPE: ibv_device_cap_flags = 512;
pub const IBV_DEVICE_PORT_ACTIVE_EVENT: ibv_device_cap_flags = 1024;
pub const IBV_DEVICE_SYS_IMAGE_GUID: ibv_device_cap_flags = 2048;
pub const IBV_DEVICE_RC_RNR_NAK_GEN: ibv_device_cap_flags = 4096;
pub const IBV_DEVICE_SRQ_RESIZE: ibv_device_cap_flags = 8192;
pub const IBV_DEVICE_N_NOTIFY_CQ: ibv_device_cap_flags = 16384;
pub const IBV_DEVICE_MEM_WINDOW: ibv_device_cap_flags = 131072;
pub const IBV_DEVICE_UD_IP_CSUM: ibv_device_cap_flags = 262144;
pub const IBV_DEVICE_XRC: ibv_device_cap_flags = 1048576;
pub const IBV_DEVICE_MEM_MGT_EXTENSIONS: ibv_device_cap_flags = 2097152;
pub const IBV_DEVICE_MEM_WINDOW_TYPE_2A: ibv_device_cap_flags = 8388608;
pub const IBV_DEVICE_MEM_WINDOW_TYPE_2B: ibv_device_cap_flags = 16777216;
pub const IBV_DEVICE_RC_IP_CSUM: ibv_device_cap_flags = 33554432;
pub const IBV_DEVICE_RAW_IP_CSUM: ibv_device_cap_flags = 67108864;
pub const IBV_DEVICE_MANAGED_FLOW_STEERING: ibv_device_cap_flags = 536870912;
pub type ibv_device_cap_flags = ::std::os::raw::c_uint;
pub const IBV_FORK_DISABLED: ibv_fork_status = 0;
pub const IBV_FORK_ENABLED: ibv_fork_status = 1;
pub const IBV_FORK_UNNEEDED: ibv_fork_status = 2;
pub type ibv_fork_status = ::std::os::raw::c_uint;
pub const IBV_ATOMIC_NONE: ibv_atomic_cap = 0;
pub const IBV_ATOMIC_HCA: ibv_atomic_cap = 1;
pub const IBV_ATOMIC_GLOB: ibv_atomic_cap = 2;
pub type ibv_atomic_cap = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_alloc_dm_attr {
    pub length: usize,
    pub log_align_req: u32,
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_alloc_dm_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_alloc_dm_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_alloc_dm_attr>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_alloc_dm_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_alloc_dm_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_alloc_dm_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_alloc_dm_attr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_align_req) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_alloc_dm_attr),
            "::",
            stringify!(log_align_req)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_alloc_dm_attr),
            "::",
            stringify!(comp_mask)
        )
    );
}
pub const IBV_DM_MASK_HANDLE: ibv_dm_mask = 1;
pub type ibv_dm_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_dm {
    pub context: *mut ibv_context,
    pub memcpy_to_dm: ::std::option::Option<
        unsafe extern "C" fn(
            dm: *mut ibv_dm,
            dm_offset: u64,
            host_addr: *const ::std::os::raw::c_void,
            length: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub memcpy_from_dm: ::std::option::Option<
        unsafe extern "C" fn(
            host_addr: *mut ::std::os::raw::c_void,
            dm: *mut ibv_dm,
            dm_offset: u64,
            length: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub comp_mask: u32,
    pub handle: u32,
}
#[test]
fn bindgen_test_layout_ibv_dm() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_dm> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_dm>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_dm))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_dm>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_dm))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_dm),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memcpy_to_dm) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_dm),
            "::",
            stringify!(memcpy_to_dm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memcpy_from_dm) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_dm),
            "::",
            stringify!(memcpy_from_dm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_dm),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_dm),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for ibv_dm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_device_attr {
    pub fw_ver: [::std::os::raw::c_char; 64usize],
    pub node_guid: __be64,
    pub sys_image_guid: __be64,
    pub max_mr_size: u64,
    pub page_size_cap: u64,
    pub vendor_id: u32,
    pub vendor_part_id: u32,
    pub hw_ver: u32,
    pub max_qp: ::std::os::raw::c_int,
    pub max_qp_wr: ::std::os::raw::c_int,
    pub device_cap_flags: ::std::os::raw::c_uint,
    pub max_sge: ::std::os::raw::c_int,
    pub max_sge_rd: ::std::os::raw::c_int,
    pub max_cq: ::std::os::raw::c_int,
    pub max_cqe: ::std::os::raw::c_int,
    pub max_mr: ::std::os::raw::c_int,
    pub max_pd: ::std::os::raw::c_int,
    pub max_qp_rd_atom: ::std::os::raw::c_int,
    pub max_ee_rd_atom: ::std::os::raw::c_int,
    pub max_res_rd_atom: ::std::os::raw::c_int,
    pub max_qp_init_rd_atom: ::std::os::raw::c_int,
    pub max_ee_init_rd_atom: ::std::os::raw::c_int,
    pub atomic_cap: ibv_atomic_cap,
    pub max_ee: ::std::os::raw::c_int,
    pub max_rdd: ::std::os::raw::c_int,
    pub max_mw: ::std::os::raw::c_int,
    pub max_raw_ipv6_qp: ::std::os::raw::c_int,
    pub max_raw_ethy_qp: ::std::os::raw::c_int,
    pub max_mcast_grp: ::std::os::raw::c_int,
    pub max_mcast_qp_attach: ::std::os::raw::c_int,
    pub max_total_mcast_qp_attach: ::std::os::raw::c_int,
    pub max_ah: ::std::os::raw::c_int,
    pub max_fmr: ::std::os::raw::c_int,
    pub max_map_per_fmr: ::std::os::raw::c_int,
    pub max_srq: ::std::os::raw::c_int,
    pub max_srq_wr: ::std::os::raw::c_int,
    pub max_srq_sge: ::std::os::raw::c_int,
    pub max_pkeys: u16,
    pub local_ca_ack_delay: u8,
    pub phys_port_cnt: u8,
}
#[test]
fn bindgen_test_layout_ibv_device_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_device_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_device_attr>(),
        232usize,
        concat!("Size of: ", stringify!(ibv_device_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_device_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_device_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fw_ver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(fw_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_guid) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(node_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sys_image_guid) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(sys_image_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mr_size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_mr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).page_size_cap) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(page_size_cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_part_id) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(vendor_part_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_ver) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(hw_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_qp) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_qp_wr) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_qp_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_cap_flags) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(device_cap_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge_rd) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_sge_rd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cq) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cqe) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mr) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_pd) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_qp_rd_atom) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_qp_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ee_rd_atom) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_ee_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_res_rd_atom) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_res_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_qp_init_rd_atom) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_qp_init_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ee_init_rd_atom) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_ee_init_rd_atom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atomic_cap) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(atomic_cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ee) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_ee)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rdd) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_rdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mw) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_mw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_raw_ipv6_qp) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_raw_ipv6_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_raw_ethy_qp) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_raw_ethy_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mcast_grp) as usize - ptr as usize },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_mcast_grp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mcast_qp_attach) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_mcast_qp_attach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_total_mcast_qp_attach) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_total_mcast_qp_attach)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ah) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_fmr) as usize - ptr as usize },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_fmr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_map_per_fmr) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_map_per_fmr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_srq) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_srq_wr) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_srq_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_srq_sge) as usize - ptr as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_srq_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_pkeys) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(max_pkeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).local_ca_ack_delay) as usize - ptr as usize },
        226usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(local_ca_ack_delay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phys_port_cnt) as usize - ptr as usize },
        227usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr),
            "::",
            stringify!(phys_port_cnt)
        )
    );
}
impl Default for ibv_device_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_query_device_ex_input {
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_query_device_ex_input() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_query_device_ex_input> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_query_device_ex_input>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_query_device_ex_input))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_query_device_ex_input>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_query_device_ex_input))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_query_device_ex_input),
            "::",
            stringify!(comp_mask)
        )
    );
}
pub const IBV_ODP_SUPPORT_SEND: ibv_odp_transport_cap_bits = 1;
pub const IBV_ODP_SUPPORT_RECV: ibv_odp_transport_cap_bits = 2;
pub const IBV_ODP_SUPPORT_WRITE: ibv_odp_transport_cap_bits = 4;
pub const IBV_ODP_SUPPORT_READ: ibv_odp_transport_cap_bits = 8;
pub const IBV_ODP_SUPPORT_ATOMIC: ibv_odp_transport_cap_bits = 16;
pub const IBV_ODP_SUPPORT_SRQ_RECV: ibv_odp_transport_cap_bits = 32;
pub type ibv_odp_transport_cap_bits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_odp_caps {
    pub general_caps: u64,
    pub per_transport_caps: ibv_odp_caps__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_odp_caps__bindgen_ty_1 {
    pub rc_odp_caps: u32,
    pub uc_odp_caps: u32,
    pub ud_odp_caps: u32,
}
#[test]
fn bindgen_test_layout_ibv_odp_caps__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_odp_caps__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_odp_caps__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(ibv_odp_caps__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_odp_caps__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_odp_caps__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rc_odp_caps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_odp_caps__bindgen_ty_1),
            "::",
            stringify!(rc_odp_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uc_odp_caps) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_odp_caps__bindgen_ty_1),
            "::",
            stringify!(uc_odp_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ud_odp_caps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_odp_caps__bindgen_ty_1),
            "::",
            stringify!(ud_odp_caps)
        )
    );
}
#[test]
fn bindgen_test_layout_ibv_odp_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_odp_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_odp_caps>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_odp_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_odp_caps>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_odp_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).general_caps) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_odp_caps),
            "::",
            stringify!(general_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).per_transport_caps) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_odp_caps),
            "::",
            stringify!(per_transport_caps)
        )
    );
}
pub const IBV_ODP_SUPPORT: ibv_odp_general_caps = 1;
pub const IBV_ODP_SUPPORT_IMPLICIT: ibv_odp_general_caps = 2;
pub type ibv_odp_general_caps = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_tso_caps {
    pub max_tso: u32,
    pub supported_qpts: u32,
}
#[test]
fn bindgen_test_layout_ibv_tso_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_tso_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_tso_caps>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_tso_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_tso_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_tso_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_tso) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tso_caps),
            "::",
            stringify!(max_tso)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported_qpts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tso_caps),
            "::",
            stringify!(supported_qpts)
        )
    );
}
pub const IBV_RX_HASH_FUNC_TOEPLITZ: ibv_rx_hash_function_flags = 1;
pub type ibv_rx_hash_function_flags = ::std::os::raw::c_uint;
pub const IBV_RX_HASH_SRC_IPV4: ibv_rx_hash_fields = 1;
pub const IBV_RX_HASH_DST_IPV4: ibv_rx_hash_fields = 2;
pub const IBV_RX_HASH_SRC_IPV6: ibv_rx_hash_fields = 4;
pub const IBV_RX_HASH_DST_IPV6: ibv_rx_hash_fields = 8;
pub const IBV_RX_HASH_SRC_PORT_TCP: ibv_rx_hash_fields = 16;
pub const IBV_RX_HASH_DST_PORT_TCP: ibv_rx_hash_fields = 32;
pub const IBV_RX_HASH_SRC_PORT_UDP: ibv_rx_hash_fields = 64;
pub const IBV_RX_HASH_DST_PORT_UDP: ibv_rx_hash_fields = 128;
pub const IBV_RX_HASH_IPSEC_SPI: ibv_rx_hash_fields = 256;
pub const IBV_RX_HASH_INNER: ibv_rx_hash_fields = 2147483648;
pub type ibv_rx_hash_fields = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_rss_caps {
    pub supported_qpts: u32,
    pub max_rwq_indirection_tables: u32,
    pub max_rwq_indirection_table_size: u32,
    pub rx_hash_fields_mask: u64,
    pub rx_hash_function: u8,
}
#[test]
fn bindgen_test_layout_ibv_rss_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_rss_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_rss_caps>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_rss_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_rss_caps>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_rss_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported_qpts) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rss_caps),
            "::",
            stringify!(supported_qpts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rwq_indirection_tables) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rss_caps),
            "::",
            stringify!(max_rwq_indirection_tables)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).max_rwq_indirection_table_size) as usize - ptr as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rss_caps),
            "::",
            stringify!(max_rwq_indirection_table_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_hash_fields_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rss_caps),
            "::",
            stringify!(rx_hash_fields_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_hash_function) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rss_caps),
            "::",
            stringify!(rx_hash_function)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_packet_pacing_caps {
    pub qp_rate_limit_min: u32,
    pub qp_rate_limit_max: u32,
    pub supported_qpts: u32,
}
#[test]
fn bindgen_test_layout_ibv_packet_pacing_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_packet_pacing_caps> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_packet_pacing_caps>(),
        12usize,
        concat!("Size of: ", stringify!(ibv_packet_pacing_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_packet_pacing_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_packet_pacing_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_rate_limit_min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_packet_pacing_caps),
            "::",
            stringify!(qp_rate_limit_min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_rate_limit_max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_packet_pacing_caps),
            "::",
            stringify!(qp_rate_limit_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supported_qpts) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_packet_pacing_caps),
            "::",
            stringify!(supported_qpts)
        )
    );
}
pub const IBV_RAW_PACKET_CAP_CVLAN_STRIPPING: ibv_raw_packet_caps = 1;
pub const IBV_RAW_PACKET_CAP_SCATTER_FCS: ibv_raw_packet_caps = 2;
pub const IBV_RAW_PACKET_CAP_IP_CSUM: ibv_raw_packet_caps = 4;
pub const IBV_RAW_PACKET_CAP_DELAY_DROP: ibv_raw_packet_caps = 8;
pub type ibv_raw_packet_caps = ::std::os::raw::c_uint;
pub const IBV_TM_CAP_RC: ibv_tm_cap_flags = 1;
pub type ibv_tm_cap_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_tm_caps {
    pub max_rndv_hdr_size: u32,
    pub max_num_tags: u32,
    pub flags: u32,
    pub max_ops: u32,
    pub max_sge: u32,
}
#[test]
fn bindgen_test_layout_ibv_tm_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_tm_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_tm_caps>(),
        20usize,
        concat!("Size of: ", stringify!(ibv_tm_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_tm_caps>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_tm_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rndv_hdr_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tm_caps),
            "::",
            stringify!(max_rndv_hdr_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num_tags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tm_caps),
            "::",
            stringify!(max_num_tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tm_caps),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ops) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tm_caps),
            "::",
            stringify!(max_ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tm_caps),
            "::",
            stringify!(max_sge)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_cq_moderation_caps {
    pub max_cq_count: u16,
    pub max_cq_period: u16,
}
#[test]
fn bindgen_test_layout_ibv_cq_moderation_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_cq_moderation_caps> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_cq_moderation_caps>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_cq_moderation_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_cq_moderation_caps>(),
        2usize,
        concat!("Alignment of ", stringify!(ibv_cq_moderation_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cq_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_moderation_caps),
            "::",
            stringify!(max_cq_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_cq_period) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_moderation_caps),
            "::",
            stringify!(max_cq_period)
        )
    );
}
pub const IBV_PCI_ATOMIC_OPERATION_4_BYTE_SIZE_SUP: ibv_pci_atomic_op_size = 1;
pub const IBV_PCI_ATOMIC_OPERATION_8_BYTE_SIZE_SUP: ibv_pci_atomic_op_size = 2;
pub const IBV_PCI_ATOMIC_OPERATION_16_BYTE_SIZE_SUP: ibv_pci_atomic_op_size = 4;
pub type ibv_pci_atomic_op_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_pci_atomic_caps {
    pub fetch_add: u16,
    pub swap: u16,
    pub compare_swap: u16,
}
#[test]
fn bindgen_test_layout_ibv_pci_atomic_caps() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_pci_atomic_caps> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_pci_atomic_caps>(),
        6usize,
        concat!("Size of: ", stringify!(ibv_pci_atomic_caps))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_pci_atomic_caps>(),
        2usize,
        concat!("Alignment of ", stringify!(ibv_pci_atomic_caps))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fetch_add) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_pci_atomic_caps),
            "::",
            stringify!(fetch_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swap) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_pci_atomic_caps),
            "::",
            stringify!(swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare_swap) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_pci_atomic_caps),
            "::",
            stringify!(compare_swap)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_device_attr_ex {
    pub orig_attr: ibv_device_attr,
    pub comp_mask: u32,
    pub odp_caps: ibv_odp_caps,
    pub completion_timestamp_mask: u64,
    pub hca_core_clock: u64,
    pub device_cap_flags_ex: u64,
    pub tso_caps: ibv_tso_caps,
    pub rss_caps: ibv_rss_caps,
    pub max_wq_type_rq: u32,
    pub packet_pacing_caps: ibv_packet_pacing_caps,
    pub raw_packet_caps: u32,
    pub tm_caps: ibv_tm_caps,
    pub cq_mod_caps: ibv_cq_moderation_caps,
    pub max_dm_size: u64,
    pub pci_atomic_caps: ibv_pci_atomic_caps,
    pub xrc_odp_caps: u32,
    pub phys_port_cnt_ex: u32,
}
#[test]
fn bindgen_test_layout_ibv_device_attr_ex() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_device_attr_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_device_attr_ex>(),
        400usize,
        concat!("Size of: ", stringify!(ibv_device_attr_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_device_attr_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_device_attr_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).orig_attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(orig_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).odp_caps) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(odp_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).completion_timestamp_mask) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(completion_timestamp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hca_core_clock) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(hca_core_clock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device_cap_flags_ex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(device_cap_flags_ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tso_caps) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(tso_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rss_caps) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(rss_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wq_type_rq) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(max_wq_type_rq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_pacing_caps) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(packet_pacing_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_packet_caps) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(raw_packet_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_caps) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(tm_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_mod_caps) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(cq_mod_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dm_size) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(max_dm_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pci_atomic_caps) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(pci_atomic_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrc_odp_caps) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(xrc_odp_caps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phys_port_cnt_ex) as usize - ptr as usize },
        396usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device_attr_ex),
            "::",
            stringify!(phys_port_cnt_ex)
        )
    );
}
impl Default for ibv_device_attr_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_MTU_256: ibv_mtu = 1;
pub const IBV_MTU_512: ibv_mtu = 2;
pub const IBV_MTU_1024: ibv_mtu = 3;
pub const IBV_MTU_2048: ibv_mtu = 4;
pub const IBV_MTU_4096: ibv_mtu = 5;
pub type ibv_mtu = ::std::os::raw::c_uint;
pub mod ibv_port_state {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_PORT_NOP: Type = 0;
    pub const IBV_PORT_DOWN: Type = 1;
    pub const IBV_PORT_INIT: Type = 2;
    pub const IBV_PORT_ARMED: Type = 3;
    pub const IBV_PORT_ACTIVE: Type = 4;
    pub const IBV_PORT_ACTIVE_DEFER: Type = 5;
}
pub const IBV_LINK_LAYER_UNSPECIFIED: _bindgen_ty_13 = 0;
pub const IBV_LINK_LAYER_INFINIBAND: _bindgen_ty_13 = 1;
pub const IBV_LINK_LAYER_ETHERNET: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
impl ibv_port_cap_flags {
    pub const IBV_PORT_SM: ibv_port_cap_flags = ibv_port_cap_flags(2);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_NOTICE_SUP: ibv_port_cap_flags = ibv_port_cap_flags(4);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_TRAP_SUP: ibv_port_cap_flags = ibv_port_cap_flags(8);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_OPT_IPD_SUP: ibv_port_cap_flags = ibv_port_cap_flags(16);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_AUTO_MIGR_SUP: ibv_port_cap_flags = ibv_port_cap_flags(32);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_SL_MAP_SUP: ibv_port_cap_flags = ibv_port_cap_flags(64);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_MKEY_NVRAM: ibv_port_cap_flags = ibv_port_cap_flags(128);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_PKEY_NVRAM: ibv_port_cap_flags = ibv_port_cap_flags(256);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_LED_INFO_SUP: ibv_port_cap_flags = ibv_port_cap_flags(512);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_SYS_IMAGE_GUID_SUP: ibv_port_cap_flags = ibv_port_cap_flags(2048);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_PKEY_SW_EXT_PORT_TRAP_SUP: ibv_port_cap_flags = ibv_port_cap_flags(4096);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_EXTENDED_SPEEDS_SUP: ibv_port_cap_flags = ibv_port_cap_flags(16384);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_CAP_MASK2_SUP: ibv_port_cap_flags = ibv_port_cap_flags(32768);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_CM_SUP: ibv_port_cap_flags = ibv_port_cap_flags(65536);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_SNMP_TUNNEL_SUP: ibv_port_cap_flags = ibv_port_cap_flags(131072);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_REINIT_SUP: ibv_port_cap_flags = ibv_port_cap_flags(262144);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_DEVICE_MGMT_SUP: ibv_port_cap_flags = ibv_port_cap_flags(524288);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_VENDOR_CLASS_SUP: ibv_port_cap_flags = ibv_port_cap_flags(1048576);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_DR_NOTICE_SUP: ibv_port_cap_flags = ibv_port_cap_flags(2097152);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_CAP_MASK_NOTICE_SUP: ibv_port_cap_flags = ibv_port_cap_flags(4194304);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_BOOT_MGMT_SUP: ibv_port_cap_flags = ibv_port_cap_flags(8388608);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_LINK_LATENCY_SUP: ibv_port_cap_flags = ibv_port_cap_flags(16777216);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_CLIENT_REG_SUP: ibv_port_cap_flags = ibv_port_cap_flags(33554432);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_IP_BASED_GIDS: ibv_port_cap_flags = ibv_port_cap_flags(67108864);
}
impl ::std::ops::BitOr<ibv_port_cap_flags> for ibv_port_cap_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_port_cap_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_port_cap_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_port_cap_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_port_cap_flags> for ibv_port_cap_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_port_cap_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_port_cap_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_port_cap_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_port_cap_flags(pub ::std::os::raw::c_uint);
pub const IBV_PORT_SET_NODE_DESC_SUP: ibv_port_cap_flags2 = 1;
pub const IBV_PORT_INFO_EXT_SUP: ibv_port_cap_flags2 = 2;
pub const IBV_PORT_VIRT_SUP: ibv_port_cap_flags2 = 4;
pub const IBV_PORT_SWITCH_PORT_STATE_TABLE_SUP: ibv_port_cap_flags2 = 8;
pub const IBV_PORT_LINK_WIDTH_2X_SUP: ibv_port_cap_flags2 = 16;
pub const IBV_PORT_LINK_SPEED_HDR_SUP: ibv_port_cap_flags2 = 32;
pub const IBV_PORT_LINK_SPEED_NDR_SUP: ibv_port_cap_flags2 = 1024;
pub type ibv_port_cap_flags2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_port_attr {
    pub state: ibv_port_state::Type,
    pub max_mtu: ibv_mtu,
    pub active_mtu: ibv_mtu,
    pub gid_tbl_len: ::std::os::raw::c_int,
    pub port_cap_flags: u32,
    pub max_msg_sz: u32,
    pub bad_pkey_cntr: u32,
    pub qkey_viol_cntr: u32,
    pub pkey_tbl_len: u16,
    pub lid: u16,
    pub sm_lid: u16,
    pub lmc: u8,
    pub max_vl_num: u8,
    pub sm_sl: u8,
    pub subnet_timeout: u8,
    pub init_type_reply: u8,
    pub active_width: u8,
    pub active_speed: u8,
    pub phys_state: u8,
    pub link_layer: u8,
    pub flags: u8,
    pub port_cap_flags2: u16,
}
#[test]
fn bindgen_test_layout_ibv_port_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_port_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_port_attr>(),
        52usize,
        concat!("Size of: ", stringify!(ibv_port_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_port_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_port_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_mtu) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(max_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_mtu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(active_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid_tbl_len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(gid_tbl_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_cap_flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(port_cap_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_msg_sz) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(max_msg_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bad_pkey_cntr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(bad_pkey_cntr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey_viol_cntr) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(qkey_viol_cntr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_tbl_len) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(pkey_tbl_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lid) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_lid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(sm_lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmc) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(lmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_vl_num) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(max_vl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_sl) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(sm_sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subnet_timeout) as usize - ptr as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(subnet_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init_type_reply) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(init_type_reply)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_width) as usize - ptr as usize },
        43usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(active_width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).active_speed) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(active_speed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phys_state) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(phys_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_layer) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(link_layer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_cap_flags2) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_port_attr),
            "::",
            stringify!(port_cap_flags2)
        )
    );
}
impl Default for ibv_port_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_EVENT_CQ_ERR: ibv_event_type = 0;
pub const IBV_EVENT_QP_FATAL: ibv_event_type = 1;
pub const IBV_EVENT_QP_REQ_ERR: ibv_event_type = 2;
pub const IBV_EVENT_QP_ACCESS_ERR: ibv_event_type = 3;
pub const IBV_EVENT_COMM_EST: ibv_event_type = 4;
pub const IBV_EVENT_SQ_DRAINED: ibv_event_type = 5;
pub const IBV_EVENT_PATH_MIG: ibv_event_type = 6;
pub const IBV_EVENT_PATH_MIG_ERR: ibv_event_type = 7;
pub const IBV_EVENT_DEVICE_FATAL: ibv_event_type = 8;
pub const IBV_EVENT_PORT_ACTIVE: ibv_event_type = 9;
pub const IBV_EVENT_PORT_ERR: ibv_event_type = 10;
pub const IBV_EVENT_LID_CHANGE: ibv_event_type = 11;
pub const IBV_EVENT_PKEY_CHANGE: ibv_event_type = 12;
pub const IBV_EVENT_SM_CHANGE: ibv_event_type = 13;
pub const IBV_EVENT_SRQ_ERR: ibv_event_type = 14;
pub const IBV_EVENT_SRQ_LIMIT_REACHED: ibv_event_type = 15;
pub const IBV_EVENT_QP_LAST_WQE_REACHED: ibv_event_type = 16;
pub const IBV_EVENT_CLIENT_REREGISTER: ibv_event_type = 17;
pub const IBV_EVENT_GID_CHANGE: ibv_event_type = 18;
pub const IBV_EVENT_WQ_FATAL: ibv_event_type = 19;
pub type ibv_event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_async_event {
    pub element: ibv_async_event__bindgen_ty_1,
    pub event_type: ibv_event_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_async_event__bindgen_ty_1 {
    pub cq: *mut ibv_cq,
    pub qp: *mut ibv_qp,
    pub srq: *mut ibv_srq,
    pub wq: *mut ibv_wq,
    pub port_num: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ibv_async_event__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_async_event__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_async_event__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_async_event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_async_event__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_async_event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_async_event__bindgen_ty_1),
            "::",
            stringify!(cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_async_event__bindgen_ty_1),
            "::",
            stringify!(qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_async_event__bindgen_ty_1),
            "::",
            stringify!(srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_async_event__bindgen_ty_1),
            "::",
            stringify!(wq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_async_event__bindgen_ty_1),
            "::",
            stringify!(port_num)
        )
    );
}
impl Default for ibv_async_event__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_async_event() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_async_event> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_async_event>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_async_event))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_async_event>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_async_event))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_async_event),
            "::",
            stringify!(element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).event_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_async_event),
            "::",
            stringify!(event_type)
        )
    );
}
impl Default for ibv_async_event {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod ibv_wc_status {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_WC_SUCCESS: Type = 0;
    pub const IBV_WC_LOC_LEN_ERR: Type = 1;
    pub const IBV_WC_LOC_QP_OP_ERR: Type = 2;
    pub const IBV_WC_LOC_EEC_OP_ERR: Type = 3;
    pub const IBV_WC_LOC_PROT_ERR: Type = 4;
    pub const IBV_WC_WR_FLUSH_ERR: Type = 5;
    pub const IBV_WC_MW_BIND_ERR: Type = 6;
    pub const IBV_WC_BAD_RESP_ERR: Type = 7;
    pub const IBV_WC_LOC_ACCESS_ERR: Type = 8;
    pub const IBV_WC_REM_INV_REQ_ERR: Type = 9;
    pub const IBV_WC_REM_ACCESS_ERR: Type = 10;
    pub const IBV_WC_REM_OP_ERR: Type = 11;
    pub const IBV_WC_RETRY_EXC_ERR: Type = 12;
    pub const IBV_WC_RNR_RETRY_EXC_ERR: Type = 13;
    pub const IBV_WC_LOC_RDD_VIOL_ERR: Type = 14;
    pub const IBV_WC_REM_INV_RD_REQ_ERR: Type = 15;
    pub const IBV_WC_REM_ABORT_ERR: Type = 16;
    pub const IBV_WC_INV_EECN_ERR: Type = 17;
    pub const IBV_WC_INV_EEC_STATE_ERR: Type = 18;
    pub const IBV_WC_FATAL_ERR: Type = 19;
    pub const IBV_WC_RESP_TIMEOUT_ERR: Type = 20;
    pub const IBV_WC_GENERAL_ERR: Type = 21;
    pub const IBV_WC_TM_ERR: Type = 22;
    pub const IBV_WC_TM_RNDV_INCOMPLETE: Type = 23;
}
extern "C" {
    pub fn ibv_wc_status_str(status: ibv_wc_status::Type) -> *const ::std::os::raw::c_char;
}
pub mod ibv_wc_opcode {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_WC_SEND: Type = 0;
    pub const IBV_WC_RDMA_WRITE: Type = 1;
    pub const IBV_WC_RDMA_READ: Type = 2;
    pub const IBV_WC_COMP_SWAP: Type = 3;
    pub const IBV_WC_FETCH_ADD: Type = 4;
    pub const IBV_WC_BIND_MW: Type = 5;
    pub const IBV_WC_LOCAL_INV: Type = 6;
    pub const IBV_WC_TSO: Type = 7;
    pub const IBV_WC_FLUSH: Type = 8;
    pub const IBV_WC_ATOMIC_WRITE: Type = 9;
    pub const IBV_WC_RECV: Type = 128;
    pub const IBV_WC_RECV_RDMA_WITH_IMM: Type = 129;
    pub const IBV_WC_TM_ADD: Type = 130;
    pub const IBV_WC_TM_DEL: Type = 131;
    pub const IBV_WC_TM_SYNC: Type = 132;
    pub const IBV_WC_TM_RECV: Type = 133;
    pub const IBV_WC_TM_NO_TAG: Type = 134;
    pub const IBV_WC_DRIVER1: Type = 135;
    pub const IBV_WC_DRIVER2: Type = 136;
    pub const IBV_WC_DRIVER3: Type = 137;
}
pub const IBV_WC_IP_CSUM_OK_SHIFT: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const IBV_WC_EX_WITH_BYTE_LEN: ibv_create_cq_wc_flags = 1;
pub const IBV_WC_EX_WITH_IMM: ibv_create_cq_wc_flags = 2;
pub const IBV_WC_EX_WITH_QP_NUM: ibv_create_cq_wc_flags = 4;
pub const IBV_WC_EX_WITH_SRC_QP: ibv_create_cq_wc_flags = 8;
pub const IBV_WC_EX_WITH_SLID: ibv_create_cq_wc_flags = 16;
pub const IBV_WC_EX_WITH_SL: ibv_create_cq_wc_flags = 32;
pub const IBV_WC_EX_WITH_DLID_PATH_BITS: ibv_create_cq_wc_flags = 64;
pub const IBV_WC_EX_WITH_COMPLETION_TIMESTAMP: ibv_create_cq_wc_flags = 128;
pub const IBV_WC_EX_WITH_CVLAN: ibv_create_cq_wc_flags = 256;
pub const IBV_WC_EX_WITH_FLOW_TAG: ibv_create_cq_wc_flags = 512;
pub const IBV_WC_EX_WITH_TM_INFO: ibv_create_cq_wc_flags = 1024;
pub const IBV_WC_EX_WITH_COMPLETION_TIMESTAMP_WALLCLOCK: ibv_create_cq_wc_flags = 2048;
pub type ibv_create_cq_wc_flags = ::std::os::raw::c_uint;
pub const IBV_WC_STANDARD_FLAGS: _bindgen_ty_15 = 127;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const IBV_CREATE_CQ_SUP_WC_FLAGS: _bindgen_ty_16 = 4095;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
impl ibv_wc_flags {
    pub const IBV_WC_GRH: ibv_wc_flags = ibv_wc_flags(1);
}
impl ibv_wc_flags {
    pub const IBV_WC_WITH_IMM: ibv_wc_flags = ibv_wc_flags(2);
}
impl ibv_wc_flags {
    pub const IBV_WC_IP_CSUM_OK: ibv_wc_flags = ibv_wc_flags(4);
}
impl ibv_wc_flags {
    pub const IBV_WC_WITH_INV: ibv_wc_flags = ibv_wc_flags(8);
}
impl ibv_wc_flags {
    pub const IBV_WC_TM_SYNC_REQ: ibv_wc_flags = ibv_wc_flags(16);
}
impl ibv_wc_flags {
    pub const IBV_WC_TM_MATCH: ibv_wc_flags = ibv_wc_flags(32);
}
impl ibv_wc_flags {
    pub const IBV_WC_TM_DATA_VALID: ibv_wc_flags = ibv_wc_flags(64);
}
impl ::std::ops::BitOr<ibv_wc_flags> for ibv_wc_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_wc_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_wc_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_wc_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_wc_flags> for ibv_wc_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_wc_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_wc_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_wc_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_wc_flags(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_wc {
    pub wr_id: u64,
    pub status: ibv_wc_status::Type,
    pub opcode: ibv_wc_opcode::Type,
    pub vendor_err: u32,
    pub byte_len: u32,
    pub __bindgen_anon_1: ibv_wc__bindgen_ty_1,
    pub qp_num: u32,
    pub src_qp: u32,
    pub wc_flags: ::std::os::raw::c_uint,
    pub pkey_index: u16,
    pub slid: u16,
    pub sl: u8,
    pub dlid_path_bits: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_wc__bindgen_ty_1 {
    pub imm_data: __be32,
    pub invalidated_rkey: u32,
}
#[test]
fn bindgen_test_layout_ibv_wc__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_wc__bindgen_ty_1> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_wc__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_wc__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_wc__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_wc__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imm_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc__bindgen_ty_1),
            "::",
            stringify!(imm_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalidated_rkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc__bindgen_ty_1),
            "::",
            stringify!(invalidated_rkey)
        )
    );
}
impl Default for ibv_wc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_wc() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_wc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_wc>(),
        48usize,
        concat!("Size of: ", stringify!(ibv_wc))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_wc>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_wc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_err) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(vendor_err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).byte_len) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(byte_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_num) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_qp) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(src_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_flags) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(wc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_index) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slid) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(slid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlid_path_bits) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc),
            "::",
            stringify!(dlid_path_bits)
        )
    );
}
impl Default for ibv_wc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ibv_access_flags {
    pub const IBV_ACCESS_LOCAL_WRITE: ibv_access_flags = ibv_access_flags(1);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_REMOTE_WRITE: ibv_access_flags = ibv_access_flags(2);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_REMOTE_READ: ibv_access_flags = ibv_access_flags(4);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_REMOTE_ATOMIC: ibv_access_flags = ibv_access_flags(8);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_MW_BIND: ibv_access_flags = ibv_access_flags(16);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_ZERO_BASED: ibv_access_flags = ibv_access_flags(32);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_ON_DEMAND: ibv_access_flags = ibv_access_flags(64);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_HUGETLB: ibv_access_flags = ibv_access_flags(128);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_FLUSH_GLOBAL: ibv_access_flags = ibv_access_flags(256);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_FLUSH_PERSISTENT: ibv_access_flags = ibv_access_flags(512);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_RELAXED_ORDERING: ibv_access_flags = ibv_access_flags(1048576);
}
impl ::std::ops::BitOr<ibv_access_flags> for ibv_access_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_access_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_access_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_access_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_access_flags> for ibv_access_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_access_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_access_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_access_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_access_flags(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mw_bind_info {
    pub mr: *mut ibv_mr,
    pub addr: u64,
    pub length: u64,
    pub mw_access_flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ibv_mw_bind_info() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_mw_bind_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_mw_bind_info>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_mw_bind_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_mw_bind_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_mw_bind_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw_bind_info),
            "::",
            stringify!(mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw_bind_info),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw_bind_info),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mw_access_flags) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw_bind_info),
            "::",
            stringify!(mw_access_flags)
        )
    );
}
impl Default for ibv_mw_bind_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_pd {
    pub context: *mut ibv_context,
    pub handle: u32,
}
#[test]
fn bindgen_test_layout_ibv_pd() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_pd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_pd>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_pd))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_pd>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_pd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_pd),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_pd),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for ibv_pd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_td_init_attr {
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_td_init_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_td_init_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_td_init_attr>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_td_init_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_td_init_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_td_init_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_td_init_attr),
            "::",
            stringify!(comp_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_td {
    pub context: *mut ibv_context,
}
#[test]
fn bindgen_test_layout_ibv_td() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_td> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_td>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_td))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_td>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_td))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_td),
            "::",
            stringify!(context)
        )
    );
}
impl Default for ibv_td {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_XRCD_INIT_ATTR_FD: ibv_xrcd_init_attr_mask = 1;
pub const IBV_XRCD_INIT_ATTR_OFLAGS: ibv_xrcd_init_attr_mask = 2;
pub const IBV_XRCD_INIT_ATTR_RESERVED: ibv_xrcd_init_attr_mask = 4;
pub type ibv_xrcd_init_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_xrcd_init_attr {
    pub comp_mask: u32,
    pub fd: ::std::os::raw::c_int,
    pub oflags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ibv_xrcd_init_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_xrcd_init_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_xrcd_init_attr>(),
        12usize,
        concat!("Size of: ", stringify!(ibv_xrcd_init_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_xrcd_init_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_xrcd_init_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_xrcd_init_attr),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_xrcd_init_attr),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oflags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_xrcd_init_attr),
            "::",
            stringify!(oflags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_xrcd {
    pub context: *mut ibv_context,
}
#[test]
fn bindgen_test_layout_ibv_xrcd() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_xrcd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_xrcd>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_xrcd))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_xrcd>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_xrcd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_xrcd),
            "::",
            stringify!(context)
        )
    );
}
impl Default for ibv_xrcd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_REREG_MR_CHANGE_TRANSLATION: ibv_rereg_mr_flags = 1;
pub const IBV_REREG_MR_CHANGE_PD: ibv_rereg_mr_flags = 2;
pub const IBV_REREG_MR_CHANGE_ACCESS: ibv_rereg_mr_flags = 4;
pub const IBV_REREG_MR_FLAGS_SUPPORTED: ibv_rereg_mr_flags = 7;
pub type ibv_rereg_mr_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mr {
    pub context: *mut ibv_context,
    pub pd: *mut ibv_pd,
    pub addr: *mut ::std::os::raw::c_void,
    pub length: usize,
    pub handle: u32,
    pub lkey: u32,
    pub rkey: u32,
}
#[test]
fn bindgen_test_layout_ibv_mr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_mr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_mr>(),
        48usize,
        concat!("Size of: ", stringify!(ibv_mr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_mr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_mr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mr),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mr),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mr),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mr),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mr),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lkey) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mr),
            "::",
            stringify!(lkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mr),
            "::",
            stringify!(rkey)
        )
    );
}
impl Default for ibv_mr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_MW_TYPE_1: ibv_mw_type = 1;
pub const IBV_MW_TYPE_2: ibv_mw_type = 2;
pub type ibv_mw_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mw {
    pub context: *mut ibv_context,
    pub pd: *mut ibv_pd,
    pub rkey: u32,
    pub handle: u32,
    pub type_: ibv_mw_type,
}
#[test]
fn bindgen_test_layout_ibv_mw() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_mw> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_mw>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_mw))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_mw>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_mw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw),
            "::",
            stringify!(type_)
        )
    );
}
impl Default for ibv_mw {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_global_route {
    pub dgid: ibv_gid,
    pub flow_label: u32,
    pub sgid_index: u8,
    pub hop_limit: u8,
    pub traffic_class: u8,
}
#[test]
fn bindgen_test_layout_ibv_global_route() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_global_route> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_global_route>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_global_route))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_global_route>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_global_route))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_global_route),
            "::",
            stringify!(dgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_global_route),
            "::",
            stringify!(flow_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgid_index) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_global_route),
            "::",
            stringify!(sgid_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_global_route),
            "::",
            stringify!(hop_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_global_route),
            "::",
            stringify!(traffic_class)
        )
    );
}
impl Default for ibv_global_route {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_grh {
    pub version_tclass_flow: __be32,
    pub paylen: __be16,
    pub next_hdr: u8,
    pub hop_limit: u8,
    pub sgid: ibv_gid,
    pub dgid: ibv_gid,
}
#[test]
fn bindgen_test_layout_ibv_grh() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_grh> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_grh>(),
        40usize,
        concat!("Size of: ", stringify!(ibv_grh))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_grh>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_grh))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version_tclass_flow) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_grh),
            "::",
            stringify!(version_tclass_flow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).paylen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_grh),
            "::",
            stringify!(paylen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_hdr) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_grh),
            "::",
            stringify!(next_hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_grh),
            "::",
            stringify!(hop_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_grh),
            "::",
            stringify!(sgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_grh),
            "::",
            stringify!(dgid)
        )
    );
}
impl Default for ibv_grh {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_RATE_MAX: ibv_rate = 0;
pub const IBV_RATE_2_5_GBPS: ibv_rate = 2;
pub const IBV_RATE_5_GBPS: ibv_rate = 5;
pub const IBV_RATE_10_GBPS: ibv_rate = 3;
pub const IBV_RATE_20_GBPS: ibv_rate = 6;
pub const IBV_RATE_30_GBPS: ibv_rate = 4;
pub const IBV_RATE_40_GBPS: ibv_rate = 7;
pub const IBV_RATE_60_GBPS: ibv_rate = 8;
pub const IBV_RATE_80_GBPS: ibv_rate = 9;
pub const IBV_RATE_120_GBPS: ibv_rate = 10;
pub const IBV_RATE_14_GBPS: ibv_rate = 11;
pub const IBV_RATE_56_GBPS: ibv_rate = 12;
pub const IBV_RATE_112_GBPS: ibv_rate = 13;
pub const IBV_RATE_168_GBPS: ibv_rate = 14;
pub const IBV_RATE_25_GBPS: ibv_rate = 15;
pub const IBV_RATE_100_GBPS: ibv_rate = 16;
pub const IBV_RATE_200_GBPS: ibv_rate = 17;
pub const IBV_RATE_300_GBPS: ibv_rate = 18;
pub const IBV_RATE_28_GBPS: ibv_rate = 19;
pub const IBV_RATE_50_GBPS: ibv_rate = 20;
pub const IBV_RATE_400_GBPS: ibv_rate = 21;
pub const IBV_RATE_600_GBPS: ibv_rate = 22;
pub const IBV_RATE_800_GBPS: ibv_rate = 23;
pub const IBV_RATE_1200_GBPS: ibv_rate = 24;
pub type ibv_rate = ::std::os::raw::c_uint;
extern "C" {
    pub fn ibv_rate_to_mult(rate: ibv_rate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mult_to_ibv_rate(mult: ::std::os::raw::c_int) -> ibv_rate;
}
extern "C" {
    pub fn ibv_rate_to_mbps(rate: ibv_rate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbps_to_ibv_rate(mbps: ::std::os::raw::c_int) -> ibv_rate;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_ah_attr {
    pub grh: ibv_global_route,
    pub dlid: u16,
    pub sl: u8,
    pub src_path_bits: u8,
    pub static_rate: u8,
    pub is_global: u8,
    pub port_num: u8,
}
#[test]
fn bindgen_test_layout_ibv_ah_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_ah_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_ah_attr>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_ah_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_ah_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_ah_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grh) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah_attr),
            "::",
            stringify!(grh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah_attr),
            "::",
            stringify!(dlid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah_attr),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_path_bits) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah_attr),
            "::",
            stringify!(src_path_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).static_rate) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah_attr),
            "::",
            stringify!(static_rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_global) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah_attr),
            "::",
            stringify!(is_global)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah_attr),
            "::",
            stringify!(port_num)
        )
    );
}
impl Default for ibv_ah_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_SRQ_MAX_WR: ibv_srq_attr_mask = 1;
pub const IBV_SRQ_LIMIT: ibv_srq_attr_mask = 2;
pub type ibv_srq_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_srq_attr {
    pub max_wr: u32,
    pub max_sge: u32,
    pub srq_limit: u32,
}
#[test]
fn bindgen_test_layout_ibv_srq_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_srq_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_srq_attr>(),
        12usize,
        concat!("Size of: ", stringify!(ibv_srq_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_srq_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_srq_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_attr),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_attr),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_limit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_attr),
            "::",
            stringify!(srq_limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_srq_init_attr {
    pub srq_context: *mut ::std::os::raw::c_void,
    pub attr: ibv_srq_attr,
}
#[test]
fn bindgen_test_layout_ibv_srq_init_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_srq_init_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_srq_init_attr>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_srq_init_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_srq_init_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_srq_init_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr),
            "::",
            stringify!(srq_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr),
            "::",
            stringify!(attr)
        )
    );
}
impl Default for ibv_srq_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_SRQT_BASIC: ibv_srq_type = 0;
pub const IBV_SRQT_XRC: ibv_srq_type = 1;
pub const IBV_SRQT_TM: ibv_srq_type = 2;
pub type ibv_srq_type = ::std::os::raw::c_uint;
pub const IBV_SRQ_INIT_ATTR_TYPE: ibv_srq_init_attr_mask = 1;
pub const IBV_SRQ_INIT_ATTR_PD: ibv_srq_init_attr_mask = 2;
pub const IBV_SRQ_INIT_ATTR_XRCD: ibv_srq_init_attr_mask = 4;
pub const IBV_SRQ_INIT_ATTR_CQ: ibv_srq_init_attr_mask = 8;
pub const IBV_SRQ_INIT_ATTR_TM: ibv_srq_init_attr_mask = 16;
pub const IBV_SRQ_INIT_ATTR_RESERVED: ibv_srq_init_attr_mask = 32;
pub type ibv_srq_init_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_tm_cap {
    pub max_num_tags: u32,
    pub max_ops: u32,
}
#[test]
fn bindgen_test_layout_ibv_tm_cap() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_tm_cap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_tm_cap>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_tm_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_tm_cap>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_tm_cap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_num_tags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tm_cap),
            "::",
            stringify!(max_num_tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_ops) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_tm_cap),
            "::",
            stringify!(max_ops)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_srq_init_attr_ex {
    pub srq_context: *mut ::std::os::raw::c_void,
    pub attr: ibv_srq_attr,
    pub comp_mask: u32,
    pub srq_type: ibv_srq_type,
    pub pd: *mut ibv_pd,
    pub xrcd: *mut ibv_xrcd,
    pub cq: *mut ibv_cq,
    pub tm_cap: ibv_tm_cap,
}
#[test]
fn bindgen_test_layout_ibv_srq_init_attr_ex() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_srq_init_attr_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_srq_init_attr_ex>(),
        64usize,
        concat!("Size of: ", stringify!(ibv_srq_init_attr_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_srq_init_attr_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_srq_init_attr_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr_ex),
            "::",
            stringify!(srq_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr_ex),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr_ex),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr_ex),
            "::",
            stringify!(srq_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr_ex),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrcd) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr_ex),
            "::",
            stringify!(xrcd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr_ex),
            "::",
            stringify!(cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm_cap) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq_init_attr_ex),
            "::",
            stringify!(tm_cap)
        )
    );
}
impl Default for ibv_srq_init_attr_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_WQT_RQ: ibv_wq_type = 0;
pub type ibv_wq_type = ::std::os::raw::c_uint;
pub const IBV_WQ_INIT_ATTR_FLAGS: ibv_wq_init_attr_mask = 1;
pub const IBV_WQ_INIT_ATTR_RESERVED: ibv_wq_init_attr_mask = 2;
pub type ibv_wq_init_attr_mask = ::std::os::raw::c_uint;
pub const IBV_WQ_FLAGS_CVLAN_STRIPPING: ibv_wq_flags = 1;
pub const IBV_WQ_FLAGS_SCATTER_FCS: ibv_wq_flags = 2;
pub const IBV_WQ_FLAGS_DELAY_DROP: ibv_wq_flags = 4;
pub const IBV_WQ_FLAGS_PCI_WRITE_END_PADDING: ibv_wq_flags = 8;
pub const IBV_WQ_FLAGS_RESERVED: ibv_wq_flags = 16;
pub type ibv_wq_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_wq_init_attr {
    pub wq_context: *mut ::std::os::raw::c_void,
    pub wq_type: ibv_wq_type,
    pub max_wr: u32,
    pub max_sge: u32,
    pub pd: *mut ibv_pd,
    pub cq: *mut ibv_cq,
    pub comp_mask: u32,
    pub create_flags: u32,
}
#[test]
fn bindgen_test_layout_ibv_wq_init_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_wq_init_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_wq_init_attr>(),
        48usize,
        concat!("Size of: ", stringify!(ibv_wq_init_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_wq_init_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_wq_init_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_init_attr),
            "::",
            stringify!(wq_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_init_attr),
            "::",
            stringify!(wq_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_wr) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_init_attr),
            "::",
            stringify!(max_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_sge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_init_attr),
            "::",
            stringify!(max_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_init_attr),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_init_attr),
            "::",
            stringify!(cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_init_attr),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_init_attr),
            "::",
            stringify!(create_flags)
        )
    );
}
impl Default for ibv_wq_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_WQS_RESET: ibv_wq_state = 0;
pub const IBV_WQS_RDY: ibv_wq_state = 1;
pub const IBV_WQS_ERR: ibv_wq_state = 2;
pub const IBV_WQS_UNKNOWN: ibv_wq_state = 3;
pub type ibv_wq_state = ::std::os::raw::c_uint;
pub const IBV_WQ_ATTR_STATE: ibv_wq_attr_mask = 1;
pub const IBV_WQ_ATTR_CURR_STATE: ibv_wq_attr_mask = 2;
pub const IBV_WQ_ATTR_FLAGS: ibv_wq_attr_mask = 4;
pub const IBV_WQ_ATTR_RESERVED: ibv_wq_attr_mask = 8;
pub type ibv_wq_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_wq_attr {
    pub attr_mask: u32,
    pub wq_state: ibv_wq_state,
    pub curr_wq_state: ibv_wq_state,
    pub flags: u32,
    pub flags_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_wq_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_wq_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_wq_attr>(),
        20usize,
        concat!("Size of: ", stringify!(ibv_wq_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_wq_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_wq_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_attr),
            "::",
            stringify!(attr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_attr),
            "::",
            stringify!(wq_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).curr_wq_state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_attr),
            "::",
            stringify!(curr_wq_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_attr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq_attr),
            "::",
            stringify!(flags_mask)
        )
    );
}
impl Default for ibv_wq_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_rwq_ind_table {
    pub context: *mut ibv_context,
    pub ind_tbl_handle: ::std::os::raw::c_int,
    pub ind_tbl_num: ::std::os::raw::c_int,
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_rwq_ind_table() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_rwq_ind_table> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_rwq_ind_table>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_rwq_ind_table))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_rwq_ind_table>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_rwq_ind_table))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rwq_ind_table),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind_tbl_handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rwq_ind_table),
            "::",
            stringify!(ind_tbl_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind_tbl_num) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rwq_ind_table),
            "::",
            stringify!(ind_tbl_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rwq_ind_table),
            "::",
            stringify!(comp_mask)
        )
    );
}
impl Default for ibv_rwq_ind_table {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_CREATE_IND_TABLE_RESERVED: ibv_ind_table_init_attr_mask = 1;
pub type ibv_ind_table_init_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_rwq_ind_table_init_attr {
    pub log_ind_tbl_size: u32,
    pub ind_tbl: *mut *mut ibv_wq,
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_rwq_ind_table_init_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_rwq_ind_table_init_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_rwq_ind_table_init_attr>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_rwq_ind_table_init_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_rwq_ind_table_init_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_rwq_ind_table_init_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).log_ind_tbl_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rwq_ind_table_init_attr),
            "::",
            stringify!(log_ind_tbl_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ind_tbl) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rwq_ind_table_init_attr),
            "::",
            stringify!(ind_tbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rwq_ind_table_init_attr),
            "::",
            stringify!(comp_mask)
        )
    );
}
impl Default for ibv_rwq_ind_table_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod ibv_qp_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_QPT_RC: Type = 2;
    pub const IBV_QPT_UC: Type = 3;
    pub const IBV_QPT_UD: Type = 4;
    pub const IBV_QPT_RAW_PACKET: Type = 8;
    pub const IBV_QPT_XRC_SEND: Type = 9;
    pub const IBV_QPT_XRC_RECV: Type = 10;
    pub const IBV_QPT_DRIVER: Type = 255;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_qp_cap {
    pub max_send_wr: u32,
    pub max_recv_wr: u32,
    pub max_send_sge: u32,
    pub max_recv_sge: u32,
    pub max_inline_data: u32,
}
#[test]
fn bindgen_test_layout_ibv_qp_cap() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_qp_cap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_qp_cap>(),
        20usize,
        concat!("Size of: ", stringify!(ibv_qp_cap))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_qp_cap>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_qp_cap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_wr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_cap),
            "::",
            stringify!(max_send_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_wr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_cap),
            "::",
            stringify!(max_recv_wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_send_sge) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_cap),
            "::",
            stringify!(max_send_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_recv_sge) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_cap),
            "::",
            stringify!(max_recv_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_inline_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_cap),
            "::",
            stringify!(max_inline_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_qp_init_attr {
    pub qp_context: *mut ::std::os::raw::c_void,
    pub send_cq: *mut ibv_cq,
    pub recv_cq: *mut ibv_cq,
    pub srq: *mut ibv_srq,
    pub cap: ibv_qp_cap,
    pub qp_type: ibv_qp_type::Type,
    pub sq_sig_all: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ibv_qp_init_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_qp_init_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_qp_init_attr>(),
        64usize,
        concat!("Size of: ", stringify!(ibv_qp_init_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_qp_init_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_qp_init_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr),
            "::",
            stringify!(qp_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_cq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr),
            "::",
            stringify!(send_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_cq) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr),
            "::",
            stringify!(recv_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr),
            "::",
            stringify!(srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr),
            "::",
            stringify!(cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_type) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr),
            "::",
            stringify!(qp_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_sig_all) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr),
            "::",
            stringify!(sq_sig_all)
        )
    );
}
impl Default for ibv_qp_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_QP_INIT_ATTR_PD: ibv_qp_init_attr_mask = 1;
pub const IBV_QP_INIT_ATTR_XRCD: ibv_qp_init_attr_mask = 2;
pub const IBV_QP_INIT_ATTR_CREATE_FLAGS: ibv_qp_init_attr_mask = 4;
pub const IBV_QP_INIT_ATTR_MAX_TSO_HEADER: ibv_qp_init_attr_mask = 8;
pub const IBV_QP_INIT_ATTR_IND_TABLE: ibv_qp_init_attr_mask = 16;
pub const IBV_QP_INIT_ATTR_RX_HASH: ibv_qp_init_attr_mask = 32;
pub const IBV_QP_INIT_ATTR_SEND_OPS_FLAGS: ibv_qp_init_attr_mask = 64;
pub type ibv_qp_init_attr_mask = ::std::os::raw::c_uint;
pub const IBV_QP_CREATE_BLOCK_SELF_MCAST_LB: ibv_qp_create_flags = 2;
pub const IBV_QP_CREATE_SCATTER_FCS: ibv_qp_create_flags = 256;
pub const IBV_QP_CREATE_CVLAN_STRIPPING: ibv_qp_create_flags = 512;
pub const IBV_QP_CREATE_SOURCE_QPN: ibv_qp_create_flags = 1024;
pub const IBV_QP_CREATE_PCI_WRITE_END_PADDING: ibv_qp_create_flags = 2048;
pub type ibv_qp_create_flags = ::std::os::raw::c_uint;
pub const IBV_QP_EX_WITH_RDMA_WRITE: ibv_qp_create_send_ops_flags = 1;
pub const IBV_QP_EX_WITH_RDMA_WRITE_WITH_IMM: ibv_qp_create_send_ops_flags = 2;
pub const IBV_QP_EX_WITH_SEND: ibv_qp_create_send_ops_flags = 4;
pub const IBV_QP_EX_WITH_SEND_WITH_IMM: ibv_qp_create_send_ops_flags = 8;
pub const IBV_QP_EX_WITH_RDMA_READ: ibv_qp_create_send_ops_flags = 16;
pub const IBV_QP_EX_WITH_ATOMIC_CMP_AND_SWP: ibv_qp_create_send_ops_flags = 32;
pub const IBV_QP_EX_WITH_ATOMIC_FETCH_AND_ADD: ibv_qp_create_send_ops_flags = 64;
pub const IBV_QP_EX_WITH_LOCAL_INV: ibv_qp_create_send_ops_flags = 128;
pub const IBV_QP_EX_WITH_BIND_MW: ibv_qp_create_send_ops_flags = 256;
pub const IBV_QP_EX_WITH_SEND_WITH_INV: ibv_qp_create_send_ops_flags = 512;
pub const IBV_QP_EX_WITH_TSO: ibv_qp_create_send_ops_flags = 1024;
pub const IBV_QP_EX_WITH_FLUSH: ibv_qp_create_send_ops_flags = 2048;
pub const IBV_QP_EX_WITH_ATOMIC_WRITE: ibv_qp_create_send_ops_flags = 4096;
pub type ibv_qp_create_send_ops_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_rx_hash_conf {
    pub rx_hash_function: u8,
    pub rx_hash_key_len: u8,
    pub rx_hash_key: *mut u8,
    pub rx_hash_fields_mask: u64,
}
#[test]
fn bindgen_test_layout_ibv_rx_hash_conf() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_rx_hash_conf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_rx_hash_conf>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_rx_hash_conf))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_rx_hash_conf>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_rx_hash_conf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_hash_function) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rx_hash_conf),
            "::",
            stringify!(rx_hash_function)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_hash_key_len) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rx_hash_conf),
            "::",
            stringify!(rx_hash_key_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_hash_key) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rx_hash_conf),
            "::",
            stringify!(rx_hash_key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_hash_fields_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_rx_hash_conf),
            "::",
            stringify!(rx_hash_fields_mask)
        )
    );
}
impl Default for ibv_rx_hash_conf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_qp_init_attr_ex {
    pub qp_context: *mut ::std::os::raw::c_void,
    pub send_cq: *mut ibv_cq,
    pub recv_cq: *mut ibv_cq,
    pub srq: *mut ibv_srq,
    pub cap: ibv_qp_cap,
    pub qp_type: ibv_qp_type::Type,
    pub sq_sig_all: ::std::os::raw::c_int,
    pub comp_mask: u32,
    pub pd: *mut ibv_pd,
    pub xrcd: *mut ibv_xrcd,
    pub create_flags: u32,
    pub max_tso_header: u16,
    pub rwq_ind_tbl: *mut ibv_rwq_ind_table,
    pub rx_hash_conf: ibv_rx_hash_conf,
    pub source_qpn: u32,
    pub send_ops_flags: u64,
}
#[test]
fn bindgen_test_layout_ibv_qp_init_attr_ex() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_qp_init_attr_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_qp_init_attr_ex>(),
        136usize,
        concat!("Size of: ", stringify!(ibv_qp_init_attr_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_qp_init_attr_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_qp_init_attr_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(qp_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_cq) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(send_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_cq) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(recv_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_type) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(qp_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_sig_all) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(sq_sig_all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrcd) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(xrcd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_flags) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(create_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_tso_header) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(max_tso_header)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rwq_ind_tbl) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(rwq_ind_tbl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rx_hash_conf) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(rx_hash_conf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).source_qpn) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(source_qpn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_ops_flags) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_init_attr_ex),
            "::",
            stringify!(send_ops_flags)
        )
    );
}
impl Default for ibv_qp_init_attr_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_QP_OPEN_ATTR_NUM: ibv_qp_open_attr_mask = 1;
pub const IBV_QP_OPEN_ATTR_XRCD: ibv_qp_open_attr_mask = 2;
pub const IBV_QP_OPEN_ATTR_CONTEXT: ibv_qp_open_attr_mask = 4;
pub const IBV_QP_OPEN_ATTR_TYPE: ibv_qp_open_attr_mask = 8;
pub const IBV_QP_OPEN_ATTR_RESERVED: ibv_qp_open_attr_mask = 16;
pub type ibv_qp_open_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_qp_open_attr {
    pub comp_mask: u32,
    pub qp_num: u32,
    pub xrcd: *mut ibv_xrcd,
    pub qp_context: *mut ::std::os::raw::c_void,
    pub qp_type: ibv_qp_type::Type,
}
#[test]
fn bindgen_test_layout_ibv_qp_open_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_qp_open_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_qp_open_attr>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_qp_open_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_qp_open_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_qp_open_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_open_attr),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_num) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_open_attr),
            "::",
            stringify!(qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrcd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_open_attr),
            "::",
            stringify!(xrcd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_open_attr),
            "::",
            stringify!(qp_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_open_attr),
            "::",
            stringify!(qp_type)
        )
    );
}
impl Default for ibv_qp_open_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_STATE: ibv_qp_attr_mask = ibv_qp_attr_mask(1);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_CUR_STATE: ibv_qp_attr_mask = ibv_qp_attr_mask(2);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_EN_SQD_ASYNC_NOTIFY: ibv_qp_attr_mask = ibv_qp_attr_mask(4);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_ACCESS_FLAGS: ibv_qp_attr_mask = ibv_qp_attr_mask(8);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_PKEY_INDEX: ibv_qp_attr_mask = ibv_qp_attr_mask(16);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_PORT: ibv_qp_attr_mask = ibv_qp_attr_mask(32);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_QKEY: ibv_qp_attr_mask = ibv_qp_attr_mask(64);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_AV: ibv_qp_attr_mask = ibv_qp_attr_mask(128);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_PATH_MTU: ibv_qp_attr_mask = ibv_qp_attr_mask(256);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_TIMEOUT: ibv_qp_attr_mask = ibv_qp_attr_mask(512);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_RETRY_CNT: ibv_qp_attr_mask = ibv_qp_attr_mask(1024);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_RNR_RETRY: ibv_qp_attr_mask = ibv_qp_attr_mask(2048);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_RQ_PSN: ibv_qp_attr_mask = ibv_qp_attr_mask(4096);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_MAX_QP_RD_ATOMIC: ibv_qp_attr_mask = ibv_qp_attr_mask(8192);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_ALT_PATH: ibv_qp_attr_mask = ibv_qp_attr_mask(16384);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_MIN_RNR_TIMER: ibv_qp_attr_mask = ibv_qp_attr_mask(32768);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_SQ_PSN: ibv_qp_attr_mask = ibv_qp_attr_mask(65536);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_MAX_DEST_RD_ATOMIC: ibv_qp_attr_mask = ibv_qp_attr_mask(131072);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_PATH_MIG_STATE: ibv_qp_attr_mask = ibv_qp_attr_mask(262144);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_CAP: ibv_qp_attr_mask = ibv_qp_attr_mask(524288);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_DEST_QPN: ibv_qp_attr_mask = ibv_qp_attr_mask(1048576);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_RATE_LIMIT: ibv_qp_attr_mask = ibv_qp_attr_mask(33554432);
}
impl ::std::ops::BitOr<ibv_qp_attr_mask> for ibv_qp_attr_mask {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_qp_attr_mask(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_qp_attr_mask {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_qp_attr_mask) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_qp_attr_mask> for ibv_qp_attr_mask {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_qp_attr_mask(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_qp_attr_mask {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_qp_attr_mask) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_qp_attr_mask(pub ::std::os::raw::c_uint);
pub const IBV_QUERY_QP_DATA_IN_ORDER_RETURN_CAPS: ibv_query_qp_data_in_order_flags = 1;
pub type ibv_query_qp_data_in_order_flags = ::std::os::raw::c_uint;
pub const IBV_QUERY_QP_DATA_IN_ORDER_WHOLE_MSG: ibv_query_qp_data_in_order_caps = 1;
pub const IBV_QUERY_QP_DATA_IN_ORDER_ALIGNED_128_BYTES: ibv_query_qp_data_in_order_caps = 2;
pub type ibv_query_qp_data_in_order_caps = ::std::os::raw::c_uint;
pub mod ibv_qp_state {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_QPS_RESET: Type = 0;
    pub const IBV_QPS_INIT: Type = 1;
    pub const IBV_QPS_RTR: Type = 2;
    pub const IBV_QPS_RTS: Type = 3;
    pub const IBV_QPS_SQD: Type = 4;
    pub const IBV_QPS_SQE: Type = 5;
    pub const IBV_QPS_ERR: Type = 6;
    pub const IBV_QPS_UNKNOWN: Type = 7;
}
pub const IBV_MIG_MIGRATED: ibv_mig_state = 0;
pub const IBV_MIG_REARM: ibv_mig_state = 1;
pub const IBV_MIG_ARMED: ibv_mig_state = 2;
pub type ibv_mig_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_qp_attr {
    pub qp_state: ibv_qp_state::Type,
    pub cur_qp_state: ibv_qp_state::Type,
    pub path_mtu: ibv_mtu,
    pub path_mig_state: ibv_mig_state,
    pub qkey: u32,
    pub rq_psn: u32,
    pub sq_psn: u32,
    pub dest_qp_num: u32,
    pub qp_access_flags: ::std::os::raw::c_uint,
    pub cap: ibv_qp_cap,
    pub ah_attr: ibv_ah_attr,
    pub alt_ah_attr: ibv_ah_attr,
    pub pkey_index: u16,
    pub alt_pkey_index: u16,
    pub en_sqd_async_notify: u8,
    pub sq_draining: u8,
    pub max_rd_atomic: u8,
    pub max_dest_rd_atomic: u8,
    pub min_rnr_timer: u8,
    pub port_num: u8,
    pub timeout: u8,
    pub retry_cnt: u8,
    pub rnr_retry: u8,
    pub alt_port_num: u8,
    pub alt_timeout: u8,
    pub rate_limit: u32,
}
#[test]
fn bindgen_test_layout_ibv_qp_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_qp_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_qp_attr>(),
        144usize,
        concat!("Size of: ", stringify!(ibv_qp_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_qp_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_qp_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_state) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(qp_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cur_qp_state) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(cur_qp_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_mtu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(path_mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_mig_state) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(path_mig_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(qkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rq_psn) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(rq_psn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_psn) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(sq_psn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dest_qp_num) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(dest_qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_access_flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(qp_access_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cap) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(cap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ah_attr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(ah_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_ah_attr) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(alt_ah_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_index) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_pkey_index) as usize - ptr as usize },
        122usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(alt_pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).en_sqd_async_notify) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(en_sqd_async_notify)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sq_draining) as usize - ptr as usize },
        125usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(sq_draining)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_rd_atomic) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(max_rd_atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_dest_rd_atomic) as usize - ptr as usize },
        127usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(max_dest_rd_atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_rnr_timer) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(min_rnr_timer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_num) as usize - ptr as usize },
        129usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retry_cnt) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(retry_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rnr_retry) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(rnr_retry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_port_num) as usize - ptr as usize },
        133usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(alt_port_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alt_timeout) as usize - ptr as usize },
        134usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(alt_timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_limit) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_attr),
            "::",
            stringify!(rate_limit)
        )
    );
}
impl Default for ibv_qp_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_qp_rate_limit_attr {
    pub rate_limit: u32,
    pub max_burst_sz: u32,
    pub typical_pkt_sz: u16,
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_qp_rate_limit_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_qp_rate_limit_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_qp_rate_limit_attr>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_qp_rate_limit_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_qp_rate_limit_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_qp_rate_limit_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_limit) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_rate_limit_attr),
            "::",
            stringify!(rate_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_burst_sz) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_rate_limit_attr),
            "::",
            stringify!(max_burst_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typical_pkt_sz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_rate_limit_attr),
            "::",
            stringify!(typical_pkt_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_rate_limit_attr),
            "::",
            stringify!(comp_mask)
        )
    );
}
pub mod ibv_wr_opcode {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_WR_RDMA_WRITE: Type = 0;
    pub const IBV_WR_RDMA_WRITE_WITH_IMM: Type = 1;
    pub const IBV_WR_SEND: Type = 2;
    pub const IBV_WR_SEND_WITH_IMM: Type = 3;
    pub const IBV_WR_RDMA_READ: Type = 4;
    pub const IBV_WR_ATOMIC_CMP_AND_SWP: Type = 5;
    pub const IBV_WR_ATOMIC_FETCH_AND_ADD: Type = 6;
    pub const IBV_WR_LOCAL_INV: Type = 7;
    pub const IBV_WR_BIND_MW: Type = 8;
    pub const IBV_WR_SEND_WITH_INV: Type = 9;
    pub const IBV_WR_TSO: Type = 10;
    pub const IBV_WR_DRIVER1: Type = 11;
    pub const IBV_WR_FLUSH: Type = 14;
    pub const IBV_WR_ATOMIC_WRITE: Type = 15;
}
impl ibv_send_flags {
    pub const IBV_SEND_FENCE: ibv_send_flags = ibv_send_flags(1);
}
impl ibv_send_flags {
    pub const IBV_SEND_SIGNALED: ibv_send_flags = ibv_send_flags(2);
}
impl ibv_send_flags {
    pub const IBV_SEND_SOLICITED: ibv_send_flags = ibv_send_flags(4);
}
impl ibv_send_flags {
    pub const IBV_SEND_INLINE: ibv_send_flags = ibv_send_flags(8);
}
impl ibv_send_flags {
    pub const IBV_SEND_IP_CSUM: ibv_send_flags = ibv_send_flags(16);
}
impl ::std::ops::BitOr<ibv_send_flags> for ibv_send_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_send_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_send_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_send_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_send_flags> for ibv_send_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_send_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_send_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_send_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_send_flags(pub ::std::os::raw::c_uint);
pub const IBV_FLUSH_GLOBAL: ibv_placement_type = 1;
pub const IBV_FLUSH_PERSISTENT: ibv_placement_type = 2;
pub type ibv_placement_type = ::std::os::raw::c_uint;
pub const IBV_FLUSH_RANGE: ibv_selectivity_level = 0;
pub const IBV_FLUSH_MR: ibv_selectivity_level = 1;
pub type ibv_selectivity_level = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_data_buf {
    pub addr: *mut ::std::os::raw::c_void,
    pub length: usize,
}
#[test]
fn bindgen_test_layout_ibv_data_buf() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_data_buf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_data_buf>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_data_buf))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_data_buf>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_data_buf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_data_buf),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_data_buf),
            "::",
            stringify!(length)
        )
    );
}
impl Default for ibv_data_buf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_sge {
    pub addr: u64,
    pub length: u32,
    pub lkey: u32,
}
#[test]
fn bindgen_test_layout_ibv_sge() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_sge> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_sge>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_sge))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_sge>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_sge))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sge),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sge),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lkey) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sge),
            "::",
            stringify!(lkey)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_send_wr {
    pub wr_id: u64,
    pub next: *mut ibv_send_wr,
    pub sg_list: *mut ibv_sge,
    pub num_sge: ::std::os::raw::c_int,
    pub opcode: ibv_wr_opcode::Type,
    pub send_flags: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: ibv_send_wr__bindgen_ty_1,
    pub wr: ibv_send_wr__bindgen_ty_2,
    pub qp_type: ibv_send_wr__bindgen_ty_3,
    pub __bindgen_anon_2: ibv_send_wr__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_send_wr__bindgen_ty_1 {
    pub imm_data: __be32,
    pub invalidate_rkey: u32,
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_send_wr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_send_wr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imm_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_1),
            "::",
            stringify!(imm_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).invalidate_rkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_1),
            "::",
            stringify!(invalidate_rkey)
        )
    );
}
impl Default for ibv_send_wr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_send_wr__bindgen_ty_2 {
    pub rdma: ibv_send_wr__bindgen_ty_2__bindgen_ty_1,
    pub atomic: ibv_send_wr__bindgen_ty_2__bindgen_ty_2,
    pub ud: ibv_send_wr__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_2__bindgen_ty_1 {
    pub remote_addr: u64,
    pub rkey: u32,
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(rkey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_2__bindgen_ty_2 {
    pub remote_addr: u64,
    pub compare_add: u64,
    pub swap: u64,
    pub rkey: u32,
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_2__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_2__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_2>(),
        32usize,
        concat!(
            "Size of: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(remote_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compare_add) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(compare_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swap) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(swap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(rkey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_2__bindgen_ty_3 {
    pub ah: *mut ibv_ah,
    pub remote_qpn: u32,
    pub remote_qkey: u32,
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_2__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_2__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ah) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_qpn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(remote_qpn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_qkey) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2__bindgen_ty_3),
            "::",
            stringify!(remote_qkey)
        )
    );
}
impl Default for ibv_send_wr__bindgen_ty_2__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_send_wr__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_send_wr__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rdma) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2),
            "::",
            stringify!(rdma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).atomic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2),
            "::",
            stringify!(atomic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ud) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_2),
            "::",
            stringify!(ud)
        )
    );
}
impl Default for ibv_send_wr__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_send_wr__bindgen_ty_3 {
    pub xrc: ibv_send_wr__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_3__bindgen_ty_1 {
    pub remote_srqn: u32,
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_3__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_3__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_3__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(ibv_send_wr__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_3__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ibv_send_wr__bindgen_ty_3__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).remote_srqn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_3__bindgen_ty_1),
            "::",
            stringify!(remote_srqn)
        )
    );
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_3>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_send_wr__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_send_wr__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xrc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_3),
            "::",
            stringify!(xrc)
        )
    );
}
impl Default for ibv_send_wr__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_send_wr__bindgen_ty_4 {
    pub bind_mw: ibv_send_wr__bindgen_ty_4__bindgen_ty_1,
    pub tso: ibv_send_wr__bindgen_ty_4__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_4__bindgen_ty_1 {
    pub mw: *mut ibv_mw,
    pub rkey: u32,
    pub bind_info: ibv_mw_bind_info,
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_4__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_4__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_4__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_4__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(mw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(rkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bind_info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_1),
            "::",
            stringify!(bind_info)
        )
    );
}
impl Default for ibv_send_wr__bindgen_ty_4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_4__bindgen_ty_2 {
    pub hdr: *mut ::std::os::raw::c_void,
    pub hdr_sz: u16,
    pub mss: u16,
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_4__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_4__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_4__bindgen_ty_2>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_4__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_2),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr_sz) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_2),
            "::",
            stringify!(hdr_sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mss) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_4__bindgen_ty_2),
            "::",
            stringify!(mss)
        )
    );
}
impl Default for ibv_send_wr__bindgen_ty_4__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_send_wr__bindgen_ty_4() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr__bindgen_ty_4> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr__bindgen_ty_4>(),
        48usize,
        concat!("Size of: ", stringify!(ibv_send_wr__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_send_wr__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bind_mw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_4),
            "::",
            stringify!(bind_mw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tso) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr__bindgen_ty_4),
            "::",
            stringify!(tso)
        )
    );
}
impl Default for ibv_send_wr__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_send_wr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_send_wr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_send_wr>(),
        128usize,
        concat!("Size of: ", stringify!(ibv_send_wr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_send_wr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_send_wr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_list) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr),
            "::",
            stringify!(sg_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sge) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr),
            "::",
            stringify!(num_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr),
            "::",
            stringify!(send_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr),
            "::",
            stringify!(wr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_type) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_send_wr),
            "::",
            stringify!(qp_type)
        )
    );
}
impl Default for ibv_send_wr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_recv_wr {
    pub wr_id: u64,
    pub next: *mut ibv_recv_wr,
    pub sg_list: *mut ibv_sge,
    pub num_sge: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ibv_recv_wr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_recv_wr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_recv_wr>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_recv_wr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_recv_wr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_recv_wr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_recv_wr),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_recv_wr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_list) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_recv_wr),
            "::",
            stringify!(sg_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sge) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_recv_wr),
            "::",
            stringify!(num_sge)
        )
    );
}
impl Default for ibv_recv_wr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_WR_TAG_ADD: ibv_ops_wr_opcode = 0;
pub const IBV_WR_TAG_DEL: ibv_ops_wr_opcode = 1;
pub const IBV_WR_TAG_SYNC: ibv_ops_wr_opcode = 2;
pub type ibv_ops_wr_opcode = ::std::os::raw::c_uint;
pub const IBV_OPS_SIGNALED: ibv_ops_flags = 1;
pub const IBV_OPS_TM_SYNC: ibv_ops_flags = 2;
pub type ibv_ops_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_ops_wr {
    pub wr_id: u64,
    pub next: *mut ibv_ops_wr,
    pub opcode: ibv_ops_wr_opcode,
    pub flags: ::std::os::raw::c_int,
    pub tm: ibv_ops_wr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_ops_wr__bindgen_ty_1 {
    pub unexpected_cnt: u32,
    pub handle: u32,
    pub add: ibv_ops_wr__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_ops_wr__bindgen_ty_1__bindgen_ty_1 {
    pub recv_wr_id: u64,
    pub sg_list: *mut ibv_sge,
    pub num_sge: ::std::os::raw::c_int,
    pub tag: u64,
    pub mask: u64,
}
#[test]
fn bindgen_test_layout_ibv_ops_wr__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_ops_wr__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_ops_wr__bindgen_ty_1__bindgen_ty_1>(),
        40usize,
        concat!(
            "Size of: ",
            stringify!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_ops_wr__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(recv_wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sg_list) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sg_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_sge) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(num_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_ops_wr__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_ops_wr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_ops_wr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_ops_wr__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(ibv_ops_wr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_ops_wr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_ops_wr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unexpected_cnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr__bindgen_ty_1),
            "::",
            stringify!(unexpected_cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).add) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr__bindgen_ty_1),
            "::",
            stringify!(add)
        )
    );
}
impl Default for ibv_ops_wr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_ops_wr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_ops_wr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_ops_wr>(),
        72usize,
        concat!("Size of: ", stringify!(ibv_ops_wr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_ops_wr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_ops_wr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opcode) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tm) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ops_wr),
            "::",
            stringify!(tm)
        )
    );
}
impl Default for ibv_ops_wr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mw_bind {
    pub wr_id: u64,
    pub send_flags: ::std::os::raw::c_uint,
    pub bind_info: ibv_mw_bind_info,
}
#[test]
fn bindgen_test_layout_ibv_mw_bind() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_mw_bind> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_mw_bind>(),
        48usize,
        concat!("Size of: ", stringify!(ibv_mw_bind))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_mw_bind>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_mw_bind))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw_bind),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw_bind),
            "::",
            stringify!(send_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bind_info) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_mw_bind),
            "::",
            stringify!(bind_info)
        )
    );
}
impl Default for ibv_mw_bind {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_srq {
    pub context: *mut ibv_context,
    pub srq_context: *mut ::std::os::raw::c_void,
    pub pd: *mut ibv_pd,
    pub handle: u32,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub events_completed: u32,
}
#[test]
fn bindgen_test_layout_ibv_srq() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_srq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_srq>(),
        128usize,
        concat!("Size of: ", stringify!(ibv_srq))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_srq>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_srq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq_context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq),
            "::",
            stringify!(srq_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events_completed) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_srq),
            "::",
            stringify!(events_completed)
        )
    );
}
impl Default for ibv_srq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_wq {
    pub context: *mut ibv_context,
    pub wq_context: *mut ::std::os::raw::c_void,
    pub pd: *mut ibv_pd,
    pub cq: *mut ibv_cq,
    pub wq_num: u32,
    pub handle: u32,
    pub state: ibv_wq_state,
    pub wq_type: ibv_wq_type,
    pub post_recv: ::std::option::Option<
        unsafe extern "C" fn(
            current: *mut ibv_wq,
            recv_wr: *mut ibv_recv_wr,
            bad_recv_wr: *mut *mut ibv_recv_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub events_completed: u32,
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_wq() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_wq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_wq>(),
        152usize,
        concat!("Size of: ", stringify!(ibv_wq))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_wq>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_wq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(wq_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_num) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(wq_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wq_type) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(wq_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_recv) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(post_recv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events_completed) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(events_completed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wq),
            "::",
            stringify!(comp_mask)
        )
    );
}
impl Default for ibv_wq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_qp {
    pub context: *mut ibv_context,
    pub qp_context: *mut ::std::os::raw::c_void,
    pub pd: *mut ibv_pd,
    pub send_cq: *mut ibv_cq,
    pub recv_cq: *mut ibv_cq,
    pub srq: *mut ibv_srq,
    pub handle: u32,
    pub qp_num: u32,
    pub state: ibv_qp_state::Type,
    pub qp_type: ibv_qp_type::Type,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub events_completed: u32,
}
#[test]
fn bindgen_test_layout_ibv_qp() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_qp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_qp>(),
        160usize,
        concat!("Size of: ", stringify!(ibv_qp))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_qp>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_qp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(qp_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).send_cq) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(send_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recv_cq) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(recv_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).srq) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_num) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_type) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(qp_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).events_completed) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp),
            "::",
            stringify!(events_completed)
        )
    );
}
impl Default for ibv_qp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_qp_ex {
    pub qp_base: ibv_qp,
    pub comp_mask: u64,
    pub wr_id: u64,
    pub wr_flags: ::std::os::raw::c_uint,
    pub wr_atomic_cmp_swp: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            rkey: u32,
            remote_addr: u64,
            compare: u64,
            swap: u64,
        ),
    >,
    pub wr_atomic_fetch_add: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, rkey: u32, remote_addr: u64, add: u64),
    >,
    pub wr_bind_mw: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            mw: *mut ibv_mw,
            rkey: u32,
            bind_info: *const ibv_mw_bind_info,
        ),
    >,
    pub wr_local_inv:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex, invalidate_rkey: u32)>,
    pub wr_rdma_read: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, rkey: u32, remote_addr: u64),
    >,
    pub wr_rdma_write: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, rkey: u32, remote_addr: u64),
    >,
    pub wr_rdma_write_imm: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, rkey: u32, remote_addr: u64, imm_data: __be32),
    >,
    pub wr_send: ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex)>,
    pub wr_send_imm:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex, imm_data: __be32)>,
    pub wr_send_inv:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex, invalidate_rkey: u32)>,
    pub wr_send_tso: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            hdr: *mut ::std::os::raw::c_void,
            hdr_sz: u16,
            mss: u16,
        ),
    >,
    pub wr_set_ud_addr: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            ah: *mut ibv_ah,
            remote_qpn: u32,
            remote_qkey: u32,
        ),
    >,
    pub wr_set_xrc_srqn:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex, remote_srqn: u32)>,
    pub wr_set_inline_data: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, addr: *mut ::std::os::raw::c_void, length: usize),
    >,
    pub wr_set_inline_data_list: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, num_buf: usize, buf_list: *const ibv_data_buf),
    >,
    pub wr_set_sge: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, lkey: u32, addr: u64, length: u32),
    >,
    pub wr_set_sge_list: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, num_sge: usize, sg_list: *const ibv_sge),
    >,
    pub wr_start: ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex)>,
    pub wr_complete:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex) -> ::std::os::raw::c_int>,
    pub wr_abort: ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex)>,
    pub wr_atomic_write: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            rkey: u32,
            remote_addr: u64,
            atomic_wr: *const ::std::os::raw::c_void,
        ),
    >,
    pub wr_flush: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            rkey: u32,
            remote_addr: u64,
            len: usize,
            type_: u8,
            level: u8,
        ),
    >,
}
#[test]
fn bindgen_test_layout_ibv_qp_ex() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_qp_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_qp_ex>(),
        360usize,
        concat!("Size of: ", stringify!(ibv_qp_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_qp_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_qp_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(qp_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_flags) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_atomic_cmp_swp) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_atomic_cmp_swp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_atomic_fetch_add) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_atomic_fetch_add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_bind_mw) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_bind_mw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_local_inv) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_local_inv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_rdma_read) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_rdma_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_rdma_write) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_rdma_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_rdma_write_imm) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_rdma_write_imm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_send) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_send)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_send_imm) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_send_imm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_send_inv) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_send_inv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_send_tso) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_send_tso)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_set_ud_addr) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_set_ud_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_set_xrc_srqn) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_set_xrc_srqn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_set_inline_data) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_set_inline_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_set_inline_data_list) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_set_inline_data_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_set_sge) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_set_sge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_set_sge_list) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_set_sge_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_start) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_complete) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_complete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_abort) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_abort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_atomic_write) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_atomic_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_flush) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_qp_ex),
            "::",
            stringify!(wr_flush)
        )
    );
}
impl Default for ibv_qp_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ibv_qp_to_qp_ex(qp: *mut ibv_qp) -> *mut ibv_qp_ex;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_ece {
    pub vendor_id: u32,
    pub options: u32,
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_ece() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_ece> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_ece>(),
        12usize,
        concat!("Size of: ", stringify!(ibv_ece))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_ece>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_ece))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vendor_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ece),
            "::",
            stringify!(vendor_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).options) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ece),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ece),
            "::",
            stringify!(comp_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_comp_channel {
    pub context: *mut ibv_context,
    pub fd: ::std::os::raw::c_int,
    pub refcnt: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ibv_comp_channel() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_comp_channel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_comp_channel>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_comp_channel))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_comp_channel>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_comp_channel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_comp_channel),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_comp_channel),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).refcnt) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_comp_channel),
            "::",
            stringify!(refcnt)
        )
    );
}
impl Default for ibv_comp_channel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_cq {
    pub context: *mut ibv_context,
    pub channel: *mut ibv_comp_channel,
    pub cq_context: *mut ::std::os::raw::c_void,
    pub handle: u32,
    pub cqe: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub comp_events_completed: u32,
    pub async_events_completed: u32,
}
#[test]
fn bindgen_test_layout_ibv_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_cq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_cq>(),
        128usize,
        concat!("Size of: ", stringify!(ibv_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_cq>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(cq_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqe) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_events_completed) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(comp_events_completed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_events_completed) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq),
            "::",
            stringify!(async_events_completed)
        )
    );
}
impl Default for ibv_cq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_poll_cq_attr {
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_poll_cq_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_poll_cq_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_poll_cq_attr>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_poll_cq_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_poll_cq_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_poll_cq_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_poll_cq_attr),
            "::",
            stringify!(comp_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_wc_tm_info {
    pub tag: u64,
    pub priv_: u32,
}
#[test]
fn bindgen_test_layout_ibv_wc_tm_info() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_wc_tm_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_wc_tm_info>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_wc_tm_info))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_wc_tm_info>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_wc_tm_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc_tm_info),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_wc_tm_info),
            "::",
            stringify!(priv_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_cq_ex {
    pub context: *mut ibv_context,
    pub channel: *mut ibv_comp_channel,
    pub cq_context: *mut ::std::os::raw::c_void,
    pub handle: u32,
    pub cqe: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub comp_events_completed: u32,
    pub async_events_completed: u32,
    pub comp_mask: u32,
    pub status: ibv_wc_status::Type,
    pub wr_id: u64,
    pub start_poll: ::std::option::Option<
        unsafe extern "C" fn(
            current: *mut ibv_cq_ex,
            attr: *mut ibv_poll_cq_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub next_poll: ::std::option::Option<
        unsafe extern "C" fn(current: *mut ibv_cq_ex) -> ::std::os::raw::c_int,
    >,
    pub end_poll: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex)>,
    pub read_opcode:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> ibv_wc_opcode::Type>,
    pub read_vendor_err:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_byte_len: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_imm_data:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> __be32>,
    pub read_qp_num: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_src_qp: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_wc_flags: ::std::option::Option<
        unsafe extern "C" fn(current: *mut ibv_cq_ex) -> ::std::os::raw::c_uint,
    >,
    pub read_slid: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_sl: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u8>,
    pub read_dlid_path_bits:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u8>,
    pub read_completion_ts:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u64>,
    pub read_cvlan: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u16>,
    pub read_flow_tag: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_tm_info: ::std::option::Option<
        unsafe extern "C" fn(current: *mut ibv_cq_ex, tm_info: *mut ibv_wc_tm_info),
    >,
    pub read_completion_wallclock_ns:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u64>,
}
#[test]
fn bindgen_test_layout_ibv_cq_ex() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_cq_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_cq_ex>(),
        288usize,
        concat!("Size of: ", stringify!(ibv_cq_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_cq_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_cq_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_context) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(cq_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqe) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cond) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_events_completed) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(comp_events_completed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_events_completed) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(async_events_completed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wr_id) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(wr_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).start_poll) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(start_poll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_poll) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(next_poll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_poll) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(end_poll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_opcode) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_opcode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_vendor_err) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_vendor_err)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_byte_len) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_byte_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_imm_data) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_imm_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_qp_num) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_qp_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_src_qp) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_src_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_wc_flags) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_wc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_slid) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_slid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_sl) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_dlid_path_bits) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_dlid_path_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_completion_ts) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_completion_ts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_cvlan) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_cvlan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_flow_tag) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_flow_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_tm_info) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_tm_info)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).read_completion_wallclock_ns) as usize - ptr as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_ex),
            "::",
            stringify!(read_completion_wallclock_ns)
        )
    );
}
impl Default for ibv_cq_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_CQ_ATTR_MODERATE: ibv_cq_attr_mask = 1;
pub const IBV_CQ_ATTR_RESERVED: ibv_cq_attr_mask = 2;
pub type ibv_cq_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_moderate_cq {
    pub cq_count: u16,
    pub cq_period: u16,
}
#[test]
fn bindgen_test_layout_ibv_moderate_cq() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_moderate_cq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_moderate_cq>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_moderate_cq))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_moderate_cq>(),
        2usize,
        concat!("Alignment of ", stringify!(ibv_moderate_cq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_moderate_cq),
            "::",
            stringify!(cq_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_period) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_moderate_cq),
            "::",
            stringify!(cq_period)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_modify_cq_attr {
    pub attr_mask: u32,
    pub moderate: ibv_moderate_cq,
}
#[test]
fn bindgen_test_layout_ibv_modify_cq_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_modify_cq_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_modify_cq_attr>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_modify_cq_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_modify_cq_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_modify_cq_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_modify_cq_attr),
            "::",
            stringify!(attr_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).moderate) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_modify_cq_attr),
            "::",
            stringify!(moderate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_ah {
    pub context: *mut ibv_context,
    pub pd: *mut ibv_pd,
    pub handle: u32,
}
#[test]
fn bindgen_test_layout_ibv_ah() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_ah> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_ah>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_ah))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_ah>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_ah))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_ah),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for ibv_ah {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_FLOW_ATTR_FLAGS_DONT_TRAP: ibv_flow_flags = 2;
pub const IBV_FLOW_ATTR_FLAGS_EGRESS: ibv_flow_flags = 4;
pub type ibv_flow_flags = ::std::os::raw::c_uint;
pub const IBV_FLOW_ATTR_NORMAL: ibv_flow_attr_type = 0;
pub const IBV_FLOW_ATTR_ALL_DEFAULT: ibv_flow_attr_type = 1;
pub const IBV_FLOW_ATTR_MC_DEFAULT: ibv_flow_attr_type = 2;
pub const IBV_FLOW_ATTR_SNIFFER: ibv_flow_attr_type = 3;
pub type ibv_flow_attr_type = ::std::os::raw::c_uint;
pub const IBV_FLOW_SPEC_ETH: ibv_flow_spec_type = 32;
pub const IBV_FLOW_SPEC_IPV4: ibv_flow_spec_type = 48;
pub const IBV_FLOW_SPEC_IPV6: ibv_flow_spec_type = 49;
pub const IBV_FLOW_SPEC_IPV4_EXT: ibv_flow_spec_type = 50;
pub const IBV_FLOW_SPEC_ESP: ibv_flow_spec_type = 52;
pub const IBV_FLOW_SPEC_TCP: ibv_flow_spec_type = 64;
pub const IBV_FLOW_SPEC_UDP: ibv_flow_spec_type = 65;
pub const IBV_FLOW_SPEC_VXLAN_TUNNEL: ibv_flow_spec_type = 80;
pub const IBV_FLOW_SPEC_GRE: ibv_flow_spec_type = 81;
pub const IBV_FLOW_SPEC_MPLS: ibv_flow_spec_type = 96;
pub const IBV_FLOW_SPEC_INNER: ibv_flow_spec_type = 256;
pub const IBV_FLOW_SPEC_ACTION_TAG: ibv_flow_spec_type = 4096;
pub const IBV_FLOW_SPEC_ACTION_DROP: ibv_flow_spec_type = 4097;
pub const IBV_FLOW_SPEC_ACTION_HANDLE: ibv_flow_spec_type = 4098;
pub const IBV_FLOW_SPEC_ACTION_COUNT: ibv_flow_spec_type = 4099;
pub type ibv_flow_spec_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_eth_filter {
    pub dst_mac: [u8; 6usize],
    pub src_mac: [u8; 6usize],
    pub ether_type: u16,
    pub vlan_tag: u16,
}
#[test]
fn bindgen_test_layout_ibv_flow_eth_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_eth_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_eth_filter>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_flow_eth_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_eth_filter>(),
        2usize,
        concat!("Alignment of ", stringify!(ibv_flow_eth_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_mac) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_eth_filter),
            "::",
            stringify!(dst_mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_mac) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_eth_filter),
            "::",
            stringify!(src_mac)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ether_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_eth_filter),
            "::",
            stringify!(ether_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vlan_tag) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_eth_filter),
            "::",
            stringify!(vlan_tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_eth {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_eth_filter,
    pub mask: ibv_flow_eth_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_eth() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_eth> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_eth>(),
        40usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_eth))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_eth>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_eth))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_eth),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_eth),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_eth),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_eth),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_eth {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_ipv4_filter {
    pub src_ip: u32,
    pub dst_ip: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow_ipv4_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_ipv4_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_ipv4_filter>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_flow_ipv4_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_ipv4_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_ipv4_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv4_filter),
            "::",
            stringify!(src_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_ip) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv4_filter),
            "::",
            stringify!(dst_ip)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_ipv4 {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_ipv4_filter,
    pub mask: ibv_flow_ipv4_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_ipv4() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_ipv4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_ipv4>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_ipv4))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_ipv4>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_ipv4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv4),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv4),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv4),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv4),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_ipv4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_ipv4_ext_filter {
    pub src_ip: u32,
    pub dst_ip: u32,
    pub proto: u8,
    pub tos: u8,
    pub ttl: u8,
    pub flags: u8,
}
#[test]
fn bindgen_test_layout_ibv_flow_ipv4_ext_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_ipv4_ext_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_ipv4_ext_filter>(),
        12usize,
        concat!("Size of: ", stringify!(ibv_flow_ipv4_ext_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_ipv4_ext_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_ipv4_ext_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv4_ext_filter),
            "::",
            stringify!(src_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_ip) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv4_ext_filter),
            "::",
            stringify!(dst_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv4_ext_filter),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tos) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv4_ext_filter),
            "::",
            stringify!(tos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ttl) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv4_ext_filter),
            "::",
            stringify!(ttl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv4_ext_filter),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_ipv4_ext {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_ipv4_ext_filter,
    pub mask: ibv_flow_ipv4_ext_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_ipv4_ext() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_ipv4_ext> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_ipv4_ext>(),
        32usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_ipv4_ext))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_ipv4_ext>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_ipv4_ext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv4_ext),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv4_ext),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv4_ext),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv4_ext),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_ipv4_ext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_ipv6_filter {
    pub src_ip: [u8; 16usize],
    pub dst_ip: [u8; 16usize],
    pub flow_label: u32,
    pub next_hdr: u8,
    pub traffic_class: u8,
    pub hop_limit: u8,
}
#[test]
fn bindgen_test_layout_ibv_flow_ipv6_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_ipv6_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_ipv6_filter>(),
        40usize,
        concat!("Size of: ", stringify!(ibv_flow_ipv6_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_ipv6_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_ipv6_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_ip) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv6_filter),
            "::",
            stringify!(src_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_ip) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv6_filter),
            "::",
            stringify!(dst_ip)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv6_filter),
            "::",
            stringify!(flow_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next_hdr) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv6_filter),
            "::",
            stringify!(next_hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize },
        37usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv6_filter),
            "::",
            stringify!(traffic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_ipv6_filter),
            "::",
            stringify!(hop_limit)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_ipv6 {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_ipv6_filter,
    pub mask: ibv_flow_ipv6_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_ipv6() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_ipv6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_ipv6>(),
        88usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_ipv6))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_ipv6>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_ipv6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv6),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv6),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv6),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_ipv6),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_ipv6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_esp_filter {
    pub spi: u32,
    pub seq: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow_esp_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_esp_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_esp_filter>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_flow_esp_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_esp_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_esp_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spi) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_esp_filter),
            "::",
            stringify!(spi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_esp_filter),
            "::",
            stringify!(seq)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_esp {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_esp_filter,
    pub mask: ibv_flow_esp_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_esp() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_esp> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_esp>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_esp))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_esp>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_esp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_esp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_esp),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_esp),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_esp),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_esp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_tcp_udp_filter {
    pub dst_port: u16,
    pub src_port: u16,
}
#[test]
fn bindgen_test_layout_ibv_flow_tcp_udp_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_tcp_udp_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_tcp_udp_filter>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_flow_tcp_udp_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_tcp_udp_filter>(),
        2usize,
        concat!("Alignment of ", stringify!(ibv_flow_tcp_udp_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dst_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_tcp_udp_filter),
            "::",
            stringify!(dst_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_tcp_udp_filter),
            "::",
            stringify!(src_port)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_tcp_udp {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_tcp_udp_filter,
    pub mask: ibv_flow_tcp_udp_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_tcp_udp() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_tcp_udp> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_tcp_udp>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_tcp_udp))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_tcp_udp>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_tcp_udp))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_tcp_udp),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_tcp_udp),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_tcp_udp),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_tcp_udp),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_tcp_udp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_gre_filter {
    pub c_ks_res0_ver: u16,
    pub protocol: u16,
    pub key: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow_gre_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_gre_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_gre_filter>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_flow_gre_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_gre_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_gre_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c_ks_res0_ver) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_gre_filter),
            "::",
            stringify!(c_ks_res0_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).protocol) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_gre_filter),
            "::",
            stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_gre_filter),
            "::",
            stringify!(key)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_gre {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_gre_filter,
    pub mask: ibv_flow_gre_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_gre() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_gre> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_gre>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_gre))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_gre>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_gre))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_gre),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_gre),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_gre),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_gre),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_gre {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_mpls_filter {
    pub label: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow_mpls_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_mpls_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_mpls_filter>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_flow_mpls_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_mpls_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_mpls_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_mpls_filter),
            "::",
            stringify!(label)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_mpls {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_mpls_filter,
    pub mask: ibv_flow_mpls_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_mpls() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_mpls> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_mpls>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_mpls))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_mpls>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_mpls))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_mpls),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_mpls),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_mpls),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_mpls),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_mpls {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_tunnel_filter {
    pub tunnel_id: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow_tunnel_filter() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_tunnel_filter> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_tunnel_filter>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_flow_tunnel_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_tunnel_filter>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_tunnel_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tunnel_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_tunnel_filter),
            "::",
            stringify!(tunnel_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_tunnel {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_tunnel_filter,
    pub mask: ibv_flow_tunnel_filter,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_tunnel() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_tunnel> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_tunnel>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_tunnel))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_tunnel>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_tunnel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_tunnel),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_tunnel),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_tunnel),
            "::",
            stringify!(val)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_tunnel),
            "::",
            stringify!(mask)
        )
    );
}
impl Default for ibv_flow_spec_tunnel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_action_tag {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub tag_id: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_action_tag() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_action_tag> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_action_tag>(),
        12usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_action_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_action_tag>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_action_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_action_tag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_action_tag),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_action_tag),
            "::",
            stringify!(tag_id)
        )
    );
}
impl Default for ibv_flow_spec_action_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_action_drop {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_action_drop() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_action_drop> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_action_drop>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_action_drop))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_action_drop>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_action_drop))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_action_drop),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_action_drop),
            "::",
            stringify!(size)
        )
    );
}
impl Default for ibv_flow_spec_action_drop {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_action_handle {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub action: *const ibv_flow_action,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_action_handle() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_action_handle> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_action_handle>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_action_handle))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_action_handle>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_action_handle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_action_handle),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_action_handle),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).action) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_action_handle),
            "::",
            stringify!(action)
        )
    );
}
impl Default for ibv_flow_spec_action_handle {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_counter_action {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub counters: *mut ibv_counters,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec_counter_action() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec_counter_action> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec_counter_action>(),
        16usize,
        concat!("Size of: ", stringify!(ibv_flow_spec_counter_action))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec_counter_action>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec_counter_action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_counter_action),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_counter_action),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counters) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec_counter_action),
            "::",
            stringify!(counters)
        )
    );
}
impl Default for ibv_flow_spec_counter_action {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_flow_spec {
    pub __bindgen_anon_1: ibv_flow_spec__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_flow_spec__bindgen_ty_1 {
    pub hdr: ibv_flow_spec__bindgen_ty_1__bindgen_ty_1,
    pub eth: ibv_flow_spec_eth,
    pub ipv4: ibv_flow_spec_ipv4,
    pub tcp_udp: ibv_flow_spec_tcp_udp,
    pub ipv4_ext: ibv_flow_spec_ipv4_ext,
    pub ipv6: ibv_flow_spec_ipv6,
    pub esp: ibv_flow_spec_esp,
    pub tunnel: ibv_flow_spec_tunnel,
    pub gre: ibv_flow_spec_gre,
    pub mpls: ibv_flow_spec_mpls,
    pub flow_tag: ibv_flow_spec_action_tag,
    pub drop: ibv_flow_spec_action_drop,
    pub handle: ibv_flow_spec_action_handle,
    pub flow_count: ibv_flow_spec_counter_action,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec__bindgen_ty_1__bindgen_ty_1 {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
}
#[test]
fn bindgen_test_layout_ibv_flow_spec__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(ibv_flow_spec__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(ibv_flow_spec__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(size)
        )
    );
}
impl Default for ibv_flow_spec__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_flow_spec__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_spec__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec__bindgen_ty_1>(),
        88usize,
        concat!("Size of: ", stringify!(ibv_flow_spec__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hdr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(hdr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eth) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(eth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv4) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(ipv4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tcp_udp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(tcp_udp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv4_ext) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(ipv4_ext)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(ipv6)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(esp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tunnel) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(tunnel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gre) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(gre)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mpls) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(mpls)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_tag) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(flow_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drop) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(drop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_spec__bindgen_ty_1),
            "::",
            stringify!(flow_count)
        )
    );
}
impl Default for ibv_flow_spec__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ibv_flow_spec() {
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_spec>(),
        88usize,
        concat!("Size of: ", stringify!(ibv_flow_spec))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_spec>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_flow_spec))
    );
}
impl Default for ibv_flow_spec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_attr {
    pub comp_mask: u32,
    pub type_: ibv_flow_attr_type,
    pub size: u16,
    pub priority: u16,
    pub num_of_specs: u8,
    pub port: u8,
    pub flags: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_attr>(),
        20usize,
        concat!("Size of: ", stringify!(ibv_flow_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_flow_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_attr),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_attr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_attr),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priority) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_attr),
            "::",
            stringify!(priority)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_of_specs) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_attr),
            "::",
            stringify!(num_of_specs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_attr),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_attr),
            "::",
            stringify!(flags)
        )
    );
}
impl Default for ibv_flow_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow {
    pub comp_mask: u32,
    pub context: *mut ibv_context,
    pub handle: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_flow))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_flow))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow),
            "::",
            stringify!(context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handle) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow),
            "::",
            stringify!(handle)
        )
    );
}
impl Default for ibv_flow {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_action {
    pub context: *mut ibv_context,
}
#[test]
fn bindgen_test_layout_ibv_flow_action() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_action> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_action>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_flow_action))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_action>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_flow_action))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action),
            "::",
            stringify!(context)
        )
    );
}
impl Default for ibv_flow_action {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_FLOW_ACTION_ESP_MASK_ESN: ibv_flow_action_esp_mask = 1;
pub type ibv_flow_action_esp_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_action_esp_attr {
    pub esp_attr: *mut ib_uverbs_flow_action_esp,
    pub keymat_proto: ib_uverbs_flow_action_esp_keymat,
    pub keymat_len: u16,
    pub keymat_ptr: *mut ::std::os::raw::c_void,
    pub replay_proto: ib_uverbs_flow_action_esp_replay,
    pub replay_len: u16,
    pub replay_ptr: *mut ::std::os::raw::c_void,
    pub esp_encap: *mut ib_uverbs_flow_action_esp_encap,
    pub comp_mask: u32,
    pub esn: u32,
}
#[test]
fn bindgen_test_layout_ibv_flow_action_esp_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_flow_action_esp_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_flow_action_esp_attr>(),
        56usize,
        concat!("Size of: ", stringify!(ibv_flow_action_esp_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_flow_action_esp_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_flow_action_esp_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esp_attr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(esp_attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keymat_proto) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(keymat_proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keymat_len) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(keymat_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keymat_ptr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(keymat_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replay_proto) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(replay_proto)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replay_len) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(replay_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).replay_ptr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(replay_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esp_encap) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(esp_encap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).esn) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_flow_action_esp_attr),
            "::",
            stringify!(esn)
        )
    );
}
impl Default for ibv_flow_action_esp_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ibv_device_ops {
    pub _dummy1: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut ibv_device,
            cmd_fd: ::std::os::raw::c_int,
        ) -> *mut ibv_context,
    >,
    pub _dummy2: ::std::option::Option<unsafe extern "C" fn(context: *mut ibv_context)>,
}
#[test]
fn bindgen_test_layout__ibv_device_ops() {
    const UNINIT: ::std::mem::MaybeUninit<_ibv_device_ops> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_ibv_device_ops>(),
        16usize,
        concat!("Size of: ", stringify!(_ibv_device_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<_ibv_device_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(_ibv_device_ops))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dummy1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ibv_device_ops),
            "::",
            stringify!(_dummy1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._dummy2) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_ibv_device_ops),
            "::",
            stringify!(_dummy2)
        )
    );
}
pub const IBV_SYSFS_NAME_MAX: _bindgen_ty_17 = 64;
pub const IBV_SYSFS_PATH_MAX: _bindgen_ty_17 = 256;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_device {
    pub _ops: _ibv_device_ops,
    pub node_type: ibv_node_type,
    pub transport_type: ibv_transport_type,
    pub name: [::std::os::raw::c_char; 64usize],
    pub dev_name: [::std::os::raw::c_char; 64usize],
    pub dev_path: [::std::os::raw::c_char; 256usize],
    pub ibdev_path: [::std::os::raw::c_char; 256usize],
}
#[test]
fn bindgen_test_layout_ibv_device() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_device> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_device>(),
        664usize,
        concat!("Size of: ", stringify!(ibv_device))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_device>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_device))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ops) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device),
            "::",
            stringify!(_ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_type) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device),
            "::",
            stringify!(node_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transport_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device),
            "::",
            stringify!(transport_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_name) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device),
            "::",
            stringify!(dev_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dev_path) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device),
            "::",
            stringify!(dev_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ibdev_path) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_device),
            "::",
            stringify!(ibdev_path)
        )
    );
}
impl Default for ibv_device {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _compat_ibv_port_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_context_ops {
    pub _compat_query_device: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            device_attr: *mut ibv_device_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_query_port: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            port_num: u8,
            port_attr: *mut _compat_ibv_port_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_alloc_pd:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_dealloc_pd:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_reg_mr:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_rereg_mr:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_dereg_mr:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub alloc_mw: ::std::option::Option<
        unsafe extern "C" fn(pd: *mut ibv_pd, type_: ibv_mw_type) -> *mut ibv_mw,
    >,
    pub bind_mw: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp,
            mw: *mut ibv_mw,
            mw_bind: *mut ibv_mw_bind,
        ) -> ::std::os::raw::c_int,
    >,
    pub dealloc_mw:
        ::std::option::Option<unsafe extern "C" fn(mw: *mut ibv_mw) -> ::std::os::raw::c_int>,
    pub _compat_create_cq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub poll_cq: ::std::option::Option<
        unsafe extern "C" fn(
            cq: *mut ibv_cq,
            num_entries: ::std::os::raw::c_int,
            wc: *mut ibv_wc,
        ) -> ::std::os::raw::c_int,
    >,
    pub req_notify_cq: ::std::option::Option<
        unsafe extern "C" fn(
            cq: *mut ibv_cq,
            solicited_only: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_cq_event:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_resize_cq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_destroy_cq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_create_srq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_modify_srq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_query_srq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_destroy_srq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub post_srq_recv: ::std::option::Option<
        unsafe extern "C" fn(
            srq: *mut ibv_srq,
            recv_wr: *mut ibv_recv_wr,
            bad_recv_wr: *mut *mut ibv_recv_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_create_qp:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_query_qp:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_modify_qp:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_destroy_qp:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub post_send: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp,
            wr: *mut ibv_send_wr,
            bad_wr: *mut *mut ibv_send_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_recv: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp,
            wr: *mut ibv_recv_wr,
            bad_wr: *mut *mut ibv_recv_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_create_ah:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_destroy_ah:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_attach_mcast:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_detach_mcast:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_async_event:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
}
#[test]
fn bindgen_test_layout_ibv_context_ops() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_context_ops> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_context_ops>(),
        256usize,
        concat!("Size of: ", stringify!(ibv_context_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_context_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_context_ops))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_query_device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_query_device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_query_port) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_query_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_alloc_pd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_alloc_pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_dealloc_pd) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_dealloc_pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_reg_mr) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_reg_mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_rereg_mr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_rereg_mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_dereg_mr) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_dereg_mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_mw) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(alloc_mw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bind_mw) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(bind_mw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dealloc_mw) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(dealloc_mw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_create_cq) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_create_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).poll_cq) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(poll_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).req_notify_cq) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(req_notify_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_cq_event) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_cq_event)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_resize_cq) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_resize_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_destroy_cq) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_destroy_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_create_srq) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_create_srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_modify_srq) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_modify_srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_query_srq) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_query_srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_destroy_srq) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_destroy_srq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_srq_recv) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(post_srq_recv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_create_qp) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_create_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_query_qp) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_query_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_modify_qp) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_modify_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_destroy_qp) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_destroy_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_send) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(post_send)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_recv) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(post_recv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_create_ah) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_create_ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_destroy_ah) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_destroy_ah)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_attach_mcast) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_attach_mcast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_detach_mcast) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_detach_mcast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._compat_async_event) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context_ops),
            "::",
            stringify!(_compat_async_event)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_context {
    pub device: *mut ibv_device,
    pub ops: ibv_context_ops,
    pub cmd_fd: ::std::os::raw::c_int,
    pub async_fd: ::std::os::raw::c_int,
    pub num_comp_vectors: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
    pub abi_compat: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ibv_context() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_context>(),
        328usize,
        concat!("Size of: ", stringify!(ibv_context))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_context>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).device) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context),
            "::",
            stringify!(device)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ops) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context),
            "::",
            stringify!(ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmd_fd) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context),
            "::",
            stringify!(cmd_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_fd) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context),
            "::",
            stringify!(async_fd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_comp_vectors) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context),
            "::",
            stringify!(num_comp_vectors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mutex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abi_compat) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_context),
            "::",
            stringify!(abi_compat)
        )
    );
}
impl Default for ibv_context {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_CQ_INIT_ATTR_MASK_FLAGS: ibv_cq_init_attr_mask = 1;
pub const IBV_CQ_INIT_ATTR_MASK_PD: ibv_cq_init_attr_mask = 2;
pub type ibv_cq_init_attr_mask = ::std::os::raw::c_uint;
pub const IBV_CREATE_CQ_ATTR_SINGLE_THREADED: ibv_create_cq_attr_flags = 1;
pub const IBV_CREATE_CQ_ATTR_IGNORE_OVERRUN: ibv_create_cq_attr_flags = 2;
pub type ibv_create_cq_attr_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_cq_init_attr_ex {
    pub cqe: u32,
    pub cq_context: *mut ::std::os::raw::c_void,
    pub channel: *mut ibv_comp_channel,
    pub comp_vector: u32,
    pub wc_flags: u64,
    pub comp_mask: u32,
    pub flags: u32,
    pub parent_domain: *mut ibv_pd,
}
#[test]
fn bindgen_test_layout_ibv_cq_init_attr_ex() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_cq_init_attr_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_cq_init_attr_ex>(),
        56usize,
        concat!("Size of: ", stringify!(ibv_cq_init_attr_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_cq_init_attr_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_cq_init_attr_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cqe) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_init_attr_ex),
            "::",
            stringify!(cqe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cq_context) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_init_attr_ex),
            "::",
            stringify!(cq_context)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_init_attr_ex),
            "::",
            stringify!(channel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_vector) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_init_attr_ex),
            "::",
            stringify!(comp_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wc_flags) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_init_attr_ex),
            "::",
            stringify!(wc_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_init_attr_ex),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_init_attr_ex),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent_domain) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_cq_init_attr_ex),
            "::",
            stringify!(parent_domain)
        )
    );
}
impl Default for ibv_cq_init_attr_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_PARENT_DOMAIN_INIT_ATTR_ALLOCATORS: ibv_parent_domain_init_attr_mask = 1;
pub const IBV_PARENT_DOMAIN_INIT_ATTR_PD_CONTEXT: ibv_parent_domain_init_attr_mask = 2;
pub type ibv_parent_domain_init_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_parent_domain_init_attr {
    pub pd: *mut ibv_pd,
    pub td: *mut ibv_td,
    pub comp_mask: u32,
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(
            pd: *mut ibv_pd,
            pd_context: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
            resource_type: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            pd: *mut ibv_pd,
            pd_context: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            resource_type: u64,
        ),
    >,
    pub pd_context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ibv_parent_domain_init_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_parent_domain_init_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_parent_domain_init_attr>(),
        48usize,
        concat!("Size of: ", stringify!(ibv_parent_domain_init_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_parent_domain_init_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_parent_domain_init_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_parent_domain_init_attr),
            "::",
            stringify!(pd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).td) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_parent_domain_init_attr),
            "::",
            stringify!(td)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_parent_domain_init_attr),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_parent_domain_init_attr),
            "::",
            stringify!(alloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_parent_domain_init_attr),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pd_context) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_parent_domain_init_attr),
            "::",
            stringify!(pd_context)
        )
    );
}
impl Default for ibv_parent_domain_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_counters_init_attr {
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_counters_init_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_counters_init_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_counters_init_attr>(),
        4usize,
        concat!("Size of: ", stringify!(ibv_counters_init_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_counters_init_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_counters_init_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_counters_init_attr),
            "::",
            stringify!(comp_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_counters {
    pub context: *mut ibv_context,
}
#[test]
fn bindgen_test_layout_ibv_counters() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_counters> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_counters>(),
        8usize,
        concat!("Size of: ", stringify!(ibv_counters))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_counters>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_counters))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_counters),
            "::",
            stringify!(context)
        )
    );
}
impl Default for ibv_counters {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_COUNTER_PACKETS: ibv_counter_description = 0;
pub const IBV_COUNTER_BYTES: ibv_counter_description = 1;
pub type ibv_counter_description = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_counter_attach_attr {
    pub counter_desc: ibv_counter_description,
    pub index: u32,
    pub comp_mask: u32,
}
#[test]
fn bindgen_test_layout_ibv_counter_attach_attr() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_counter_attach_attr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_counter_attach_attr>(),
        12usize,
        concat!("Size of: ", stringify!(ibv_counter_attach_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_counter_attach_attr>(),
        4usize,
        concat!("Alignment of ", stringify!(ibv_counter_attach_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).counter_desc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_counter_attach_attr),
            "::",
            stringify!(counter_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_counter_attach_attr),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_counter_attach_attr),
            "::",
            stringify!(comp_mask)
        )
    );
}
impl Default for ibv_counter_attach_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_READ_COUNTERS_ATTR_PREFER_CACHED: ibv_read_counters_flags = 1;
pub type ibv_read_counters_flags = ::std::os::raw::c_uint;
pub const IBV_VALUES_MASK_RAW_CLOCK: ibv_values_mask = 1;
pub const IBV_VALUES_MASK_RESERVED: ibv_values_mask = 2;
pub type ibv_values_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_values_ex {
    pub comp_mask: u32,
    pub raw_clock: timespec,
}
#[test]
fn bindgen_test_layout_ibv_values_ex() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_values_ex> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_values_ex>(),
        24usize,
        concat!("Size of: ", stringify!(ibv_values_ex))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_values_ex>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_values_ex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).comp_mask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_values_ex),
            "::",
            stringify!(comp_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_clock) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_values_ex),
            "::",
            stringify!(raw_clock)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct verbs_context {
    pub query_port: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            port_num: u8,
            port_attr: *mut ibv_port_attr,
            port_attr_len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub advise_mr: ::std::option::Option<
        unsafe extern "C" fn(
            pd: *mut ibv_pd,
            advice: ib_uverbs_advise_mr_advice,
            flags: u32,
            sg_list: *mut ibv_sge,
            num_sges: u32,
        ) -> ::std::os::raw::c_int,
    >,
    pub alloc_null_mr: ::std::option::Option<unsafe extern "C" fn(pd: *mut ibv_pd) -> *mut ibv_mr>,
    pub read_counters: ::std::option::Option<
        unsafe extern "C" fn(
            counters: *mut ibv_counters,
            counters_value: *mut u64,
            ncounters: u32,
            flags: u32,
        ) -> ::std::os::raw::c_int,
    >,
    pub attach_counters_point_flow: ::std::option::Option<
        unsafe extern "C" fn(
            counters: *mut ibv_counters,
            attr: *mut ibv_counter_attach_attr,
            flow: *mut ibv_flow,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_counters: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            init_attr: *mut ibv_counters_init_attr,
        ) -> *mut ibv_counters,
    >,
    pub destroy_counters: ::std::option::Option<
        unsafe extern "C" fn(counters: *mut ibv_counters) -> ::std::os::raw::c_int,
    >,
    pub reg_dm_mr: ::std::option::Option<
        unsafe extern "C" fn(
            pd: *mut ibv_pd,
            dm: *mut ibv_dm,
            dm_offset: u64,
            length: usize,
            access: ::std::os::raw::c_uint,
        ) -> *mut ibv_mr,
    >,
    pub alloc_dm: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            attr: *mut ibv_alloc_dm_attr,
        ) -> *mut ibv_dm,
    >,
    pub free_dm:
        ::std::option::Option<unsafe extern "C" fn(dm: *mut ibv_dm) -> ::std::os::raw::c_int>,
    pub modify_flow_action_esp: ::std::option::Option<
        unsafe extern "C" fn(
            action: *mut ibv_flow_action,
            attr: *mut ibv_flow_action_esp_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub destroy_flow_action: ::std::option::Option<
        unsafe extern "C" fn(action: *mut ibv_flow_action) -> ::std::os::raw::c_int,
    >,
    pub create_flow_action_esp: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            attr: *mut ibv_flow_action_esp_attr,
        ) -> *mut ibv_flow_action,
    >,
    pub modify_qp_rate_limit: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp,
            attr: *mut ibv_qp_rate_limit_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub alloc_parent_domain: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            attr: *mut ibv_parent_domain_init_attr,
        ) -> *mut ibv_pd,
    >,
    pub dealloc_td:
        ::std::option::Option<unsafe extern "C" fn(td: *mut ibv_td) -> ::std::os::raw::c_int>,
    pub alloc_td: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            init_attr: *mut ibv_td_init_attr,
        ) -> *mut ibv_td,
    >,
    pub modify_cq: ::std::option::Option<
        unsafe extern "C" fn(
            cq: *mut ibv_cq,
            attr: *mut ibv_modify_cq_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_srq_ops: ::std::option::Option<
        unsafe extern "C" fn(
            srq: *mut ibv_srq,
            op: *mut ibv_ops_wr,
            bad_op: *mut *mut ibv_ops_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub destroy_rwq_ind_table: ::std::option::Option<
        unsafe extern "C" fn(rwq_ind_table: *mut ibv_rwq_ind_table) -> ::std::os::raw::c_int,
    >,
    pub create_rwq_ind_table: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            init_attr: *mut ibv_rwq_ind_table_init_attr,
        ) -> *mut ibv_rwq_ind_table,
    >,
    pub destroy_wq:
        ::std::option::Option<unsafe extern "C" fn(wq: *mut ibv_wq) -> ::std::os::raw::c_int>,
    pub modify_wq: ::std::option::Option<
        unsafe extern "C" fn(wq: *mut ibv_wq, wq_attr: *mut ibv_wq_attr) -> ::std::os::raw::c_int,
    >,
    pub create_wq: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            wq_init_attr: *mut ibv_wq_init_attr,
        ) -> *mut ibv_wq,
    >,
    pub query_rt_values: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            values: *mut ibv_values_ex,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_cq_ex: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            init_attr: *mut ibv_cq_init_attr_ex,
        ) -> *mut ibv_cq_ex,
    >,
    pub priv_: *mut verbs_ex_private,
    pub query_device_ex: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            input: *const ibv_query_device_ex_input,
            attr: *mut ibv_device_attr_ex,
            attr_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub ibv_destroy_flow:
        ::std::option::Option<unsafe extern "C" fn(flow: *mut ibv_flow) -> ::std::os::raw::c_int>,
    pub ABI_placeholder2: ::std::option::Option<unsafe extern "C" fn()>,
    pub ibv_create_flow: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp, flow_attr: *mut ibv_flow_attr) -> *mut ibv_flow,
    >,
    pub ABI_placeholder1: ::std::option::Option<unsafe extern "C" fn()>,
    pub open_qp: ::std::option::Option<
        unsafe extern "C" fn(context: *mut ibv_context, attr: *mut ibv_qp_open_attr) -> *mut ibv_qp,
    >,
    pub create_qp_ex: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            qp_init_attr_ex: *mut ibv_qp_init_attr_ex,
        ) -> *mut ibv_qp,
    >,
    pub get_srq_num: ::std::option::Option<
        unsafe extern "C" fn(srq: *mut ibv_srq, srq_num: *mut u32) -> ::std::os::raw::c_int,
    >,
    pub create_srq_ex: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            srq_init_attr_ex: *mut ibv_srq_init_attr_ex,
        ) -> *mut ibv_srq,
    >,
    pub open_xrcd: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            xrcd_init_attr: *mut ibv_xrcd_init_attr,
        ) -> *mut ibv_xrcd,
    >,
    pub close_xrcd:
        ::std::option::Option<unsafe extern "C" fn(xrcd: *mut ibv_xrcd) -> ::std::os::raw::c_int>,
    pub _ABI_placeholder3: u64,
    pub sz: usize,
    pub context: ibv_context,
}
#[test]
fn bindgen_test_layout_verbs_context() {
    const UNINIT: ::std::mem::MaybeUninit<verbs_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<verbs_context>(),
        648usize,
        concat!("Size of: ", stringify!(verbs_context))
    );
    assert_eq!(
        ::std::mem::align_of::<verbs_context>(),
        8usize,
        concat!("Alignment of ", stringify!(verbs_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_port) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(query_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advise_mr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(advise_mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_null_mr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(alloc_null_mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read_counters) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(read_counters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attach_counters_point_flow) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(attach_counters_point_flow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_counters) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(create_counters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_counters) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(destroy_counters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_dm_mr) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(reg_dm_mr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_dm) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(alloc_dm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free_dm) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(free_dm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modify_flow_action_esp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(modify_flow_action_esp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_flow_action) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(destroy_flow_action)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_flow_action_esp) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(create_flow_action_esp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modify_qp_rate_limit) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(modify_qp_rate_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_parent_domain) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(alloc_parent_domain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dealloc_td) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(dealloc_td)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alloc_td) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(alloc_td)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modify_cq) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(modify_cq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).post_srq_ops) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(post_srq_ops)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_rwq_ind_table) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(destroy_rwq_ind_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_rwq_ind_table) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(create_rwq_ind_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy_wq) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(destroy_wq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modify_wq) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(modify_wq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_wq) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(create_wq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_rt_values) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(query_rt_values)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_cq_ex) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(create_cq_ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).priv_) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(priv_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).query_device_ex) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(query_device_ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ibv_destroy_flow) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(ibv_destroy_flow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ABI_placeholder2) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(ABI_placeholder2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ibv_create_flow) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(ibv_create_flow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ABI_placeholder1) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(ABI_placeholder1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_qp) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(open_qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_qp_ex) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(create_qp_ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).get_srq_num) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(get_srq_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create_srq_ex) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(create_srq_ex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open_xrcd) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(open_xrcd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).close_xrcd) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(close_xrcd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._ABI_placeholder3) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(_ABI_placeholder3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sz) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(sz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).context) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(verbs_context),
            "::",
            stringify!(context)
        )
    );
}
impl Default for verbs_context {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ibv_get_device_list(num_devices: *mut ::std::os::raw::c_int) -> *mut *mut ibv_device;
}
extern "C" {
    pub fn ibv_free_device_list(list: *mut *mut ibv_device);
}
extern "C" {
    pub fn ibv_get_device_name(device: *mut ibv_device) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ibv_get_device_index(device: *mut ibv_device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_get_device_guid(device: *mut ibv_device) -> __be64;
}
extern "C" {
    pub fn ibv_open_device(device: *mut ibv_device) -> *mut ibv_context;
}
extern "C" {
    pub fn ibv_close_device(context: *mut ibv_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_import_device(cmd_fd: ::std::os::raw::c_int) -> *mut ibv_context;
}
extern "C" {
    pub fn ibv_import_pd(context: *mut ibv_context, pd_handle: u32) -> *mut ibv_pd;
}
extern "C" {
    pub fn ibv_unimport_pd(pd: *mut ibv_pd);
}
extern "C" {
    pub fn ibv_import_mr(pd: *mut ibv_pd, mr_handle: u32) -> *mut ibv_mr;
}
extern "C" {
    pub fn ibv_unimport_mr(mr: *mut ibv_mr);
}
extern "C" {
    pub fn ibv_import_dm(context: *mut ibv_context, dm_handle: u32) -> *mut ibv_dm;
}
extern "C" {
    pub fn ibv_unimport_dm(dm: *mut ibv_dm);
}
extern "C" {
    pub fn ibv_get_async_event(
        context: *mut ibv_context,
        event: *mut ibv_async_event,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_ack_async_event(event: *mut ibv_async_event);
}
extern "C" {
    pub fn ibv_query_device(
        context: *mut ibv_context,
        device_attr: *mut ibv_device_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_port(
        context: *mut ibv_context,
        port_num: u8,
        port_attr: *mut _compat_ibv_port_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_gid(
        context: *mut ibv_context,
        port_num: u8,
        index: ::std::os::raw::c_int,
        gid: *mut ibv_gid,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ibv_query_gid_ex(
        context: *mut ibv_context,
        port_num: u32,
        gid_index: u32,
        entry: *mut ibv_gid_entry,
        flags: u32,
        entry_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ibv_query_gid_table(
        context: *mut ibv_context,
        entries: *mut ibv_gid_entry,
        max_entries: usize,
        flags: u32,
        entry_size: usize,
    ) -> isize;
}
extern "C" {
    pub fn ibv_query_pkey(
        context: *mut ibv_context,
        port_num: u8,
        index: ::std::os::raw::c_int,
        pkey: *mut __be16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_get_pkey_index(
        context: *mut ibv_context,
        port_num: u8,
        pkey: __be16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_alloc_pd(context: *mut ibv_context) -> *mut ibv_pd;
}
extern "C" {
    pub fn ibv_dealloc_pd(pd: *mut ibv_pd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_reg_mr_iova2(
        pd: *mut ibv_pd,
        addr: *mut ::std::os::raw::c_void,
        length: usize,
        iova: u64,
        access: ::std::os::raw::c_uint,
    ) -> *mut ibv_mr;
}
extern "C" {
    pub fn ibv_reg_mr(
        pd: *mut ibv_pd,
        addr: *mut ::std::os::raw::c_void,
        length: usize,
        access: ::std::os::raw::c_int,
    ) -> *mut ibv_mr;
}
extern "C" {
    pub fn ibv_reg_mr_iova(
        pd: *mut ibv_pd,
        addr: *mut ::std::os::raw::c_void,
        length: usize,
        iova: u64,
        access: ::std::os::raw::c_int,
    ) -> *mut ibv_mr;
}
extern "C" {
    pub fn ibv_reg_dmabuf_mr(
        pd: *mut ibv_pd,
        offset: u64,
        length: usize,
        iova: u64,
        fd: ::std::os::raw::c_int,
        access: ::std::os::raw::c_int,
    ) -> *mut ibv_mr;
}
pub const IBV_REREG_MR_ERR_INPUT: ibv_rereg_mr_err_code = -1;
pub const IBV_REREG_MR_ERR_DONT_FORK_NEW: ibv_rereg_mr_err_code = -2;
pub const IBV_REREG_MR_ERR_DO_FORK_OLD: ibv_rereg_mr_err_code = -3;
pub const IBV_REREG_MR_ERR_CMD: ibv_rereg_mr_err_code = -4;
pub const IBV_REREG_MR_ERR_CMD_AND_DO_FORK_NEW: ibv_rereg_mr_err_code = -5;
pub type ibv_rereg_mr_err_code = ::std::os::raw::c_int;
extern "C" {
    pub fn ibv_rereg_mr(
        mr: *mut ibv_mr,
        flags: ::std::os::raw::c_int,
        pd: *mut ibv_pd,
        addr: *mut ::std::os::raw::c_void,
        length: usize,
        access: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_dereg_mr(mr: *mut ibv_mr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_comp_channel(context: *mut ibv_context) -> *mut ibv_comp_channel;
}
extern "C" {
    pub fn ibv_destroy_comp_channel(channel: *mut ibv_comp_channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_cq(
        context: *mut ibv_context,
        cqe: ::std::os::raw::c_int,
        cq_context: *mut ::std::os::raw::c_void,
        channel: *mut ibv_comp_channel,
        comp_vector: ::std::os::raw::c_int,
    ) -> *mut ibv_cq;
}
extern "C" {
    pub fn ibv_resize_cq(cq: *mut ibv_cq, cqe: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_destroy_cq(cq: *mut ibv_cq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_get_cq_event(
        channel: *mut ibv_comp_channel,
        cq: *mut *mut ibv_cq,
        cq_context: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_ack_cq_events(cq: *mut ibv_cq, nevents: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ibv_create_srq(pd: *mut ibv_pd, srq_init_attr: *mut ibv_srq_init_attr) -> *mut ibv_srq;
}
extern "C" {
    pub fn ibv_modify_srq(
        srq: *mut ibv_srq,
        srq_attr: *mut ibv_srq_attr,
        srq_attr_mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_srq(srq: *mut ibv_srq, srq_attr: *mut ibv_srq_attr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_destroy_srq(srq: *mut ibv_srq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_qp(pd: *mut ibv_pd, qp_init_attr: *mut ibv_qp_init_attr) -> *mut ibv_qp;
}
extern "C" {
    pub fn ibv_modify_qp(
        qp: *mut ibv_qp,
        attr: *mut ibv_qp_attr,
        attr_mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_qp_data_in_order(
        qp: *mut ibv_qp,
        op: ibv_wr_opcode::Type,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_qp(
        qp: *mut ibv_qp,
        attr: *mut ibv_qp_attr,
        attr_mask: ::std::os::raw::c_int,
        init_attr: *mut ibv_qp_init_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_destroy_qp(qp: *mut ibv_qp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_ah(pd: *mut ibv_pd, attr: *mut ibv_ah_attr) -> *mut ibv_ah;
}
extern "C" {
    pub fn ibv_init_ah_from_wc(
        context: *mut ibv_context,
        port_num: u8,
        wc: *mut ibv_wc,
        grh: *mut ibv_grh,
        ah_attr: *mut ibv_ah_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_ah_from_wc(
        pd: *mut ibv_pd,
        wc: *mut ibv_wc,
        grh: *mut ibv_grh,
        port_num: u8,
    ) -> *mut ibv_ah;
}
extern "C" {
    pub fn ibv_destroy_ah(ah: *mut ibv_ah) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_attach_mcast(
        qp: *mut ibv_qp,
        gid: *const ibv_gid,
        lid: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_detach_mcast(
        qp: *mut ibv_qp,
        gid: *const ibv_gid,
        lid: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_fork_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_is_fork_initialized() -> ibv_fork_status;
}
extern "C" {
    pub fn ibv_node_type_str(node_type: ibv_node_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ibv_port_state_str(port_state: ibv_port_state::Type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ibv_event_type_str(event: ibv_event_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ibv_resolve_eth_l2_from_gid(
        context: *mut ibv_context,
        attr: *mut ibv_ah_attr,
        eth_mac: *mut u8,
        vid: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_set_ece(qp: *mut ibv_qp, ece: *mut ibv_ece) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_ece(qp: *mut ibv_qp, ece: *mut ibv_ece) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_sa_path_rec {
    pub dgid: ibv_gid,
    pub sgid: ibv_gid,
    pub dlid: __be16,
    pub slid: __be16,
    pub raw_traffic: ::std::os::raw::c_int,
    pub flow_label: __be32,
    pub hop_limit: u8,
    pub traffic_class: u8,
    pub reversible: ::std::os::raw::c_int,
    pub numb_path: u8,
    pub pkey: __be16,
    pub sl: u8,
    pub mtu_selector: u8,
    pub mtu: u8,
    pub rate_selector: u8,
    pub rate: u8,
    pub packet_life_time_selector: u8,
    pub packet_life_time: u8,
    pub preference: u8,
}
#[test]
fn bindgen_test_layout_ibv_sa_path_rec() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_sa_path_rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_sa_path_rec>(),
        64usize,
        concat!("Size of: ", stringify!(ibv_sa_path_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_sa_path_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_sa_path_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(dgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(sgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(dlid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slid) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(slid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_traffic) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(raw_traffic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(flow_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(hop_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(traffic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reversible) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(reversible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numb_path) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(numb_path)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(pkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtu_selector) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(mtu_selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_selector) as usize - ptr as usize },
        59usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(rate_selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_life_time_selector) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(packet_life_time_selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_life_time) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(packet_life_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preference) as usize - ptr as usize },
        63usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_path_rec),
            "::",
            stringify!(preference)
        )
    );
}
impl Default for ibv_sa_path_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_sa_mcmember_rec {
    pub mgid: ibv_gid,
    pub port_gid: ibv_gid,
    pub qkey: u32,
    pub mlid: u16,
    pub mtu_selector: u8,
    pub mtu: u8,
    pub traffic_class: u8,
    pub pkey: u16,
    pub rate_selector: u8,
    pub rate: u8,
    pub packet_life_time_selector: u8,
    pub packet_life_time: u8,
    pub sl: u8,
    pub flow_label: u32,
    pub hop_limit: u8,
    pub scope: u8,
    pub join_state: u8,
    pub proxy_join: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ibv_sa_mcmember_rec() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_sa_mcmember_rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_sa_mcmember_rec>(),
        64usize,
        concat!("Size of: ", stringify!(ibv_sa_mcmember_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_sa_mcmember_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_sa_mcmember_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(mgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_gid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(port_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(qkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mlid) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(mlid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtu_selector) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(mtu_selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize },
        39usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(traffic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(pkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate_selector) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(rate_selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize },
        45usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_life_time_selector) as usize - ptr as usize },
        46usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(packet_life_time_selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packet_life_time) as usize - ptr as usize },
        47usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(packet_life_time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(flow_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(hop_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scope) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).join_state) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(join_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proxy_join) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_mcmember_rec),
            "::",
            stringify!(proxy_join)
        )
    );
}
impl Default for ibv_sa_mcmember_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_sa_service_rec {
    pub id: u64,
    pub gid: ibv_gid,
    pub pkey: u16,
    pub lease: u32,
    pub key: [u8; 16usize],
    pub name: [u8; 64usize],
    pub data8: [u8; 16usize],
    pub data16: [u16; 8usize],
    pub data32: [u32; 4usize],
    pub data64: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_ibv_sa_service_rec() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_sa_service_rec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_sa_service_rec>(),
        176usize,
        concat!("Size of: ", stringify!(ibv_sa_service_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_sa_service_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_sa_service_rec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(pkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lease) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(lease)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data8) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(data8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data16) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(data16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data32) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(data32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data64) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_sa_service_rec),
            "::",
            stringify!(data64)
        )
    );
}
impl Default for ibv_sa_service_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_path_record {
    pub service_id: __be64,
    pub dgid: ibv_gid,
    pub sgid: ibv_gid,
    pub dlid: __be16,
    pub slid: __be16,
    pub flowlabel_hoplimit: __be32,
    pub tclass: u8,
    pub reversible_numpath: u8,
    pub pkey: __be16,
    pub qosclass_sl: __be16,
    pub mtu: u8,
    pub rate: u8,
    pub packetlifetime: u8,
    pub preference: u8,
    pub reserved: [u8; 6usize],
}
#[test]
fn bindgen_test_layout_ibv_path_record() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_path_record> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_path_record>(),
        64usize,
        concat!("Size of: ", stringify!(ibv_path_record))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_path_record>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_path_record))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).service_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(service_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dgid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(dgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sgid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(sgid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dlid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(dlid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).slid) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(slid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flowlabel_hoplimit) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(flowlabel_hoplimit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tclass) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(tclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reversible_numpath) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(reversible_numpath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(pkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qosclass_sl) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(qosclass_sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mtu) as usize - ptr as usize },
        54usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(mtu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize },
        55usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).packetlifetime) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(packetlifetime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).preference) as usize - ptr as usize },
        57usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(preference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        58usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_record),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for ibv_path_record {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_path_data {
    pub flags: u32,
    pub reserved: u32,
    pub path: ibv_path_record,
}
#[test]
fn bindgen_test_layout_ibv_path_data() {
    const UNINIT: ::std::mem::MaybeUninit<ibv_path_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ibv_path_data>(),
        72usize,
        concat!("Size of: ", stringify!(ibv_path_data))
    );
    assert_eq!(
        ::std::mem::align_of::<ibv_path_data>(),
        8usize,
        concat!("Alignment of ", stringify!(ibv_path_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_data),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_data),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibv_path_data),
            "::",
            stringify!(path)
        )
    );
}
impl Default for ibv_path_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    const UNINIT: ::std::mem::MaybeUninit<div_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<ldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<lldiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    const UNINIT: ::std::mem::MaybeUninit<random_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_type) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_deg) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rand_sep) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    const UNINIT: ::std::mem::MaybeUninit<drand48_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__old_x) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__c) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__init) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__a) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wch) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__wchb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    const UNINIT: ::std::mem::MaybeUninit<__mbstate_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    const UNINIT: ::std::mem::MaybeUninit<_G_fpos64_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags2) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__pad5) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_18 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_18 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_18 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_18 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_18 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_18 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_18 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_18 = 7;
pub const _PC_VDISABLE: _bindgen_ty_18 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_18 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_18 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_18 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_18 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_18 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_18 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_18 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_18 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_18 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_18 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_18 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_18 = 20;
pub type _bindgen_ty_18 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_19 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_19 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_19 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_19 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_19 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_19 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_19 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_19 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_19 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_19 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_19 = 10;
pub const _SC_TIMERS: _bindgen_ty_19 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_19 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_19 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_19 = 14;
pub const _SC_FSYNC: _bindgen_ty_19 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_19 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_19 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_19 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_19 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_19 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_19 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_19 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_19 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_19 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_19 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_19 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_19 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_19 = 28;
pub const _SC_VERSION: _bindgen_ty_19 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_19 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_19 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_19 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_19 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_19 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_19 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_19 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_19 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_19 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_19 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_19 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_19 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_19 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_19 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_19 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_19 = 45;
pub const _SC_2_VERSION: _bindgen_ty_19 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_19 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_19 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_19 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_19 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_19 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_19 = 52;
pub const _SC_PII: _bindgen_ty_19 = 53;
pub const _SC_PII_XTI: _bindgen_ty_19 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_19 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_19 = 56;
pub const _SC_PII_OSI: _bindgen_ty_19 = 57;
pub const _SC_POLL: _bindgen_ty_19 = 58;
pub const _SC_SELECT: _bindgen_ty_19 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_19 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_19 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_19 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_19 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_19 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_19 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_19 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_19 = 66;
pub const _SC_THREADS: _bindgen_ty_19 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_19 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_19 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_19 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_19 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_19 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_19 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_19 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_19 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_19 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_19 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_19 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_19 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_19 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_19 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_19 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_19 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_19 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_19 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_19 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_19 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_19 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_19 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_19 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_19 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_19 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_19 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_19 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_19 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_19 = 96;
pub const _SC_2_UPE: _bindgen_ty_19 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_19 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_19 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_19 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_19 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_19 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_19 = 103;
pub const _SC_INT_MAX: _bindgen_ty_19 = 104;
pub const _SC_INT_MIN: _bindgen_ty_19 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_19 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_19 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_19 = 108;
pub const _SC_NZERO: _bindgen_ty_19 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_19 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_19 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_19 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_19 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_19 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_19 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_19 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_19 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_19 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_19 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_19 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_19 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_19 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_19 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_19 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_19 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_19 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_19 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_19 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_19 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_19 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_19 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_19 = 132;
pub const _SC_BARRIERS: _bindgen_ty_19 = 133;
pub const _SC_BASE: _bindgen_ty_19 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_19 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_19 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_19 = 137;
pub const _SC_CPUTIME: _bindgen_ty_19 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_19 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_19 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_19 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_19 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_19 = 143;
pub const _SC_FIFO: _bindgen_ty_19 = 144;
pub const _SC_PIPE: _bindgen_ty_19 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_19 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_19 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_19 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_19 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_19 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_19 = 151;
pub const _SC_NETWORKING: _bindgen_ty_19 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_19 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_19 = 154;
pub const _SC_REGEXP: _bindgen_ty_19 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_19 = 156;
pub const _SC_SHELL: _bindgen_ty_19 = 157;
pub const _SC_SIGNALS: _bindgen_ty_19 = 158;
pub const _SC_SPAWN: _bindgen_ty_19 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_19 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_19 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_19 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_19 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_19 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_19 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_19 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_19 = 167;
pub const _SC_2_PBS: _bindgen_ty_19 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_19 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_19 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_19 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_19 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_19 = 173;
pub const _SC_STREAMS: _bindgen_ty_19 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_19 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_19 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_19 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_19 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_19 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_19 = 180;
pub const _SC_TRACE: _bindgen_ty_19 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_19 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_19 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_19 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_19 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_19 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_19 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_19 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_19 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_19 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_19 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_19 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_19 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_19 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_19 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_19 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_19 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_19 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_19 = 199;
pub const _SC_IPV6: _bindgen_ty_19 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_19 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_19 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_19 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_19 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_19 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_19 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_19 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_19 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_19 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_19 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_19 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_19 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_19 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_19 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_19 = 250;
pub type _bindgen_ty_19 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_20 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_20 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_20 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_20 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_20 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_20 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_20 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_20 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_20 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_20 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_20 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_20 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_20 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_20 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_20 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_20 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_20 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_20 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_20 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_20 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_20 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_20 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_20 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_20 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_20 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_20 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_20 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_20 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_20 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_20 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_20 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_20 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_20 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_20 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_20 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_20 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_20 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_20 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_20 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_20 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_20 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_20 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_20 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_20 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_20 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_20 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_20 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_20 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_20 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_20 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_20 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_20 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_20 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_20 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_20 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_20 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_20 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_20 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_20 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_20 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_20 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_20 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_20 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_20 = 1149;
pub type _bindgen_ty_20 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    const UNINIT: ::std::mem::MaybeUninit<imaxdiv_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quot) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rem) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    const UNINIT: ::std::mem::MaybeUninit<iovec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_base) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iov_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
impl Default for iovec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SOCK_STREAM: __socket_type = 1;
pub const SOCK_DGRAM: __socket_type = 2;
pub const SOCK_RAW: __socket_type = 3;
pub const SOCK_RDM: __socket_type = 4;
pub const SOCK_SEQPACKET: __socket_type = 5;
pub const SOCK_DCCP: __socket_type = 6;
pub const SOCK_PACKET: __socket_type = 10;
pub const SOCK_CLOEXEC: __socket_type = 524288;
pub const SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_storage> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ss_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_padding) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ss_align) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
impl Default for sockaddr_storage {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const MSG_OOB: _bindgen_ty_21 = 1;
pub const MSG_PEEK: _bindgen_ty_21 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_21 = 4;
pub const MSG_CTRUNC: _bindgen_ty_21 = 8;
pub const MSG_PROXY: _bindgen_ty_21 = 16;
pub const MSG_TRUNC: _bindgen_ty_21 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_21 = 64;
pub const MSG_EOR: _bindgen_ty_21 = 128;
pub const MSG_WAITALL: _bindgen_ty_21 = 256;
pub const MSG_FIN: _bindgen_ty_21 = 512;
pub const MSG_SYN: _bindgen_ty_21 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_21 = 2048;
pub const MSG_RST: _bindgen_ty_21 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_21 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_21 = 16384;
pub const MSG_MORE: _bindgen_ty_21 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_21 = 65536;
pub const MSG_BATCH: _bindgen_ty_21 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_21 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_21 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_21 = 1073741824;
pub type _bindgen_ty_21 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    const UNINIT: ::std::mem::MaybeUninit<msghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_namelen) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iov) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_iovlen) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_control) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_controllen) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).msg_flags) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
impl Default for msghdr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    const UNINIT: ::std::mem::MaybeUninit<cmsghdr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_level) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cmsg_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(cmsg_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__cmsg_data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmsghdr),
            "::",
            stringify!(__cmsg_data)
        )
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_22 = 1;
pub type _bindgen_ty_22 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    const UNINIT: ::std::mem::MaybeUninit<linger> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_onoff) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_linger) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    const UNINIT: ::std::mem::MaybeUninit<osockaddr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sa_data) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_23 = 0;
pub const SHUT_WR: _bindgen_ty_23 = 1;
pub const SHUT_RDWR: _bindgen_ty_23 = 2;
pub type _bindgen_ty_23 = ::std::os::raw::c_uint;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    const UNINIT: ::std::mem::MaybeUninit<ip_opts> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_dst) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ip_opts) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
impl Default for ip_opts {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreqn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_address) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_ifindex) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    const UNINIT: ::std::mem::MaybeUninit<in_pktinfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_ifindex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_spec_dst) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipi_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_24 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_24 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_24 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_24 = 4;
pub const IPPROTO_TCP: _bindgen_ty_24 = 6;
pub const IPPROTO_EGP: _bindgen_ty_24 = 8;
pub const IPPROTO_PUP: _bindgen_ty_24 = 12;
pub const IPPROTO_UDP: _bindgen_ty_24 = 17;
pub const IPPROTO_IDP: _bindgen_ty_24 = 22;
pub const IPPROTO_TP: _bindgen_ty_24 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_24 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_24 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_24 = 46;
pub const IPPROTO_GRE: _bindgen_ty_24 = 47;
pub const IPPROTO_ESP: _bindgen_ty_24 = 50;
pub const IPPROTO_AH: _bindgen_ty_24 = 51;
pub const IPPROTO_MTP: _bindgen_ty_24 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_24 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_24 = 98;
pub const IPPROTO_PIM: _bindgen_ty_24 = 103;
pub const IPPROTO_COMP: _bindgen_ty_24 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_24 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_24 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_24 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_24 = 143;
pub const IPPROTO_RAW: _bindgen_ty_24 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_24 = 262;
pub const IPPROTO_MAX: _bindgen_ty_24 = 263;
pub type _bindgen_ty_24 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_25 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_25 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_25 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_25 = 58;
pub const IPPROTO_NONE: _bindgen_ty_25 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_25 = 60;
pub const IPPROTO_MH: _bindgen_ty_25 = 135;
pub type _bindgen_ty_25 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_26 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_26 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_26 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_26 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_26 = 15;
pub const IPPORT_FTP: _bindgen_ty_26 = 21;
pub const IPPORT_TELNET: _bindgen_ty_26 = 23;
pub const IPPORT_SMTP: _bindgen_ty_26 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_26 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_26 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_26 = 43;
pub const IPPORT_MTP: _bindgen_ty_26 = 57;
pub const IPPORT_TFTP: _bindgen_ty_26 = 69;
pub const IPPORT_RJE: _bindgen_ty_26 = 77;
pub const IPPORT_FINGER: _bindgen_ty_26 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_26 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_26 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_26 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_26 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_26 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_26 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_26 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_26 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_26 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_26 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_26 = 5000;
pub type _bindgen_ty_26 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__u6_addr32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
impl Default for in6_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_in6_addr() {
    const UNINIT: ::std::mem::MaybeUninit<in6_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__in6_u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
impl Default for in6_addr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin_zero) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    const UNINIT: ::std::mem::MaybeUninit<sockaddr_in6> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_flowinfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_addr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sin6_scope_id) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
impl Default for sockaddr_in6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    const UNINIT: ::std::mem::MaybeUninit<ip_mreq_source> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imr_sourceaddr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    const UNINIT: ::std::mem::MaybeUninit<ipv6_mreq> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ipv6mr_interface) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
impl Default for ipv6_mreq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
impl Default for group_req {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    const UNINIT: ::std::mem::MaybeUninit<group_source_req> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gsr_source) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
impl Default for group_source_req {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    const UNINIT: ::std::mem::MaybeUninit<ip_msfilter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_multiaddr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_interface) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_fmode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_numsrc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imsf_slist) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    const UNINIT: ::std::mem::MaybeUninit<group_filter> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_interface) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_group) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_fmode) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_numsrc) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gf_slist) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
impl Default for group_filter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_addr(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_lnaof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_makeaddr(__net: in_addr_t, __host: in_addr_t) -> in_addr;
}
extern "C" {
    pub fn inet_netof(__in: in_addr) -> in_addr_t;
}
extern "C" {
    pub fn inet_network(__cp: *const ::std::os::raw::c_char) -> in_addr_t;
}
extern "C" {
    pub fn inet_ntoa(__in: in_addr) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __len: socklen_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_aton(
        __cp: *const ::std::os::raw::c_char,
        __inp: *mut in_addr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_neta(
        __net: in_addr_t,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_ntop(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_void,
        __bits: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn inet_net_pton(
        __af: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn inet_nsap_addr(
        __cp: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_uchar,
        __len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn inet_nsap_ntoa(
        __len: ::std::os::raw::c_int,
        __cp: *const ::std::os::raw::c_uchar,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub const IB_SMI_CLASS: MAD_CLASSES = 1;
pub const IB_SMI_DIRECT_CLASS: MAD_CLASSES = 129;
pub const IB_SA_CLASS: MAD_CLASSES = 3;
pub const IB_PERFORMANCE_CLASS: MAD_CLASSES = 4;
pub const IB_BOARD_MGMT_CLASS: MAD_CLASSES = 5;
pub const IB_DEVICE_MGMT_CLASS: MAD_CLASSES = 6;
pub const IB_CM_CLASS: MAD_CLASSES = 7;
pub const IB_SNMP_CLASS: MAD_CLASSES = 8;
pub const IB_VENDOR_RANGE1_START_CLASS: MAD_CLASSES = 9;
pub const IB_VENDOR_RANGE1_END_CLASS: MAD_CLASSES = 15;
pub const IB_CC_CLASS: MAD_CLASSES = 33;
pub const IB_VENDOR_RANGE2_START_CLASS: MAD_CLASSES = 48;
pub const IB_VENDOR_RANGE2_END_CLASS: MAD_CLASSES = 79;
pub type MAD_CLASSES = ::std::os::raw::c_uint;
pub const IB_MAD_METHOD_GET: MAD_METHODS = 1;
pub const IB_MAD_METHOD_SET: MAD_METHODS = 2;
pub const IB_MAD_METHOD_GET_RESPONSE: MAD_METHODS = 129;
pub const IB_MAD_METHOD_SEND: MAD_METHODS = 3;
pub const IB_MAD_METHOD_TRAP: MAD_METHODS = 5;
pub const IB_MAD_METHOD_TRAP_REPRESS: MAD_METHODS = 7;
pub const IB_MAD_METHOD_REPORT: MAD_METHODS = 6;
pub const IB_MAD_METHOD_REPORT_RESPONSE: MAD_METHODS = 134;
pub const IB_MAD_METHOD_GET_TABLE: MAD_METHODS = 18;
pub const IB_MAD_METHOD_GET_TABLE_RESPONSE: MAD_METHODS = 146;
pub const IB_MAD_METHOD_GET_TRACE_TABLE: MAD_METHODS = 19;
pub const IB_MAD_METHOD_GET_TRACE_TABLE_RESPONSE: MAD_METHODS = 147;
pub const IB_MAD_METHOD_GETMULTI: MAD_METHODS = 20;
pub const IB_MAD_METHOD_GETMULTI_RESPONSE: MAD_METHODS = 148;
pub const IB_MAD_METHOD_DELETE: MAD_METHODS = 21;
pub const IB_MAD_METHOD_DELETE_RESPONSE: MAD_METHODS = 149;
pub const IB_MAD_RESPONSE: MAD_METHODS = 128;
pub type MAD_METHODS = ::std::os::raw::c_uint;
pub const CLASS_PORT_INFO: MAD_ATTR_ID = 1;
pub const NOTICE: MAD_ATTR_ID = 2;
pub const INFORM_INFO: MAD_ATTR_ID = 3;
pub type MAD_ATTR_ID = ::std::os::raw::c_uint;
pub const IB_MAD_STS_OK: MAD_STATUS = 0;
pub const IB_MAD_STS_BUSY: MAD_STATUS = 1;
pub const IB_MAD_STS_REDIRECT: MAD_STATUS = 2;
pub const IB_MAD_STS_BAD_BASE_VER_OR_CLASS: MAD_STATUS = 4;
pub const IB_MAD_STS_METHOD_NOT_SUPPORTED: MAD_STATUS = 8;
pub const IB_MAD_STS_METHOD_ATTR_NOT_SUPPORTED: MAD_STATUS = 12;
pub const IB_MAD_STS_INV_ATTR_VALUE: MAD_STATUS = 28;
pub type MAD_STATUS = ::std::os::raw::c_uint;
pub const IB_ATTR_NODE_DESC: SMI_ATTR_ID = 16;
pub const IB_ATTR_NODE_INFO: SMI_ATTR_ID = 17;
pub const IB_ATTR_SWITCH_INFO: SMI_ATTR_ID = 18;
pub const IB_ATTR_GUID_INFO: SMI_ATTR_ID = 20;
pub const IB_ATTR_PORT_INFO: SMI_ATTR_ID = 21;
pub const IB_ATTR_PKEY_TBL: SMI_ATTR_ID = 22;
pub const IB_ATTR_SLVL_TABLE: SMI_ATTR_ID = 23;
pub const IB_ATTR_VL_ARBITRATION: SMI_ATTR_ID = 24;
pub const IB_ATTR_LINEARFORWTBL: SMI_ATTR_ID = 25;
pub const IB_ATTR_MULTICASTFORWTBL: SMI_ATTR_ID = 27;
pub const IB_ATTR_LINKSPEEDWIDTHPAIRSTBL: SMI_ATTR_ID = 28;
pub const IB_ATTR_VENDORMADSTBL: SMI_ATTR_ID = 29;
pub const IB_ATTR_SMINFO: SMI_ATTR_ID = 32;
pub const IB_ATTR_PORT_INFO_EXT: SMI_ATTR_ID = 51;
pub const IB_ATTR_LAST: SMI_ATTR_ID = 52;
pub const IB_ATTR_MLNX_EXT_PORT_INFO: SMI_ATTR_ID = 65424;
pub type SMI_ATTR_ID = ::std::os::raw::c_uint;
pub const IB_SA_ATTR_NOTICE: SA_ATTR_ID = 2;
pub const IB_SA_ATTR_INFORMINFO: SA_ATTR_ID = 3;
pub const IB_SA_ATTR_NODERECORD: SA_ATTR_ID = 17;
pub const IB_SA_ATTR_PORTINFORECORD: SA_ATTR_ID = 18;
pub const IB_SA_ATTR_SL2VLTABLERECORD: SA_ATTR_ID = 19;
pub const IB_SA_ATTR_SWITCHINFORECORD: SA_ATTR_ID = 20;
pub const IB_SA_ATTR_LFTRECORD: SA_ATTR_ID = 21;
pub const IB_SA_ATTR_RFTRECORD: SA_ATTR_ID = 22;
pub const IB_SA_ATTR_MFTRECORD: SA_ATTR_ID = 23;
pub const IB_SA_ATTR_SMINFORECORD: SA_ATTR_ID = 24;
pub const IB_SA_ATTR_LINKRECORD: SA_ATTR_ID = 32;
pub const IB_SA_ATTR_GUIDINFORECORD: SA_ATTR_ID = 48;
pub const IB_SA_ATTR_SERVICERECORD: SA_ATTR_ID = 49;
pub const IB_SA_ATTR_PKEYTABLERECORD: SA_ATTR_ID = 51;
pub const IB_SA_ATTR_PATHRECORD: SA_ATTR_ID = 53;
pub const IB_SA_ATTR_VLARBTABLERECORD: SA_ATTR_ID = 54;
pub const IB_SA_ATTR_MCRECORD: SA_ATTR_ID = 56;
pub const IB_SA_ATTR_MULTIPATH: SA_ATTR_ID = 58;
pub const IB_SA_ATTR_INFORMINFORECORD: SA_ATTR_ID = 243;
pub const IB_SA_ATTR_LAST: SA_ATTR_ID = 244;
pub type SA_ATTR_ID = ::std::os::raw::c_uint;
pub const IB_GSI_PORT_SAMPLES_CONTROL: GSI_ATTR_ID = 16;
pub const IB_GSI_PORT_SAMPLES_RESULT: GSI_ATTR_ID = 17;
pub const IB_GSI_PORT_COUNTERS: GSI_ATTR_ID = 18;
pub const IB_GSI_PORT_RCV_ERROR_DETAILS: GSI_ATTR_ID = 21;
pub const IB_GSI_PORT_XMIT_DISCARD_DETAILS: GSI_ATTR_ID = 22;
pub const IB_GSI_PORT_PORT_OP_RCV_COUNTERS: GSI_ATTR_ID = 23;
pub const IB_GSI_PORT_PORT_FLOW_CTL_COUNTERS: GSI_ATTR_ID = 24;
pub const IB_GSI_PORT_PORT_VL_OP_PACKETS: GSI_ATTR_ID = 25;
pub const IB_GSI_PORT_PORT_VL_OP_DATA: GSI_ATTR_ID = 26;
pub const IB_GSI_PORT_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS: GSI_ATTR_ID = 27;
pub const IB_GSI_PORT_PORT_VL_XMIT_WAIT_COUNTERS: GSI_ATTR_ID = 28;
pub const IB_GSI_PORT_COUNTERS_EXT: GSI_ATTR_ID = 29;
pub const IB_GSI_PORT_EXT_SPEEDS_COUNTERS: GSI_ATTR_ID = 31;
pub const IB_GSI_SW_PORT_VL_CONGESTION: GSI_ATTR_ID = 48;
pub const IB_GSI_PORT_RCV_CON_CTRL: GSI_ATTR_ID = 49;
pub const IB_GSI_PORT_SL_RCV_FECN: GSI_ATTR_ID = 50;
pub const IB_GSI_PORT_SL_RCV_BECN: GSI_ATTR_ID = 51;
pub const IB_GSI_PORT_XMIT_CON_CTRL: GSI_ATTR_ID = 52;
pub const IB_GSI_PORT_VL_XMIT_TIME_CONG: GSI_ATTR_ID = 53;
pub const IB_GSI_PORT_XMIT_DATA_SL: GSI_ATTR_ID = 54;
pub const IB_GSI_PORT_RCV_DATA_SL: GSI_ATTR_ID = 55;
pub const IB_GSI_ATTR_LAST: GSI_ATTR_ID = 56;
pub type GSI_ATTR_ID = ::std::os::raw::c_uint;
pub const IB_BM_ATTR_BKEYINFO: BM_ATTR_ID = 16;
pub const IB_BM_ATTR_WRITE_VPD: BM_ATTR_ID = 32;
pub const IB_BM_ATTR_READ_VPD: BM_ATTR_ID = 33;
pub const IB_BM_ATTR_RESET_IBML: BM_ATTR_ID = 34;
pub const IB_BM_ATTR_SET_MODULE_PM_CONTROL: BM_ATTR_ID = 35;
pub const IB_BM_ATTR_GET_MODULE_PM_CONTROL: BM_ATTR_ID = 36;
pub const IB_BM_ATTR_SET_UNIT_PM_CONTROL: BM_ATTR_ID = 37;
pub const IB_BM_ATTR_GET_UNIT_PM_CONTROL: BM_ATTR_ID = 38;
pub const IB_BM_ATTR_SET_IOC_PM_CONTROL: BM_ATTR_ID = 39;
pub const IB_BM_ATTR_GET_IOC_PM_CONTROL: BM_ATTR_ID = 40;
pub const IB_BM_ATTR_SET_MODULE_STATE: BM_ATTR_ID = 41;
pub const IB_BM_ATTR_SET_MODULE_ATTENTION: BM_ATTR_ID = 42;
pub const IB_BM_ATTR_GET_MODULE_STATUS: BM_ATTR_ID = 43;
pub const IB_BM_ATTR_IB2IBML: BM_ATTR_ID = 44;
pub const IB_BM_ATTR_IB2CME: BM_ATTR_ID = 45;
pub const IB_BM_ATTR_IB2MME: BM_ATTR_ID = 46;
pub const IB_BM_ATTR_OEM: BM_ATTR_ID = 47;
pub const IB_BM_ATTR_LAST: BM_ATTR_ID = 48;
pub type BM_ATTR_ID = ::std::os::raw::c_uint;
pub const IB_CC_ATTR_CONGESTION_INFO: CC_ATTRI_ID = 17;
pub const IB_CC_ATTR_CONGESTION_KEY_INFO: CC_ATTRI_ID = 18;
pub const IB_CC_ATTR_CONGESTION_LOG: CC_ATTRI_ID = 19;
pub const IB_CC_ATTR_SWITCH_CONGESTION_SETTING: CC_ATTRI_ID = 20;
pub const IB_CC_ATTR_SWITCH_PORT_CONGESTION_SETTING: CC_ATTRI_ID = 21;
pub const IB_CC_ATTR_CA_CONGESTION_SETTING: CC_ATTRI_ID = 22;
pub const IB_CC_ATTR_CONGESTION_CONTROL_TABLE: CC_ATTRI_ID = 23;
pub const IB_CC_ATTR_TIMESTAMP: CC_ATTRI_ID = 24;
pub type CC_ATTRI_ID = ::std::os::raw::c_uint;
pub type ibmad_gid_t = [u8; 16usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ib_dr_path_t {
    pub cnt: ::std::os::raw::c_int,
    pub p: [u8; 64usize],
    pub drslid: u16,
    pub drdlid: u16,
}
#[test]
fn bindgen_test_layout_ib_dr_path_t() {
    const UNINIT: ::std::mem::MaybeUninit<ib_dr_path_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_dr_path_t>(),
        72usize,
        concat!("Size of: ", stringify!(ib_dr_path_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_dr_path_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_dr_path_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cnt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_dr_path_t),
            "::",
            stringify!(cnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_dr_path_t),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drslid) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_dr_path_t),
            "::",
            stringify!(drslid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drdlid) as usize - ptr as usize },
        70usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_dr_path_t),
            "::",
            stringify!(drdlid)
        )
    );
}
impl Default for ib_dr_path_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_attr_t {
    pub id: ::std::os::raw::c_uint,
    pub mod_: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ib_attr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ib_attr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_attr_t>(),
        8usize,
        concat!("Size of: ", stringify!(ib_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_attr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_attr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_attr_t),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_attr_t),
            "::",
            stringify!(mod_)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_rpc_t {
    pub mgtclass: ::std::os::raw::c_int,
    pub method: ::std::os::raw::c_int,
    pub attr: ib_attr_t,
    pub rstatus: u32,
    pub dataoffs: ::std::os::raw::c_int,
    pub datasz: ::std::os::raw::c_int,
    pub mkey: u64,
    pub trid: u64,
    pub mask: u64,
    pub recsz: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_int,
    pub oui: u32,
}
#[test]
fn bindgen_test_layout_ib_rpc_t() {
    const UNINIT: ::std::mem::MaybeUninit<ib_rpc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_rpc_t>(),
        72usize,
        concat!("Size of: ", stringify!(ib_rpc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_rpc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_rpc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgtclass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(mgtclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstatus) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(rstatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataoffs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(dataoffs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datasz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(datasz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mkey) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(mkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(trid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recsz) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(recsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oui) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_t),
            "::",
            stringify!(oui)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_rpc_v1_t {
    pub mgtclass: ::std::os::raw::c_int,
    pub method: ::std::os::raw::c_int,
    pub attr: ib_attr_t,
    pub rstatus: u32,
    pub dataoffs: ::std::os::raw::c_int,
    pub datasz: ::std::os::raw::c_int,
    pub mkey: u64,
    pub trid: u64,
    pub mask: u64,
    pub recsz: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_int,
    pub oui: u32,
    pub error: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ib_rpc_v1_t() {
    const UNINIT: ::std::mem::MaybeUninit<ib_rpc_v1_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_rpc_v1_t>(),
        72usize,
        concat!("Size of: ", stringify!(ib_rpc_v1_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_rpc_v1_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_rpc_v1_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgtclass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(mgtclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstatus) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(rstatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataoffs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(dataoffs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datasz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(datasz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mkey) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(mkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(trid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recsz) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(recsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oui) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_v1_t),
            "::",
            stringify!(error)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_rpc_cc_t {
    pub mgtclass: ::std::os::raw::c_int,
    pub method: ::std::os::raw::c_int,
    pub attr: ib_attr_t,
    pub rstatus: u32,
    pub dataoffs: ::std::os::raw::c_int,
    pub datasz: ::std::os::raw::c_int,
    pub mkey: u64,
    pub trid: u64,
    pub mask: u64,
    pub recsz: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_int,
    pub oui: u32,
    pub error: ::std::os::raw::c_int,
    pub cckey: u64,
}
#[test]
fn bindgen_test_layout_ib_rpc_cc_t() {
    const UNINIT: ::std::mem::MaybeUninit<ib_rpc_cc_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_rpc_cc_t>(),
        80usize,
        concat!("Size of: ", stringify!(ib_rpc_cc_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_rpc_cc_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_rpc_cc_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgtclass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(mgtclass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rstatus) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(rstatus)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dataoffs) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(dataoffs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).datasz) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(datasz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mkey) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(mkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trid) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(trid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recsz) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(recsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oui) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).error) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cckey) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rpc_cc_t),
            "::",
            stringify!(cckey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct portid {
    pub lid: ::std::os::raw::c_int,
    pub drpath: ib_dr_path_t,
    pub grh_present: ::std::os::raw::c_int,
    pub gid: ibmad_gid_t,
    pub qp: u32,
    pub qkey: u32,
    pub sl: u8,
    pub pkey_idx: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_portid() {
    const UNINIT: ::std::mem::MaybeUninit<portid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<portid>(),
        112usize,
        concat!("Size of: ", stringify!(portid))
    );
    assert_eq!(
        ::std::mem::align_of::<portid>(),
        4usize,
        concat!("Alignment of ", stringify!(portid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(portid),
            "::",
            stringify!(lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).drpath) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(portid),
            "::",
            stringify!(drpath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grh_present) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(portid),
            "::",
            stringify!(grh_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(portid),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qp) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(portid),
            "::",
            stringify!(qp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(portid),
            "::",
            stringify!(qkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(portid),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_idx) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(portid),
            "::",
            stringify!(pkey_idx)
        )
    );
}
impl Default for portid {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ib_portid_t = portid;
pub type ib_mad_dump_fn = ::std::option::Option<
    unsafe extern "C" fn(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_field {
    pub bitoffs: ::std::os::raw::c_int,
    pub bitlen: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 32usize],
    pub def_dump_fn: ib_mad_dump_fn,
}
#[test]
fn bindgen_test_layout_ib_field() {
    const UNINIT: ::std::mem::MaybeUninit<ib_field> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_field>(),
        48usize,
        concat!("Size of: ", stringify!(ib_field))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_field>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_field))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitoffs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_field),
            "::",
            stringify!(bitoffs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitlen) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_field),
            "::",
            stringify!(bitlen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_field),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).def_dump_fn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_field),
            "::",
            stringify!(def_dump_fn)
        )
    );
}
pub type ib_field_t = ib_field;
pub const IB_NO_FIELD: MAD_FIELDS = 0;
pub const IB_GID_PREFIX_F: MAD_FIELDS = 1;
pub const IB_GID_GUID_F: MAD_FIELDS = 2;
pub const IB_MAD_METHOD_F: MAD_FIELDS = 3;
pub const IB_MAD_RESPONSE_F: MAD_FIELDS = 4;
pub const IB_MAD_CLASSVER_F: MAD_FIELDS = 5;
pub const IB_MAD_MGMTCLASS_F: MAD_FIELDS = 6;
pub const IB_MAD_BASEVER_F: MAD_FIELDS = 7;
pub const IB_MAD_STATUS_F: MAD_FIELDS = 8;
pub const IB_DRSMP_HOPCNT_F: MAD_FIELDS = 9;
pub const IB_DRSMP_HOPPTR_F: MAD_FIELDS = 10;
pub const IB_DRSMP_STATUS_F: MAD_FIELDS = 11;
pub const IB_DRSMP_DIRECTION_F: MAD_FIELDS = 12;
pub const IB_MAD_TRID_F: MAD_FIELDS = 13;
pub const IB_MAD_ATTRID_F: MAD_FIELDS = 14;
pub const IB_MAD_ATTRMOD_F: MAD_FIELDS = 15;
pub const IB_MAD_MKEY_F: MAD_FIELDS = 16;
pub const IB_DRSMP_DRDLID_F: MAD_FIELDS = 17;
pub const IB_DRSMP_DRSLID_F: MAD_FIELDS = 18;
pub const IB_SA_MKEY_F: MAD_FIELDS = 19;
pub const IB_SA_ATTROFFS_F: MAD_FIELDS = 20;
pub const IB_SA_COMPMASK_F: MAD_FIELDS = 21;
pub const IB_SA_DATA_F: MAD_FIELDS = 22;
pub const IB_SM_DATA_F: MAD_FIELDS = 23;
pub const IB_GS_DATA_F: MAD_FIELDS = 24;
pub const IB_DRSMP_PATH_F: MAD_FIELDS = 25;
pub const IB_DRSMP_RPATH_F: MAD_FIELDS = 26;
pub const IB_PORT_FIRST_F: MAD_FIELDS = 27;
pub const IB_PORT_MKEY_F: MAD_FIELDS = 27;
pub const IB_PORT_GID_PREFIX_F: MAD_FIELDS = 28;
pub const IB_PORT_LID_F: MAD_FIELDS = 29;
pub const IB_PORT_SMLID_F: MAD_FIELDS = 30;
pub const IB_PORT_CAPMASK_F: MAD_FIELDS = 31;
pub const IB_PORT_DIAG_F: MAD_FIELDS = 32;
pub const IB_PORT_MKEY_LEASE_F: MAD_FIELDS = 33;
pub const IB_PORT_LOCAL_PORT_F: MAD_FIELDS = 34;
pub const IB_PORT_LINK_WIDTH_ENABLED_F: MAD_FIELDS = 35;
pub const IB_PORT_LINK_WIDTH_SUPPORTED_F: MAD_FIELDS = 36;
pub const IB_PORT_LINK_WIDTH_ACTIVE_F: MAD_FIELDS = 37;
pub const IB_PORT_LINK_SPEED_SUPPORTED_F: MAD_FIELDS = 38;
pub const IB_PORT_STATE_F: MAD_FIELDS = 39;
pub const IB_PORT_PHYS_STATE_F: MAD_FIELDS = 40;
pub const IB_PORT_LINK_DOWN_DEF_F: MAD_FIELDS = 41;
pub const IB_PORT_MKEY_PROT_BITS_F: MAD_FIELDS = 42;
pub const IB_PORT_LMC_F: MAD_FIELDS = 43;
pub const IB_PORT_LINK_SPEED_ACTIVE_F: MAD_FIELDS = 44;
pub const IB_PORT_LINK_SPEED_ENABLED_F: MAD_FIELDS = 45;
pub const IB_PORT_NEIGHBOR_MTU_F: MAD_FIELDS = 46;
pub const IB_PORT_SMSL_F: MAD_FIELDS = 47;
pub const IB_PORT_VL_CAP_F: MAD_FIELDS = 48;
pub const IB_PORT_INIT_TYPE_F: MAD_FIELDS = 49;
pub const IB_PORT_VL_HIGH_LIMIT_F: MAD_FIELDS = 50;
pub const IB_PORT_VL_ARBITRATION_HIGH_CAP_F: MAD_FIELDS = 51;
pub const IB_PORT_VL_ARBITRATION_LOW_CAP_F: MAD_FIELDS = 52;
pub const IB_PORT_INIT_TYPE_REPLY_F: MAD_FIELDS = 53;
pub const IB_PORT_MTU_CAP_F: MAD_FIELDS = 54;
pub const IB_PORT_VL_STALL_COUNT_F: MAD_FIELDS = 55;
pub const IB_PORT_HOQ_LIFE_F: MAD_FIELDS = 56;
pub const IB_PORT_OPER_VLS_F: MAD_FIELDS = 57;
pub const IB_PORT_PART_EN_INB_F: MAD_FIELDS = 58;
pub const IB_PORT_PART_EN_OUTB_F: MAD_FIELDS = 59;
pub const IB_PORT_FILTER_RAW_INB_F: MAD_FIELDS = 60;
pub const IB_PORT_FILTER_RAW_OUTB_F: MAD_FIELDS = 61;
pub const IB_PORT_MKEY_VIOL_F: MAD_FIELDS = 62;
pub const IB_PORT_PKEY_VIOL_F: MAD_FIELDS = 63;
pub const IB_PORT_QKEY_VIOL_F: MAD_FIELDS = 64;
pub const IB_PORT_GUID_CAP_F: MAD_FIELDS = 65;
pub const IB_PORT_CLIENT_REREG_F: MAD_FIELDS = 66;
pub const IB_PORT_MCAST_PKEY_SUPR_ENAB_F: MAD_FIELDS = 67;
pub const IB_PORT_SUBN_TIMEOUT_F: MAD_FIELDS = 68;
pub const IB_PORT_RESP_TIME_VAL_F: MAD_FIELDS = 69;
pub const IB_PORT_LOCAL_PHYS_ERR_F: MAD_FIELDS = 70;
pub const IB_PORT_OVERRUN_ERR_F: MAD_FIELDS = 71;
pub const IB_PORT_MAX_CREDIT_HINT_F: MAD_FIELDS = 72;
pub const IB_PORT_LINK_ROUND_TRIP_F: MAD_FIELDS = 73;
pub const IB_PORT_LAST_F: MAD_FIELDS = 74;
pub const IB_NODE_FIRST_F: MAD_FIELDS = 75;
pub const IB_NODE_BASE_VERS_F: MAD_FIELDS = 75;
pub const IB_NODE_CLASS_VERS_F: MAD_FIELDS = 76;
pub const IB_NODE_TYPE_F: MAD_FIELDS = 77;
pub const IB_NODE_NPORTS_F: MAD_FIELDS = 78;
pub const IB_NODE_SYSTEM_GUID_F: MAD_FIELDS = 79;
pub const IB_NODE_GUID_F: MAD_FIELDS = 80;
pub const IB_NODE_PORT_GUID_F: MAD_FIELDS = 81;
pub const IB_NODE_PARTITION_CAP_F: MAD_FIELDS = 82;
pub const IB_NODE_DEVID_F: MAD_FIELDS = 83;
pub const IB_NODE_REVISION_F: MAD_FIELDS = 84;
pub const IB_NODE_LOCAL_PORT_F: MAD_FIELDS = 85;
pub const IB_NODE_VENDORID_F: MAD_FIELDS = 86;
pub const IB_NODE_LAST_F: MAD_FIELDS = 87;
pub const IB_SW_FIRST_F: MAD_FIELDS = 88;
pub const IB_SW_LINEAR_FDB_CAP_F: MAD_FIELDS = 88;
pub const IB_SW_RANDOM_FDB_CAP_F: MAD_FIELDS = 89;
pub const IB_SW_MCAST_FDB_CAP_F: MAD_FIELDS = 90;
pub const IB_SW_LINEAR_FDB_TOP_F: MAD_FIELDS = 91;
pub const IB_SW_DEF_PORT_F: MAD_FIELDS = 92;
pub const IB_SW_DEF_MCAST_PRIM_F: MAD_FIELDS = 93;
pub const IB_SW_DEF_MCAST_NOT_PRIM_F: MAD_FIELDS = 94;
pub const IB_SW_LIFE_TIME_F: MAD_FIELDS = 95;
pub const IB_SW_STATE_CHANGE_F: MAD_FIELDS = 96;
pub const IB_SW_OPT_SLTOVL_MAPPING_F: MAD_FIELDS = 97;
pub const IB_SW_LIDS_PER_PORT_F: MAD_FIELDS = 98;
pub const IB_SW_PARTITION_ENFORCE_CAP_F: MAD_FIELDS = 99;
pub const IB_SW_PARTITION_ENF_INB_F: MAD_FIELDS = 100;
pub const IB_SW_PARTITION_ENF_OUTB_F: MAD_FIELDS = 101;
pub const IB_SW_FILTER_RAW_INB_F: MAD_FIELDS = 102;
pub const IB_SW_FILTER_RAW_OUTB_F: MAD_FIELDS = 103;
pub const IB_SW_ENHANCED_PORT0_F: MAD_FIELDS = 104;
pub const IB_SW_MCAST_FDB_TOP_F: MAD_FIELDS = 105;
pub const IB_SW_LAST_F: MAD_FIELDS = 106;
pub const IB_LINEAR_FORW_TBL_F: MAD_FIELDS = 107;
pub const IB_MULTICAST_FORW_TBL_F: MAD_FIELDS = 108;
pub const IB_NODE_DESC_F: MAD_FIELDS = 109;
pub const IB_NOTICE_IS_GENERIC_F: MAD_FIELDS = 110;
pub const IB_NOTICE_TYPE_F: MAD_FIELDS = 111;
pub const IB_NOTICE_PRODUCER_F: MAD_FIELDS = 112;
pub const IB_NOTICE_TRAP_NUMBER_F: MAD_FIELDS = 113;
pub const IB_NOTICE_ISSUER_LID_F: MAD_FIELDS = 114;
pub const IB_NOTICE_TOGGLE_F: MAD_FIELDS = 115;
pub const IB_NOTICE_COUNT_F: MAD_FIELDS = 116;
pub const IB_NOTICE_DATA_DETAILS_F: MAD_FIELDS = 117;
pub const IB_NOTICE_DATA_LID_F: MAD_FIELDS = 118;
pub const IB_NOTICE_DATA_144_LID_F: MAD_FIELDS = 119;
pub const IB_NOTICE_DATA_144_CAPMASK_F: MAD_FIELDS = 120;
pub const IB_PC_FIRST_F: MAD_FIELDS = 121;
pub const IB_PC_PORT_SELECT_F: MAD_FIELDS = 121;
pub const IB_PC_COUNTER_SELECT_F: MAD_FIELDS = 122;
pub const IB_PC_ERR_SYM_F: MAD_FIELDS = 123;
pub const IB_PC_LINK_RECOVERS_F: MAD_FIELDS = 124;
pub const IB_PC_LINK_DOWNED_F: MAD_FIELDS = 125;
pub const IB_PC_ERR_RCV_F: MAD_FIELDS = 126;
pub const IB_PC_ERR_PHYSRCV_F: MAD_FIELDS = 127;
pub const IB_PC_ERR_SWITCH_REL_F: MAD_FIELDS = 128;
pub const IB_PC_XMT_DISCARDS_F: MAD_FIELDS = 129;
pub const IB_PC_ERR_XMTCONSTR_F: MAD_FIELDS = 130;
pub const IB_PC_ERR_RCVCONSTR_F: MAD_FIELDS = 131;
pub const IB_PC_COUNTER_SELECT2_F: MAD_FIELDS = 132;
pub const IB_PC_ERR_LOCALINTEG_F: MAD_FIELDS = 133;
pub const IB_PC_ERR_EXCESS_OVR_F: MAD_FIELDS = 134;
pub const IB_PC_VL15_DROPPED_F: MAD_FIELDS = 135;
pub const IB_PC_XMT_BYTES_F: MAD_FIELDS = 136;
pub const IB_PC_RCV_BYTES_F: MAD_FIELDS = 137;
pub const IB_PC_XMT_PKTS_F: MAD_FIELDS = 138;
pub const IB_PC_RCV_PKTS_F: MAD_FIELDS = 139;
pub const IB_PC_XMT_WAIT_F: MAD_FIELDS = 140;
pub const IB_PC_LAST_F: MAD_FIELDS = 141;
pub const IB_SMINFO_GUID_F: MAD_FIELDS = 142;
pub const IB_SMINFO_KEY_F: MAD_FIELDS = 143;
pub const IB_SMINFO_ACT_F: MAD_FIELDS = 144;
pub const IB_SMINFO_PRIO_F: MAD_FIELDS = 145;
pub const IB_SMINFO_STATE_F: MAD_FIELDS = 146;
pub const IB_SA_RMPP_VERS_F: MAD_FIELDS = 147;
pub const IB_SA_RMPP_TYPE_F: MAD_FIELDS = 148;
pub const IB_SA_RMPP_RESP_F: MAD_FIELDS = 149;
pub const IB_SA_RMPP_FLAGS_F: MAD_FIELDS = 150;
pub const IB_SA_RMPP_STATUS_F: MAD_FIELDS = 151;
pub const IB_SA_RMPP_D1_F: MAD_FIELDS = 152;
pub const IB_SA_RMPP_SEGNUM_F: MAD_FIELDS = 153;
pub const IB_SA_RMPP_D2_F: MAD_FIELDS = 154;
pub const IB_SA_RMPP_LEN_F: MAD_FIELDS = 155;
pub const IB_SA_RMPP_NEWWIN_F: MAD_FIELDS = 156;
pub const IB_SA_MP_NPATH_F: MAD_FIELDS = 157;
pub const IB_SA_MP_NSRC_F: MAD_FIELDS = 158;
pub const IB_SA_MP_NDEST_F: MAD_FIELDS = 159;
pub const IB_SA_MP_GID0_F: MAD_FIELDS = 160;
pub const IB_SA_PR_DGID_F: MAD_FIELDS = 161;
pub const IB_SA_PR_SGID_F: MAD_FIELDS = 162;
pub const IB_SA_PR_DLID_F: MAD_FIELDS = 163;
pub const IB_SA_PR_SLID_F: MAD_FIELDS = 164;
pub const IB_SA_PR_NPATH_F: MAD_FIELDS = 165;
pub const IB_SA_PR_SL_F: MAD_FIELDS = 166;
pub const IB_SA_MCM_MGID_F: MAD_FIELDS = 167;
pub const IB_SA_MCM_PORTGID_F: MAD_FIELDS = 168;
pub const IB_SA_MCM_QKEY_F: MAD_FIELDS = 169;
pub const IB_SA_MCM_MLID_F: MAD_FIELDS = 170;
pub const IB_SA_MCM_SL_F: MAD_FIELDS = 171;
pub const IB_SA_MCM_MTU_F: MAD_FIELDS = 172;
pub const IB_SA_MCM_RATE_F: MAD_FIELDS = 173;
pub const IB_SA_MCM_TCLASS_F: MAD_FIELDS = 174;
pub const IB_SA_MCM_PKEY_F: MAD_FIELDS = 175;
pub const IB_SA_MCM_FLOW_LABEL_F: MAD_FIELDS = 176;
pub const IB_SA_MCM_JOIN_STATE_F: MAD_FIELDS = 177;
pub const IB_SA_MCM_PROXY_JOIN_F: MAD_FIELDS = 178;
pub const IB_SA_SR_ID_F: MAD_FIELDS = 179;
pub const IB_SA_SR_GID_F: MAD_FIELDS = 180;
pub const IB_SA_SR_PKEY_F: MAD_FIELDS = 181;
pub const IB_SA_SR_LEASE_F: MAD_FIELDS = 182;
pub const IB_SA_SR_KEY_F: MAD_FIELDS = 183;
pub const IB_SA_SR_NAME_F: MAD_FIELDS = 184;
pub const IB_SA_SR_DATA_F: MAD_FIELDS = 185;
pub const IB_ATS_SM_NODE_ADDR_F: MAD_FIELDS = 186;
pub const IB_ATS_SM_MAGIC_KEY_F: MAD_FIELDS = 187;
pub const IB_ATS_SM_NODE_TYPE_F: MAD_FIELDS = 188;
pub const IB_ATS_SM_NODE_NAME_F: MAD_FIELDS = 189;
pub const IB_SLTOVL_MAPPING_TABLE_F: MAD_FIELDS = 190;
pub const IB_VL_ARBITRATION_TABLE_F: MAD_FIELDS = 191;
pub const IB_VEND2_OUI_F: MAD_FIELDS = 192;
pub const IB_VEND2_DATA_F: MAD_FIELDS = 193;
pub const IB_PC_EXT_FIRST_F: MAD_FIELDS = 194;
pub const IB_PC_EXT_PORT_SELECT_F: MAD_FIELDS = 194;
pub const IB_PC_EXT_COUNTER_SELECT_F: MAD_FIELDS = 195;
pub const IB_PC_EXT_XMT_BYTES_F: MAD_FIELDS = 196;
pub const IB_PC_EXT_RCV_BYTES_F: MAD_FIELDS = 197;
pub const IB_PC_EXT_XMT_PKTS_F: MAD_FIELDS = 198;
pub const IB_PC_EXT_RCV_PKTS_F: MAD_FIELDS = 199;
pub const IB_PC_EXT_XMT_UPKTS_F: MAD_FIELDS = 200;
pub const IB_PC_EXT_RCV_UPKTS_F: MAD_FIELDS = 201;
pub const IB_PC_EXT_XMT_MPKTS_F: MAD_FIELDS = 202;
pub const IB_PC_EXT_RCV_MPKTS_F: MAD_FIELDS = 203;
pub const IB_PC_EXT_LAST_F: MAD_FIELDS = 204;
pub const IB_GUID_GUID0_F: MAD_FIELDS = 205;
pub const IB_CPI_BASEVER_F: MAD_FIELDS = 206;
pub const IB_CPI_CLASSVER_F: MAD_FIELDS = 207;
pub const IB_CPI_CAPMASK_F: MAD_FIELDS = 208;
pub const IB_CPI_CAPMASK2_F: MAD_FIELDS = 209;
pub const IB_CPI_RESP_TIME_VALUE_F: MAD_FIELDS = 210;
pub const IB_CPI_REDIRECT_GID_F: MAD_FIELDS = 211;
pub const IB_CPI_REDIRECT_TC_F: MAD_FIELDS = 212;
pub const IB_CPI_REDIRECT_SL_F: MAD_FIELDS = 213;
pub const IB_CPI_REDIRECT_FL_F: MAD_FIELDS = 214;
pub const IB_CPI_REDIRECT_LID_F: MAD_FIELDS = 215;
pub const IB_CPI_REDIRECT_PKEY_F: MAD_FIELDS = 216;
pub const IB_CPI_REDIRECT_QP_F: MAD_FIELDS = 217;
pub const IB_CPI_REDIRECT_QKEY_F: MAD_FIELDS = 218;
pub const IB_CPI_TRAP_GID_F: MAD_FIELDS = 219;
pub const IB_CPI_TRAP_TC_F: MAD_FIELDS = 220;
pub const IB_CPI_TRAP_SL_F: MAD_FIELDS = 221;
pub const IB_CPI_TRAP_FL_F: MAD_FIELDS = 222;
pub const IB_CPI_TRAP_LID_F: MAD_FIELDS = 223;
pub const IB_CPI_TRAP_PKEY_F: MAD_FIELDS = 224;
pub const IB_CPI_TRAP_HL_F: MAD_FIELDS = 225;
pub const IB_CPI_TRAP_QP_F: MAD_FIELDS = 226;
pub const IB_CPI_TRAP_QKEY_F: MAD_FIELDS = 227;
pub const IB_PC_XMT_DATA_SL_FIRST_F: MAD_FIELDS = 228;
pub const IB_PC_XMT_DATA_SL0_F: MAD_FIELDS = 228;
pub const IB_PC_XMT_DATA_SL1_F: MAD_FIELDS = 229;
pub const IB_PC_XMT_DATA_SL2_F: MAD_FIELDS = 230;
pub const IB_PC_XMT_DATA_SL3_F: MAD_FIELDS = 231;
pub const IB_PC_XMT_DATA_SL4_F: MAD_FIELDS = 232;
pub const IB_PC_XMT_DATA_SL5_F: MAD_FIELDS = 233;
pub const IB_PC_XMT_DATA_SL6_F: MAD_FIELDS = 234;
pub const IB_PC_XMT_DATA_SL7_F: MAD_FIELDS = 235;
pub const IB_PC_XMT_DATA_SL8_F: MAD_FIELDS = 236;
pub const IB_PC_XMT_DATA_SL9_F: MAD_FIELDS = 237;
pub const IB_PC_XMT_DATA_SL10_F: MAD_FIELDS = 238;
pub const IB_PC_XMT_DATA_SL11_F: MAD_FIELDS = 239;
pub const IB_PC_XMT_DATA_SL12_F: MAD_FIELDS = 240;
pub const IB_PC_XMT_DATA_SL13_F: MAD_FIELDS = 241;
pub const IB_PC_XMT_DATA_SL14_F: MAD_FIELDS = 242;
pub const IB_PC_XMT_DATA_SL15_F: MAD_FIELDS = 243;
pub const IB_PC_XMT_DATA_SL_LAST_F: MAD_FIELDS = 244;
pub const IB_PC_RCV_DATA_SL_FIRST_F: MAD_FIELDS = 245;
pub const IB_PC_RCV_DATA_SL0_F: MAD_FIELDS = 245;
pub const IB_PC_RCV_DATA_SL1_F: MAD_FIELDS = 246;
pub const IB_PC_RCV_DATA_SL2_F: MAD_FIELDS = 247;
pub const IB_PC_RCV_DATA_SL3_F: MAD_FIELDS = 248;
pub const IB_PC_RCV_DATA_SL4_F: MAD_FIELDS = 249;
pub const IB_PC_RCV_DATA_SL5_F: MAD_FIELDS = 250;
pub const IB_PC_RCV_DATA_SL6_F: MAD_FIELDS = 251;
pub const IB_PC_RCV_DATA_SL7_F: MAD_FIELDS = 252;
pub const IB_PC_RCV_DATA_SL8_F: MAD_FIELDS = 253;
pub const IB_PC_RCV_DATA_SL9_F: MAD_FIELDS = 254;
pub const IB_PC_RCV_DATA_SL10_F: MAD_FIELDS = 255;
pub const IB_PC_RCV_DATA_SL11_F: MAD_FIELDS = 256;
pub const IB_PC_RCV_DATA_SL12_F: MAD_FIELDS = 257;
pub const IB_PC_RCV_DATA_SL13_F: MAD_FIELDS = 258;
pub const IB_PC_RCV_DATA_SL14_F: MAD_FIELDS = 259;
pub const IB_PC_RCV_DATA_SL15_F: MAD_FIELDS = 260;
pub const IB_PC_RCV_DATA_SL_LAST_F: MAD_FIELDS = 261;
pub const IB_PC_XMT_INACT_DISC_F: MAD_FIELDS = 262;
pub const IB_PC_XMT_NEIGH_MTU_DISC_F: MAD_FIELDS = 263;
pub const IB_PC_XMT_SW_LIFE_DISC_F: MAD_FIELDS = 264;
pub const IB_PC_XMT_SW_HOL_DISC_F: MAD_FIELDS = 265;
pub const IB_PC_XMT_DISC_LAST_F: MAD_FIELDS = 266;
pub const IB_PC_RCV_LOCAL_PHY_ERR_F: MAD_FIELDS = 267;
pub const IB_PC_RCV_MALFORMED_PKT_ERR_F: MAD_FIELDS = 268;
pub const IB_PC_RCV_BUF_OVR_ERR_F: MAD_FIELDS = 269;
pub const IB_PC_RCV_DLID_MAP_ERR_F: MAD_FIELDS = 270;
pub const IB_PC_RCV_VL_MAP_ERR_F: MAD_FIELDS = 271;
pub const IB_PC_RCV_LOOPING_ERR_F: MAD_FIELDS = 272;
pub const IB_PC_RCV_ERR_LAST_F: MAD_FIELDS = 273;
pub const IB_PSC_OPCODE_F: MAD_FIELDS = 274;
pub const IB_PSC_PORT_SELECT_F: MAD_FIELDS = 275;
pub const IB_PSC_TICK_F: MAD_FIELDS = 276;
pub const IB_PSC_COUNTER_WIDTH_F: MAD_FIELDS = 277;
pub const IB_PSC_COUNTER_MASK0_F: MAD_FIELDS = 278;
pub const IB_PSC_COUNTER_MASKS1TO9_F: MAD_FIELDS = 279;
pub const IB_PSC_COUNTER_MASKS10TO14_F: MAD_FIELDS = 280;
pub const IB_PSC_SAMPLE_MECHS_F: MAD_FIELDS = 281;
pub const IB_PSC_SAMPLE_STATUS_F: MAD_FIELDS = 282;
pub const IB_PSC_OPTION_MASK_F: MAD_FIELDS = 283;
pub const IB_PSC_VENDOR_MASK_F: MAD_FIELDS = 284;
pub const IB_PSC_SAMPLE_START_F: MAD_FIELDS = 285;
pub const IB_PSC_SAMPLE_INTVL_F: MAD_FIELDS = 286;
pub const IB_PSC_TAG_F: MAD_FIELDS = 287;
pub const IB_PSC_COUNTER_SEL0_F: MAD_FIELDS = 288;
pub const IB_PSC_COUNTER_SEL1_F: MAD_FIELDS = 289;
pub const IB_PSC_COUNTER_SEL2_F: MAD_FIELDS = 290;
pub const IB_PSC_COUNTER_SEL3_F: MAD_FIELDS = 291;
pub const IB_PSC_COUNTER_SEL4_F: MAD_FIELDS = 292;
pub const IB_PSC_COUNTER_SEL5_F: MAD_FIELDS = 293;
pub const IB_PSC_COUNTER_SEL6_F: MAD_FIELDS = 294;
pub const IB_PSC_COUNTER_SEL7_F: MAD_FIELDS = 295;
pub const IB_PSC_COUNTER_SEL8_F: MAD_FIELDS = 296;
pub const IB_PSC_COUNTER_SEL9_F: MAD_FIELDS = 297;
pub const IB_PSC_COUNTER_SEL10_F: MAD_FIELDS = 298;
pub const IB_PSC_COUNTER_SEL11_F: MAD_FIELDS = 299;
pub const IB_PSC_COUNTER_SEL12_F: MAD_FIELDS = 300;
pub const IB_PSC_COUNTER_SEL13_F: MAD_FIELDS = 301;
pub const IB_PSC_COUNTER_SEL14_F: MAD_FIELDS = 302;
pub const IB_PSC_SAMPLES_ONLY_OPT_MASK_F: MAD_FIELDS = 303;
pub const IB_PSC_LAST_F: MAD_FIELDS = 304;
pub const IB_GI_GUID0_F: MAD_FIELDS = 305;
pub const IB_GI_GUID1_F: MAD_FIELDS = 306;
pub const IB_GI_GUID2_F: MAD_FIELDS = 307;
pub const IB_GI_GUID3_F: MAD_FIELDS = 308;
pub const IB_GI_GUID4_F: MAD_FIELDS = 309;
pub const IB_GI_GUID5_F: MAD_FIELDS = 310;
pub const IB_GI_GUID6_F: MAD_FIELDS = 311;
pub const IB_GI_GUID7_F: MAD_FIELDS = 312;
pub const IB_SA_GIR_LID_F: MAD_FIELDS = 313;
pub const IB_SA_GIR_BLOCKNUM_F: MAD_FIELDS = 314;
pub const IB_SA_GIR_GUID0_F: MAD_FIELDS = 315;
pub const IB_SA_GIR_GUID1_F: MAD_FIELDS = 316;
pub const IB_SA_GIR_GUID2_F: MAD_FIELDS = 317;
pub const IB_SA_GIR_GUID3_F: MAD_FIELDS = 318;
pub const IB_SA_GIR_GUID4_F: MAD_FIELDS = 319;
pub const IB_SA_GIR_GUID5_F: MAD_FIELDS = 320;
pub const IB_SA_GIR_GUID6_F: MAD_FIELDS = 321;
pub const IB_SA_GIR_GUID7_F: MAD_FIELDS = 322;
pub const IB_PORT_CAPMASK2_F: MAD_FIELDS = 323;
pub const IB_PORT_LINK_SPEED_EXT_ACTIVE_F: MAD_FIELDS = 324;
pub const IB_PORT_LINK_SPEED_EXT_SUPPORTED_F: MAD_FIELDS = 325;
pub const IB_PORT_LINK_SPEED_EXT_ENABLED_F: MAD_FIELDS = 326;
pub const IB_PORT_LINK_SPEED_EXT_LAST_F: MAD_FIELDS = 327;
pub const IB_PESC_PORT_SELECT_F: MAD_FIELDS = 328;
pub const IB_PESC_COUNTER_SELECT_F: MAD_FIELDS = 329;
pub const IB_PESC_SYNC_HDR_ERR_CTR_F: MAD_FIELDS = 330;
pub const IB_PESC_UNK_BLOCK_CTR_F: MAD_FIELDS = 331;
pub const IB_PESC_ERR_DET_CTR_LANE0_F: MAD_FIELDS = 332;
pub const IB_PESC_ERR_DET_CTR_LANE1_F: MAD_FIELDS = 333;
pub const IB_PESC_ERR_DET_CTR_LANE2_F: MAD_FIELDS = 334;
pub const IB_PESC_ERR_DET_CTR_LANE3_F: MAD_FIELDS = 335;
pub const IB_PESC_ERR_DET_CTR_LANE4_F: MAD_FIELDS = 336;
pub const IB_PESC_ERR_DET_CTR_LANE5_F: MAD_FIELDS = 337;
pub const IB_PESC_ERR_DET_CTR_LANE6_F: MAD_FIELDS = 338;
pub const IB_PESC_ERR_DET_CTR_LANE7_F: MAD_FIELDS = 339;
pub const IB_PESC_ERR_DET_CTR_LANE8_F: MAD_FIELDS = 340;
pub const IB_PESC_ERR_DET_CTR_LANE9_F: MAD_FIELDS = 341;
pub const IB_PESC_ERR_DET_CTR_LANE10_F: MAD_FIELDS = 342;
pub const IB_PESC_ERR_DET_CTR_LANE11_F: MAD_FIELDS = 343;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE0_F: MAD_FIELDS = 344;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE1_F: MAD_FIELDS = 345;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE2_F: MAD_FIELDS = 346;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE3_F: MAD_FIELDS = 347;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE4_F: MAD_FIELDS = 348;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE5_F: MAD_FIELDS = 349;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE6_F: MAD_FIELDS = 350;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE7_F: MAD_FIELDS = 351;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE8_F: MAD_FIELDS = 352;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE9_F: MAD_FIELDS = 353;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE10_F: MAD_FIELDS = 354;
pub const IB_PESC_FEC_CORR_BLOCK_CTR_LANE11_F: MAD_FIELDS = 355;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE0_F: MAD_FIELDS = 356;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE1_F: MAD_FIELDS = 357;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE2_F: MAD_FIELDS = 358;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE3_F: MAD_FIELDS = 359;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE4_F: MAD_FIELDS = 360;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE5_F: MAD_FIELDS = 361;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE6_F: MAD_FIELDS = 362;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE7_F: MAD_FIELDS = 363;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE8_F: MAD_FIELDS = 364;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE9_F: MAD_FIELDS = 365;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE10_F: MAD_FIELDS = 366;
pub const IB_PESC_FEC_UNCORR_BLOCK_CTR_LANE11_F: MAD_FIELDS = 367;
pub const IB_PESC_LAST_F: MAD_FIELDS = 368;
pub const IB_PC_PORT_OP_RCV_COUNTERS_FIRST_F: MAD_FIELDS = 369;
pub const IB_PC_PORT_OP_RCV_PKTS_F: MAD_FIELDS = 369;
pub const IB_PC_PORT_OP_RCV_DATA_F: MAD_FIELDS = 370;
pub const IB_PC_PORT_OP_RCV_COUNTERS_LAST_F: MAD_FIELDS = 371;
pub const IB_PC_PORT_FLOW_CTL_COUNTERS_FIRST_F: MAD_FIELDS = 372;
pub const IB_PC_PORT_XMIT_FLOW_PKTS_F: MAD_FIELDS = 372;
pub const IB_PC_PORT_RCV_FLOW_PKTS_F: MAD_FIELDS = 373;
pub const IB_PC_PORT_FLOW_CTL_COUNTERS_LAST_F: MAD_FIELDS = 374;
pub const IB_PC_PORT_VL_OP_PACKETS_FIRST_F: MAD_FIELDS = 375;
pub const IB_PC_PORT_VL_OP_PACKETS0_F: MAD_FIELDS = 375;
pub const IB_PC_PORT_VL_OP_PACKETS1_F: MAD_FIELDS = 376;
pub const IB_PC_PORT_VL_OP_PACKETS2_F: MAD_FIELDS = 377;
pub const IB_PC_PORT_VL_OP_PACKETS3_F: MAD_FIELDS = 378;
pub const IB_PC_PORT_VL_OP_PACKETS4_F: MAD_FIELDS = 379;
pub const IB_PC_PORT_VL_OP_PACKETS5_F: MAD_FIELDS = 380;
pub const IB_PC_PORT_VL_OP_PACKETS6_F: MAD_FIELDS = 381;
pub const IB_PC_PORT_VL_OP_PACKETS7_F: MAD_FIELDS = 382;
pub const IB_PC_PORT_VL_OP_PACKETS8_F: MAD_FIELDS = 383;
pub const IB_PC_PORT_VL_OP_PACKETS9_F: MAD_FIELDS = 384;
pub const IB_PC_PORT_VL_OP_PACKETS10_F: MAD_FIELDS = 385;
pub const IB_PC_PORT_VL_OP_PACKETS11_F: MAD_FIELDS = 386;
pub const IB_PC_PORT_VL_OP_PACKETS12_F: MAD_FIELDS = 387;
pub const IB_PC_PORT_VL_OP_PACKETS13_F: MAD_FIELDS = 388;
pub const IB_PC_PORT_VL_OP_PACKETS14_F: MAD_FIELDS = 389;
pub const IB_PC_PORT_VL_OP_PACKETS15_F: MAD_FIELDS = 390;
pub const IB_PC_PORT_VL_OP_PACKETS_LAST_F: MAD_FIELDS = 391;
pub const IB_PC_PORT_VL_OP_DATA_FIRST_F: MAD_FIELDS = 392;
pub const IB_PC_PORT_VL_OP_DATA0_F: MAD_FIELDS = 392;
pub const IB_PC_PORT_VL_OP_DATA1_F: MAD_FIELDS = 393;
pub const IB_PC_PORT_VL_OP_DATA2_F: MAD_FIELDS = 394;
pub const IB_PC_PORT_VL_OP_DATA3_F: MAD_FIELDS = 395;
pub const IB_PC_PORT_VL_OP_DATA4_F: MAD_FIELDS = 396;
pub const IB_PC_PORT_VL_OP_DATA5_F: MAD_FIELDS = 397;
pub const IB_PC_PORT_VL_OP_DATA6_F: MAD_FIELDS = 398;
pub const IB_PC_PORT_VL_OP_DATA7_F: MAD_FIELDS = 399;
pub const IB_PC_PORT_VL_OP_DATA8_F: MAD_FIELDS = 400;
pub const IB_PC_PORT_VL_OP_DATA9_F: MAD_FIELDS = 401;
pub const IB_PC_PORT_VL_OP_DATA10_F: MAD_FIELDS = 402;
pub const IB_PC_PORT_VL_OP_DATA11_F: MAD_FIELDS = 403;
pub const IB_PC_PORT_VL_OP_DATA12_F: MAD_FIELDS = 404;
pub const IB_PC_PORT_VL_OP_DATA13_F: MAD_FIELDS = 405;
pub const IB_PC_PORT_VL_OP_DATA14_F: MAD_FIELDS = 406;
pub const IB_PC_PORT_VL_OP_DATA15_F: MAD_FIELDS = 407;
pub const IB_PC_PORT_VL_OP_DATA_LAST_F: MAD_FIELDS = 408;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS_FIRST_F: MAD_FIELDS = 409;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS0_F: MAD_FIELDS = 409;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS1_F: MAD_FIELDS = 410;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS2_F: MAD_FIELDS = 411;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS3_F: MAD_FIELDS = 412;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS4_F: MAD_FIELDS = 413;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS5_F: MAD_FIELDS = 414;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS6_F: MAD_FIELDS = 415;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS7_F: MAD_FIELDS = 416;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS8_F: MAD_FIELDS = 417;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS9_F: MAD_FIELDS = 418;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS10_F: MAD_FIELDS = 419;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS11_F: MAD_FIELDS = 420;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS12_F: MAD_FIELDS = 421;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS13_F: MAD_FIELDS = 422;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS14_F: MAD_FIELDS = 423;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS15_F: MAD_FIELDS = 424;
pub const IB_PC_PORT_VL_XMIT_FLOW_CTL_UPDATE_ERRORS_LAST_F: MAD_FIELDS = 425;
pub const IB_PC_PORT_VL_XMIT_WAIT_COUNTERS_FIRST_F: MAD_FIELDS = 426;
pub const IB_PC_PORT_VL_XMIT_WAIT0_F: MAD_FIELDS = 426;
pub const IB_PC_PORT_VL_XMIT_WAIT1_F: MAD_FIELDS = 427;
pub const IB_PC_PORT_VL_XMIT_WAIT2_F: MAD_FIELDS = 428;
pub const IB_PC_PORT_VL_XMIT_WAIT3_F: MAD_FIELDS = 429;
pub const IB_PC_PORT_VL_XMIT_WAIT4_F: MAD_FIELDS = 430;
pub const IB_PC_PORT_VL_XMIT_WAIT5_F: MAD_FIELDS = 431;
pub const IB_PC_PORT_VL_XMIT_WAIT6_F: MAD_FIELDS = 432;
pub const IB_PC_PORT_VL_XMIT_WAIT7_F: MAD_FIELDS = 433;
pub const IB_PC_PORT_VL_XMIT_WAIT8_F: MAD_FIELDS = 434;
pub const IB_PC_PORT_VL_XMIT_WAIT9_F: MAD_FIELDS = 435;
pub const IB_PC_PORT_VL_XMIT_WAIT10_F: MAD_FIELDS = 436;
pub const IB_PC_PORT_VL_XMIT_WAIT11_F: MAD_FIELDS = 437;
pub const IB_PC_PORT_VL_XMIT_WAIT12_F: MAD_FIELDS = 438;
pub const IB_PC_PORT_VL_XMIT_WAIT13_F: MAD_FIELDS = 439;
pub const IB_PC_PORT_VL_XMIT_WAIT14_F: MAD_FIELDS = 440;
pub const IB_PC_PORT_VL_XMIT_WAIT15_F: MAD_FIELDS = 441;
pub const IB_PC_PORT_VL_XMIT_WAIT_COUNTERS_LAST_F: MAD_FIELDS = 442;
pub const IB_PC_SW_PORT_VL_CONGESTION_FIRST_F: MAD_FIELDS = 443;
pub const IB_PC_SW_PORT_VL_CONGESTION0_F: MAD_FIELDS = 443;
pub const IB_PC_SW_PORT_VL_CONGESTION1_F: MAD_FIELDS = 444;
pub const IB_PC_SW_PORT_VL_CONGESTION2_F: MAD_FIELDS = 445;
pub const IB_PC_SW_PORT_VL_CONGESTION3_F: MAD_FIELDS = 446;
pub const IB_PC_SW_PORT_VL_CONGESTION4_F: MAD_FIELDS = 447;
pub const IB_PC_SW_PORT_VL_CONGESTION5_F: MAD_FIELDS = 448;
pub const IB_PC_SW_PORT_VL_CONGESTION6_F: MAD_FIELDS = 449;
pub const IB_PC_SW_PORT_VL_CONGESTION7_F: MAD_FIELDS = 450;
pub const IB_PC_SW_PORT_VL_CONGESTION8_F: MAD_FIELDS = 451;
pub const IB_PC_SW_PORT_VL_CONGESTION9_F: MAD_FIELDS = 452;
pub const IB_PC_SW_PORT_VL_CONGESTION10_F: MAD_FIELDS = 453;
pub const IB_PC_SW_PORT_VL_CONGESTION11_F: MAD_FIELDS = 454;
pub const IB_PC_SW_PORT_VL_CONGESTION12_F: MAD_FIELDS = 455;
pub const IB_PC_SW_PORT_VL_CONGESTION13_F: MAD_FIELDS = 456;
pub const IB_PC_SW_PORT_VL_CONGESTION14_F: MAD_FIELDS = 457;
pub const IB_PC_SW_PORT_VL_CONGESTION15_F: MAD_FIELDS = 458;
pub const IB_PC_SW_PORT_VL_CONGESTION_LAST_F: MAD_FIELDS = 459;
pub const IB_PC_RCV_CON_CTRL_FIRST_F: MAD_FIELDS = 460;
pub const IB_PC_RCV_CON_CTRL_PKT_RCV_FECN_F: MAD_FIELDS = 460;
pub const IB_PC_RCV_CON_CTRL_PKT_RCV_BECN_F: MAD_FIELDS = 461;
pub const IB_PC_RCV_CON_CTRL_LAST_F: MAD_FIELDS = 462;
pub const IB_PC_SL_RCV_FECN_FIRST_F: MAD_FIELDS = 463;
pub const IB_PC_SL_RCV_FECN0_F: MAD_FIELDS = 463;
pub const IB_PC_SL_RCV_FECN1_F: MAD_FIELDS = 464;
pub const IB_PC_SL_RCV_FECN2_F: MAD_FIELDS = 465;
pub const IB_PC_SL_RCV_FECN3_F: MAD_FIELDS = 466;
pub const IB_PC_SL_RCV_FECN4_F: MAD_FIELDS = 467;
pub const IB_PC_SL_RCV_FECN5_F: MAD_FIELDS = 468;
pub const IB_PC_SL_RCV_FECN6_F: MAD_FIELDS = 469;
pub const IB_PC_SL_RCV_FECN7_F: MAD_FIELDS = 470;
pub const IB_PC_SL_RCV_FECN8_F: MAD_FIELDS = 471;
pub const IB_PC_SL_RCV_FECN9_F: MAD_FIELDS = 472;
pub const IB_PC_SL_RCV_FECN10_F: MAD_FIELDS = 473;
pub const IB_PC_SL_RCV_FECN11_F: MAD_FIELDS = 474;
pub const IB_PC_SL_RCV_FECN12_F: MAD_FIELDS = 475;
pub const IB_PC_SL_RCV_FECN13_F: MAD_FIELDS = 476;
pub const IB_PC_SL_RCV_FECN14_F: MAD_FIELDS = 477;
pub const IB_PC_SL_RCV_FECN15_F: MAD_FIELDS = 478;
pub const IB_PC_SL_RCV_FECN_LAST_F: MAD_FIELDS = 479;
pub const IB_PC_SL_RCV_BECN_FIRST_F: MAD_FIELDS = 480;
pub const IB_PC_SL_RCV_BECN0_F: MAD_FIELDS = 480;
pub const IB_PC_SL_RCV_BECN1_F: MAD_FIELDS = 481;
pub const IB_PC_SL_RCV_BECN2_F: MAD_FIELDS = 482;
pub const IB_PC_SL_RCV_BECN3_F: MAD_FIELDS = 483;
pub const IB_PC_SL_RCV_BECN4_F: MAD_FIELDS = 484;
pub const IB_PC_SL_RCV_BECN5_F: MAD_FIELDS = 485;
pub const IB_PC_SL_RCV_BECN6_F: MAD_FIELDS = 486;
pub const IB_PC_SL_RCV_BECN7_F: MAD_FIELDS = 487;
pub const IB_PC_SL_RCV_BECN8_F: MAD_FIELDS = 488;
pub const IB_PC_SL_RCV_BECN9_F: MAD_FIELDS = 489;
pub const IB_PC_SL_RCV_BECN10_F: MAD_FIELDS = 490;
pub const IB_PC_SL_RCV_BECN11_F: MAD_FIELDS = 491;
pub const IB_PC_SL_RCV_BECN12_F: MAD_FIELDS = 492;
pub const IB_PC_SL_RCV_BECN13_F: MAD_FIELDS = 493;
pub const IB_PC_SL_RCV_BECN14_F: MAD_FIELDS = 494;
pub const IB_PC_SL_RCV_BECN15_F: MAD_FIELDS = 495;
pub const IB_PC_SL_RCV_BECN_LAST_F: MAD_FIELDS = 496;
pub const IB_PC_XMIT_CON_CTRL_FIRST_F: MAD_FIELDS = 497;
pub const IB_PC_XMIT_CON_CTRL_TIME_CONG_F: MAD_FIELDS = 497;
pub const IB_PC_XMIT_CON_CTRL_LAST_F: MAD_FIELDS = 498;
pub const IB_PC_VL_XMIT_TIME_CONG_FIRST_F: MAD_FIELDS = 499;
pub const IB_PC_VL_XMIT_TIME_CONG0_F: MAD_FIELDS = 499;
pub const IB_PC_VL_XMIT_TIME_CONG1_F: MAD_FIELDS = 500;
pub const IB_PC_VL_XMIT_TIME_CONG2_F: MAD_FIELDS = 501;
pub const IB_PC_VL_XMIT_TIME_CONG3_F: MAD_FIELDS = 502;
pub const IB_PC_VL_XMIT_TIME_CONG4_F: MAD_FIELDS = 503;
pub const IB_PC_VL_XMIT_TIME_CONG5_F: MAD_FIELDS = 504;
pub const IB_PC_VL_XMIT_TIME_CONG6_F: MAD_FIELDS = 505;
pub const IB_PC_VL_XMIT_TIME_CONG7_F: MAD_FIELDS = 506;
pub const IB_PC_VL_XMIT_TIME_CONG8_F: MAD_FIELDS = 507;
pub const IB_PC_VL_XMIT_TIME_CONG9_F: MAD_FIELDS = 508;
pub const IB_PC_VL_XMIT_TIME_CONG10_F: MAD_FIELDS = 509;
pub const IB_PC_VL_XMIT_TIME_CONG11_F: MAD_FIELDS = 510;
pub const IB_PC_VL_XMIT_TIME_CONG12_F: MAD_FIELDS = 511;
pub const IB_PC_VL_XMIT_TIME_CONG13_F: MAD_FIELDS = 512;
pub const IB_PC_VL_XMIT_TIME_CONG14_F: MAD_FIELDS = 513;
pub const IB_PC_VL_XMIT_TIME_CONG_LAST_F: MAD_FIELDS = 514;
pub const IB_MLNX_EXT_PORT_STATE_CHG_ENABLE_F: MAD_FIELDS = 515;
pub const IB_MLNX_EXT_PORT_LINK_SPEED_SUPPORTED_F: MAD_FIELDS = 516;
pub const IB_MLNX_EXT_PORT_LINK_SPEED_ENABLED_F: MAD_FIELDS = 517;
pub const IB_MLNX_EXT_PORT_LINK_SPEED_ACTIVE_F: MAD_FIELDS = 518;
pub const IB_MLNX_EXT_PORT_LAST_F: MAD_FIELDS = 519;
pub const IB_CC_CCKEY_F: MAD_FIELDS = 520;
pub const IB_CC_CONGESTION_INFO_FIRST_F: MAD_FIELDS = 521;
pub const IB_CC_CONGESTION_INFO_F: MAD_FIELDS = 521;
pub const IB_CC_CONGESTION_INFO_CONTROL_TABLE_CAP_F: MAD_FIELDS = 522;
pub const IB_CC_CONGESTION_INFO_LAST_F: MAD_FIELDS = 523;
pub const IB_CC_CONGESTION_KEY_INFO_FIRST_F: MAD_FIELDS = 524;
pub const IB_CC_CONGESTION_KEY_INFO_CC_KEY_F: MAD_FIELDS = 524;
pub const IB_CC_CONGESTION_KEY_INFO_CC_KEY_PROTECT_BIT_F: MAD_FIELDS = 525;
pub const IB_CC_CONGESTION_KEY_INFO_CC_KEY_LEASE_PERIOD_F: MAD_FIELDS = 526;
pub const IB_CC_CONGESTION_KEY_INFO_CC_KEY_VIOLATIONS_F: MAD_FIELDS = 527;
pub const IB_CC_CONGESTION_KEY_INFO_LAST_F: MAD_FIELDS = 528;
pub const IB_CC_CONGESTION_LOG_FIRST_F: MAD_FIELDS = 529;
pub const IB_CC_CONGESTION_LOG_LOGTYPE_F: MAD_FIELDS = 529;
pub const IB_CC_CONGESTION_LOG_CONGESTION_FLAGS_F: MAD_FIELDS = 530;
pub const IB_CC_CONGESTION_LOG_LAST_F: MAD_FIELDS = 531;
pub const IB_CC_CONGESTION_LOG_SWITCH_FIRST_F: MAD_FIELDS = 532;
pub const IB_CC_CONGESTION_LOG_SWITCH_LOG_EVENTS_COUNTER_F: MAD_FIELDS = 532;
pub const IB_CC_CONGESTION_LOG_SWITCH_CURRENT_TIME_STAMP_F: MAD_FIELDS = 533;
pub const IB_CC_CONGESTION_LOG_SWITCH_PORTMAP_F: MAD_FIELDS = 534;
pub const IB_CC_CONGESTION_LOG_SWITCH_LAST_F: MAD_FIELDS = 535;
pub const IB_CC_CONGESTION_LOG_ENTRY_SWITCH_FIRST_F: MAD_FIELDS = 536;
pub const IB_CC_CONGESTION_LOG_ENTRY_SWITCH_SLID_F: MAD_FIELDS = 536;
pub const IB_CC_CONGESTION_LOG_ENTRY_SWITCH_DLID_F: MAD_FIELDS = 537;
pub const IB_CC_CONGESTION_LOG_ENTRY_SWITCH_SL_F: MAD_FIELDS = 538;
pub const IB_CC_CONGESTION_LOG_ENTRY_SWITCH_TIMESTAMP_F: MAD_FIELDS = 539;
pub const IB_CC_CONGESTION_LOG_ENTRY_SWITCH_LAST_F: MAD_FIELDS = 540;
pub const IB_CC_CONGESTION_LOG_CA_FIRST_F: MAD_FIELDS = 541;
pub const IB_CC_CONGESTION_LOG_CA_THRESHOLD_EVENT_COUNTER_F: MAD_FIELDS = 541;
pub const IB_CC_CONGESTION_LOG_CA_THRESHOLD_CONGESTION_EVENT_MAP_F: MAD_FIELDS = 542;
pub const IB_CC_CONGESTION_LOG_CA_CURRENT_TIMESTAMP_F: MAD_FIELDS = 543;
pub const IB_CC_CONGESTION_LOG_CA_LAST_F: MAD_FIELDS = 544;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_FIRST_F: MAD_FIELDS = 545;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_LOCAL_QP_CN_ENTRY_F: MAD_FIELDS = 545;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_SL_CN_ENTRY_F: MAD_FIELDS = 546;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_SERVICE_TYPE_CN_ENTRY_F: MAD_FIELDS = 547;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_REMOTE_QP_NUMBER_CN_ENTRY_F: MAD_FIELDS = 548;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_LOCAL_LID_CN_F: MAD_FIELDS = 549;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_REMOTE_LID_CN_ENTRY_F: MAD_FIELDS = 550;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_TIMESTAMP_CN_ENTRY_F: MAD_FIELDS = 551;
pub const IB_CC_CONGESTION_LOG_ENTRY_CA_LAST_F: MAD_FIELDS = 552;
pub const IB_CC_SWITCH_CONGESTION_SETTING_FIRST_F: MAD_FIELDS = 553;
pub const IB_CC_SWITCH_CONGESTION_SETTING_CONTROL_MAP_F: MAD_FIELDS = 553;
pub const IB_CC_SWITCH_CONGESTION_SETTING_VICTIM_MASK_F: MAD_FIELDS = 554;
pub const IB_CC_SWITCH_CONGESTION_SETTING_CREDIT_MASK_F: MAD_FIELDS = 555;
pub const IB_CC_SWITCH_CONGESTION_SETTING_THRESHOLD_F: MAD_FIELDS = 556;
pub const IB_CC_SWITCH_CONGESTION_SETTING_PACKET_SIZE_F: MAD_FIELDS = 557;
pub const IB_CC_SWITCH_CONGESTION_SETTING_CS_THRESHOLD_F: MAD_FIELDS = 558;
pub const IB_CC_SWITCH_CONGESTION_SETTING_CS_RETURN_DELAY_F: MAD_FIELDS = 559;
pub const IB_CC_SWITCH_CONGESTION_SETTING_MARKING_RATE_F: MAD_FIELDS = 560;
pub const IB_CC_SWITCH_CONGESTION_SETTING_LAST_F: MAD_FIELDS = 561;
pub const IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_FIRST_F: MAD_FIELDS = 562;
pub const IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_VALID_F: MAD_FIELDS = 562;
pub const IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_CONTROL_TYPE_F: MAD_FIELDS = 563;
pub const IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_THRESHOLD_F: MAD_FIELDS = 564;
pub const IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_PACKET_SIZE_F: MAD_FIELDS = 565;
pub const IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_CONG_PARM_MARKING_RATE_F: MAD_FIELDS = 566;
pub const IB_CC_SWITCH_PORT_CONGESTION_SETTING_ELEMENT_LAST_F: MAD_FIELDS = 567;
pub const IB_CC_CA_CONGESTION_SETTING_FIRST_F: MAD_FIELDS = 568;
pub const IB_CC_CA_CONGESTION_SETTING_PORT_CONTROL_F: MAD_FIELDS = 568;
pub const IB_CC_CA_CONGESTION_SETTING_CONTROL_MAP_F: MAD_FIELDS = 569;
pub const IB_CC_CA_CONGESTION_SETTING_LAST_F: MAD_FIELDS = 570;
pub const IB_CC_CA_CONGESTION_ENTRY_FIRST_F: MAD_FIELDS = 571;
pub const IB_CC_CA_CONGESTION_ENTRY_CCTI_TIMER_F: MAD_FIELDS = 571;
pub const IB_CC_CA_CONGESTION_ENTRY_CCTI_INCREASE_F: MAD_FIELDS = 572;
pub const IB_CC_CA_CONGESTION_ENTRY_TRIGGER_THRESHOLD_F: MAD_FIELDS = 573;
pub const IB_CC_CA_CONGESTION_ENTRY_CCTI_MIN_F: MAD_FIELDS = 574;
pub const IB_CC_CA_CONGESTION_ENTRY_LAST_F: MAD_FIELDS = 575;
pub const IB_CC_CONGESTION_CONTROL_TABLE_FIRST_F: MAD_FIELDS = 576;
pub const IB_CC_CONGESTION_CONTROL_TABLE_CCTI_LIMIT_F: MAD_FIELDS = 576;
pub const IB_CC_CONGESTION_CONTROL_TABLE_LAST_F: MAD_FIELDS = 577;
pub const IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_FIRST_F: MAD_FIELDS = 578;
pub const IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_CCT_SHIFT_F: MAD_FIELDS = 578;
pub const IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_CCT_MULTIPLIER_F: MAD_FIELDS = 579;
pub const IB_CC_CONGESTION_CONTROL_TABLE_ENTRY_LAST_F: MAD_FIELDS = 580;
pub const IB_CC_TIMESTAMP_FIRST_F: MAD_FIELDS = 581;
pub const IB_CC_TIMESTAMP_F: MAD_FIELDS = 581;
pub const IB_CC_TIMESTAMP_LAST_F: MAD_FIELDS = 582;
pub const IB_SA_NR_FIRST_F: MAD_FIELDS = 583;
pub const IB_SA_NR_LID_F: MAD_FIELDS = 583;
pub const IB_SA_NR_BASEVER_F: MAD_FIELDS = 584;
pub const IB_SA_NR_CLASSVER_F: MAD_FIELDS = 585;
pub const IB_SA_NR_TYPE_F: MAD_FIELDS = 586;
pub const IB_SA_NR_NPORTS_F: MAD_FIELDS = 587;
pub const IB_SA_NR_SYSTEM_GUID_F: MAD_FIELDS = 588;
pub const IB_SA_NR_GUID_F: MAD_FIELDS = 589;
pub const IB_SA_NR_PORT_GUID_F: MAD_FIELDS = 590;
pub const IB_SA_NR_PARTITION_CAP_F: MAD_FIELDS = 591;
pub const IB_SA_NR_DEVID_F: MAD_FIELDS = 592;
pub const IB_SA_NR_REVISION_F: MAD_FIELDS = 593;
pub const IB_SA_NR_LOCAL_PORT_F: MAD_FIELDS = 594;
pub const IB_SA_NR_VENDORID_F: MAD_FIELDS = 595;
pub const IB_SA_NR_NODEDESC_F: MAD_FIELDS = 596;
pub const IB_SA_NR_LAST_F: MAD_FIELDS = 597;
pub const IB_PSR_TAG_F: MAD_FIELDS = 598;
pub const IB_PSR_SAMPLE_STATUS_F: MAD_FIELDS = 599;
pub const IB_PSR_COUNTER0_F: MAD_FIELDS = 600;
pub const IB_PSR_COUNTER1_F: MAD_FIELDS = 601;
pub const IB_PSR_COUNTER2_F: MAD_FIELDS = 602;
pub const IB_PSR_COUNTER3_F: MAD_FIELDS = 603;
pub const IB_PSR_COUNTER4_F: MAD_FIELDS = 604;
pub const IB_PSR_COUNTER5_F: MAD_FIELDS = 605;
pub const IB_PSR_COUNTER6_F: MAD_FIELDS = 606;
pub const IB_PSR_COUNTER7_F: MAD_FIELDS = 607;
pub const IB_PSR_COUNTER8_F: MAD_FIELDS = 608;
pub const IB_PSR_COUNTER9_F: MAD_FIELDS = 609;
pub const IB_PSR_COUNTER10_F: MAD_FIELDS = 610;
pub const IB_PSR_COUNTER11_F: MAD_FIELDS = 611;
pub const IB_PSR_COUNTER12_F: MAD_FIELDS = 612;
pub const IB_PSR_COUNTER13_F: MAD_FIELDS = 613;
pub const IB_PSR_COUNTER14_F: MAD_FIELDS = 614;
pub const IB_PSR_LAST_F: MAD_FIELDS = 615;
pub const IB_PORT_EXT_FIRST_F: MAD_FIELDS = 616;
pub const IB_PORT_EXT_CAPMASK_F: MAD_FIELDS = 616;
pub const IB_PORT_EXT_FEC_MODE_ACTIVE_F: MAD_FIELDS = 617;
pub const IB_PORT_EXT_FDR_FEC_MODE_SUPPORTED_F: MAD_FIELDS = 618;
pub const IB_PORT_EXT_FDR_FEC_MODE_ENABLED_F: MAD_FIELDS = 619;
pub const IB_PORT_EXT_EDR_FEC_MODE_SUPPORTED_F: MAD_FIELDS = 620;
pub const IB_PORT_EXT_EDR_FEC_MODE_ENABLED_F: MAD_FIELDS = 621;
pub const IB_PORT_EXT_LAST_F: MAD_FIELDS = 622;
pub const IB_PESC_RSFEC_FIRST_F: MAD_FIELDS = 623;
pub const IB_PESC_RSFEC_PORT_SELECT_F: MAD_FIELDS = 623;
pub const IB_PESC_RSFEC_COUNTER_SELECT_F: MAD_FIELDS = 624;
pub const IB_PESC_RSFEC_SYNC_HDR_ERR_CTR_F: MAD_FIELDS = 625;
pub const IB_PESC_RSFEC_UNK_BLOCK_CTR_F: MAD_FIELDS = 626;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE0_F: MAD_FIELDS = 627;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE1_F: MAD_FIELDS = 628;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE2_F: MAD_FIELDS = 629;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE3_F: MAD_FIELDS = 630;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE4_F: MAD_FIELDS = 631;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE5_F: MAD_FIELDS = 632;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE6_F: MAD_FIELDS = 633;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE7_F: MAD_FIELDS = 634;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE8_F: MAD_FIELDS = 635;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE9_F: MAD_FIELDS = 636;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE10_F: MAD_FIELDS = 637;
pub const IB_PESC_RSFEC_FEC_CORR_SYMBOL_CTR_LANE11_F: MAD_FIELDS = 638;
pub const IB_PESC_PORT_FEC_CORR_BLOCK_CTR_F: MAD_FIELDS = 639;
pub const IB_PESC_PORT_FEC_UNCORR_BLOCK_CTR_F: MAD_FIELDS = 640;
pub const IB_PESC_PORT_FEC_CORR_SYMBOL_CTR_F: MAD_FIELDS = 641;
pub const IB_PESC_RSFEC_LAST_F: MAD_FIELDS = 642;
pub const IB_PC_EXT_COUNTER_SELECT2_F: MAD_FIELDS = 643;
pub const IB_PC_EXT_ERR_SYM_F: MAD_FIELDS = 644;
pub const IB_PC_EXT_LINK_RECOVERS_F: MAD_FIELDS = 645;
pub const IB_PC_EXT_LINK_DOWNED_F: MAD_FIELDS = 646;
pub const IB_PC_EXT_ERR_RCV_F: MAD_FIELDS = 647;
pub const IB_PC_EXT_ERR_PHYSRCV_F: MAD_FIELDS = 648;
pub const IB_PC_EXT_ERR_SWITCH_REL_F: MAD_FIELDS = 649;
pub const IB_PC_EXT_XMT_DISCARDS_F: MAD_FIELDS = 650;
pub const IB_PC_EXT_ERR_XMTCONSTR_F: MAD_FIELDS = 651;
pub const IB_PC_EXT_ERR_RCVCONSTR_F: MAD_FIELDS = 652;
pub const IB_PC_EXT_ERR_LOCALINTEG_F: MAD_FIELDS = 653;
pub const IB_PC_EXT_ERR_EXCESS_OVR_F: MAD_FIELDS = 654;
pub const IB_PC_EXT_VL15_DROPPED_F: MAD_FIELDS = 655;
pub const IB_PC_EXT_XMT_WAIT_F: MAD_FIELDS = 656;
pub const IB_PC_EXT_QP1_DROP_F: MAD_FIELDS = 657;
pub const IB_PC_EXT_ERR_LAST_F: MAD_FIELDS = 658;
pub const IB_PC_QP1_DROP_F: MAD_FIELDS = 659;
pub const IB_PORT_EXT_HDR_FEC_MODE_SUPPORTED_F: MAD_FIELDS = 660;
pub const IB_PORT_EXT_HDR_FEC_MODE_ENABLED_F: MAD_FIELDS = 661;
pub const IB_PORT_EXT_HDR_FEC_MODE_LAST_F: MAD_FIELDS = 662;
pub const IB_PORT_EXT_NDR_FEC_MODE_SUPPORTED_F: MAD_FIELDS = 663;
pub const IB_PORT_EXT_NDR_FEC_MODE_ENABLED_F: MAD_FIELDS = 664;
pub const IB_PORT_EXT_NDR_FEC_MODE_LAST_F: MAD_FIELDS = 665;
pub const IB_FIELD_LAST_: MAD_FIELDS = 666;
pub type MAD_FIELDS = ::std::os::raw::c_uint;
pub const IB_RMPP_TYPE_NONE: RMPP_TYPE_ENUM = 0;
pub const IB_RMPP_TYPE_DATA: RMPP_TYPE_ENUM = 1;
pub const IB_RMPP_TYPE_ACK: RMPP_TYPE_ENUM = 2;
pub const IB_RMPP_TYPE_STOP: RMPP_TYPE_ENUM = 3;
pub const IB_RMPP_TYPE_ABORT: RMPP_TYPE_ENUM = 4;
pub type RMPP_TYPE_ENUM = ::std::os::raw::c_uint;
pub const IB_RMPP_FLAG_ACTIVE: RMPP_FLAGS_ENUM = 1;
pub const IB_RMPP_FLAG_FIRST: RMPP_FLAGS_ENUM = 2;
pub const IB_RMPP_FLAG_LAST: RMPP_FLAGS_ENUM = 4;
pub type RMPP_FLAGS_ENUM = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_rmpp_hdr_t {
    pub type_: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub status: ::std::os::raw::c_int,
    pub d1: ib_rmpp_hdr_t__bindgen_ty_1,
    pub d2: ib_rmpp_hdr_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_rmpp_hdr_t__bindgen_ty_1 {
    pub u: u32,
    pub segnum: u32,
}
#[test]
fn bindgen_test_layout_ib_rmpp_hdr_t__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_rmpp_hdr_t__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_rmpp_hdr_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(ib_rmpp_hdr_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_rmpp_hdr_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_rmpp_hdr_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).segnum) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t__bindgen_ty_1),
            "::",
            stringify!(segnum)
        )
    );
}
impl Default for ib_rmpp_hdr_t__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_rmpp_hdr_t__bindgen_ty_2 {
    pub u: u32,
    pub len: u32,
    pub newwin: u32,
}
#[test]
fn bindgen_test_layout_ib_rmpp_hdr_t__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ib_rmpp_hdr_t__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_rmpp_hdr_t__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(ib_rmpp_hdr_t__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_rmpp_hdr_t__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_rmpp_hdr_t__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t__bindgen_ty_2),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).len) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t__bindgen_ty_2),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newwin) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t__bindgen_ty_2),
            "::",
            stringify!(newwin)
        )
    );
}
impl Default for ib_rmpp_hdr_t__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_rmpp_hdr_t() {
    const UNINIT: ::std::mem::MaybeUninit<ib_rmpp_hdr_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_rmpp_hdr_t>(),
        20usize,
        concat!("Size of: ", stringify!(ib_rmpp_hdr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_rmpp_hdr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_rmpp_hdr_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d1) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t),
            "::",
            stringify!(d1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_rmpp_hdr_t),
            "::",
            stringify!(d2)
        )
    );
}
impl Default for ib_rmpp_hdr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const SA_HEADER_SZ: SA_SIZES_ENUM = 20;
pub type SA_SIZES_ENUM = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_sa_call {
    pub attrid: ::std::os::raw::c_uint,
    pub mod_: ::std::os::raw::c_uint,
    pub mask: u64,
    pub method: ::std::os::raw::c_uint,
    pub trid: u64,
    pub recsz: ::std::os::raw::c_uint,
    pub rmpp: ib_rmpp_hdr_t,
}
#[test]
fn bindgen_test_layout_ib_sa_call() {
    const UNINIT: ::std::mem::MaybeUninit<ib_sa_call> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_sa_call>(),
        56usize,
        concat!("Size of: ", stringify!(ib_sa_call))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_sa_call>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_sa_call))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_sa_call),
            "::",
            stringify!(attrid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_sa_call),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_sa_call),
            "::",
            stringify!(mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_sa_call),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).trid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_sa_call),
            "::",
            stringify!(trid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recsz) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_sa_call),
            "::",
            stringify!(recsz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmpp) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_sa_call),
            "::",
            stringify!(rmpp)
        )
    );
}
impl Default for ib_sa_call {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ib_sa_call_t = ib_sa_call;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_vendor_call {
    pub method: ::std::os::raw::c_uint,
    pub mgmt_class: ::std::os::raw::c_uint,
    pub attrid: ::std::os::raw::c_uint,
    pub mod_: ::std::os::raw::c_uint,
    pub oui: u32,
    pub timeout: ::std::os::raw::c_uint,
    pub rmpp: ib_rmpp_hdr_t,
}
#[test]
fn bindgen_test_layout_ib_vendor_call() {
    const UNINIT: ::std::mem::MaybeUninit<ib_vendor_call> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_vendor_call>(),
        44usize,
        concat!("Size of: ", stringify!(ib_vendor_call))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_vendor_call>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_vendor_call))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_vendor_call),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgmt_class) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_vendor_call),
            "::",
            stringify!(mgmt_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_vendor_call),
            "::",
            stringify!(attrid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_vendor_call),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oui) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_vendor_call),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_vendor_call),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmpp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_vendor_call),
            "::",
            stringify!(rmpp)
        )
    );
}
impl Default for ib_vendor_call {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ib_vendor_call_t = ib_vendor_call;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_bm_call {
    pub method: ::std::os::raw::c_uint,
    pub attrid: ::std::os::raw::c_uint,
    pub mod_: ::std::os::raw::c_uint,
    pub timeout: ::std::os::raw::c_uint,
    pub bkey: u64,
}
#[test]
fn bindgen_test_layout_ib_bm_call() {
    const UNINIT: ::std::mem::MaybeUninit<ib_bm_call> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_bm_call>(),
        24usize,
        concat!("Size of: ", stringify!(ib_bm_call))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_bm_call>(),
        8usize,
        concat!("Alignment of ", stringify!(ib_bm_call))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_bm_call),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_bm_call),
            "::",
            stringify!(attrid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mod_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_bm_call),
            "::",
            stringify!(mod_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_bm_call),
            "::",
            stringify!(timeout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bkey) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_bm_call),
            "::",
            stringify!(bkey)
        )
    );
}
pub type ib_bm_call_t = ib_bm_call;
pub const IB_DEST_LID: MAD_DEST = 0;
pub const IB_DEST_DRPATH: MAD_DEST = 1;
pub const IB_DEST_GUID: MAD_DEST = 2;
pub const IB_DEST_DRSLID: MAD_DEST = 3;
pub const IB_DEST_GID: MAD_DEST = 4;
pub type MAD_DEST = ::std::os::raw::c_uint;
pub const IB_NODE_CA: MAD_NODE_TYPE = 1;
pub const IB_NODE_SWITCH: MAD_NODE_TYPE = 2;
pub const IB_NODE_ROUTER: MAD_NODE_TYPE = 3;
pub const NODE_RNIC: MAD_NODE_TYPE = 4;
pub const IB_NODE_MAX: MAD_NODE_TYPE = 4;
pub type MAD_NODE_TYPE = ::std::os::raw::c_uint;
extern "C" {
    pub fn portid2str(portid: *mut ib_portid_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn portid2portnum(portid: *mut ib_portid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn str2drpath(
        path: *mut ib_dr_path_t,
        routepath: *mut ::std::os::raw::c_char,
        drslid: ::std::os::raw::c_int,
        drdlid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drpath2str(
        path: *mut ib_dr_path_t,
        dstr: *mut ::std::os::raw::c_char,
        dstr_size: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mad_get_field(
        buf: *mut ::std::os::raw::c_void,
        base_offs: ::std::os::raw::c_int,
        field: MAD_FIELDS,
    ) -> u32;
}
extern "C" {
    pub fn mad_set_field(
        buf: *mut ::std::os::raw::c_void,
        base_offs: ::std::os::raw::c_int,
        field: MAD_FIELDS,
        val: u32,
    );
}
extern "C" {
    pub fn mad_get_field64(
        buf: *mut ::std::os::raw::c_void,
        base_offs: ::std::os::raw::c_int,
        field: MAD_FIELDS,
    ) -> u64;
}
extern "C" {
    pub fn mad_set_field64(
        buf: *mut ::std::os::raw::c_void,
        base_offs: ::std::os::raw::c_int,
        field: MAD_FIELDS,
        val: u64,
    );
}
extern "C" {
    pub fn mad_set_array(
        buf: *mut ::std::os::raw::c_void,
        base_offs: ::std::os::raw::c_int,
        field: MAD_FIELDS,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mad_get_array(
        buf: *mut ::std::os::raw::c_void,
        base_offs: ::std::os::raw::c_int,
        field: MAD_FIELDS,
        val: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn mad_decode_field(buf: *mut u8, field: MAD_FIELDS, val: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mad_encode_field(buf: *mut u8, field: MAD_FIELDS, val: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mad_print_field(
        field: MAD_FIELDS,
        name: *const ::std::os::raw::c_char,
        val: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_dump_field(
        field: MAD_FIELDS,
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mad_dump_val(
        field: MAD_FIELDS,
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mad_field_name(field: MAD_FIELDS) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mad_encode(
        buf: *mut ::std::os::raw::c_void,
        rpc: *mut ib_rpc_t,
        drpath: *mut ib_dr_path_t,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mad_trid() -> u64;
}
extern "C" {
    pub fn mad_build_pkt(
        umad: *mut ::std::os::raw::c_void,
        rpc: *mut ib_rpc_t,
        dport: *mut ib_portid_t,
        rmpp: *mut ib_rmpp_hdr_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn madrpc_show_errors(set: ::std::os::raw::c_int);
}
extern "C" {
    pub fn madrpc_set_retries(retries: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn madrpc_set_timeout(timeout: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibmad_port {
    _unused: [u8; 0],
}
extern "C" {
    pub fn mad_rpc_open_port(
        dev_name: *mut ::std::os::raw::c_char,
        dev_port: ::std::os::raw::c_int,
        mgmt_classes: *mut ::std::os::raw::c_int,
        num_classes: ::std::os::raw::c_int,
    ) -> *mut ibmad_port;
}
extern "C" {
    pub fn mad_rpc_close_port(srcport: *mut ibmad_port);
}
extern "C" {
    pub fn mad_rpc(
        srcport: *const ibmad_port,
        rpc: *mut ib_rpc_t,
        dport: *mut ib_portid_t,
        payload: *mut ::std::os::raw::c_void,
        rcvdata: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mad_rpc_rmpp(
        srcport: *const ibmad_port,
        rpc: *mut ib_rpc_t,
        dport: *mut ib_portid_t,
        rmpp: *mut ib_rmpp_hdr_t,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mad_rpc_portid(srcport: *mut ibmad_port) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_rpc_set_retries(port: *mut ibmad_port, retries: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mad_rpc_set_timeout(port: *mut ibmad_port, timeout: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mad_rpc_class_agent(
        srcport: *mut ibmad_port,
        cls: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_get_timeout(
        srcport: *const ibmad_port,
        override_ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_get_retries(srcport: *const ibmad_port) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_register_port_client(
        port_id: ::std::os::raw::c_int,
        mgmt: ::std::os::raw::c_int,
        rmpp_version: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_register_client(
        mgmt: ::std::os::raw::c_int,
        rmpp_version: u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_register_server(
        mgmt: ::std::os::raw::c_int,
        rmpp_version: u8,
        method_mask: *mut ::std::os::raw::c_long,
        class_oui: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_register_client_via(
        mgmt: ::std::os::raw::c_int,
        rmpp_version: u8,
        srcport: *mut ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_register_server_via(
        mgmt: ::std::os::raw::c_int,
        rmpp_version: u8,
        method_mask: *mut ::std::os::raw::c_long,
        class_oui: u32,
        srcport: *mut ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_class_agent(mgmt: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_send(
        rpc: *mut ib_rpc_t,
        dport: *mut ib_portid_t,
        rmpp: *mut ib_rmpp_hdr_t,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_receive(
        umad: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mad_respond(
        umad: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        rstatus: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_send_via(
        rpc: *mut ib_rpc_t,
        dport: *mut ib_portid_t,
        rmpp: *mut ib_rmpp_hdr_t,
        data: *mut ::std::os::raw::c_void,
        srcport: *mut ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_receive_via(
        umad: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
        srcport: *mut ibmad_port,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mad_respond_via(
        umad: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        rstatus: u32,
        srcport: *mut ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mad_alloc() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mad_free(umad: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ib_vendor_call(
        data: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        call: *mut ib_vendor_call_t,
    ) -> *mut u8;
}
extern "C" {
    pub fn ib_vendor_call_via(
        data: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        call: *mut ib_vendor_call_t,
        srcport: *mut ibmad_port,
    ) -> *mut u8;
}
extern "C" {
    pub fn madrpc_portid() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn madrpc(
        rpc: *mut ib_rpc_t,
        dport: *mut ib_portid_t,
        payload: *mut ::std::os::raw::c_void,
        rcvdata: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn madrpc_rmpp(
        rpc: *mut ib_rpc_t,
        dport: *mut ib_portid_t,
        rmpp: *mut ib_rmpp_hdr_t,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn madrpc_init(
        dev_name: *mut ::std::os::raw::c_char,
        dev_port: ::std::os::raw::c_int,
        mgmt_classes: *mut ::std::os::raw::c_int,
        num_classes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn madrpc_save_mad(madbuf: *mut ::std::os::raw::c_void, len: ::std::os::raw::c_int);
}
extern "C" {
    pub fn smp_query(
        buf: *mut ::std::os::raw::c_void,
        id: *mut ib_portid_t,
        attrid: ::std::os::raw::c_uint,
        mod_: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
    ) -> *mut u8;
}
extern "C" {
    pub fn smp_set(
        buf: *mut ::std::os::raw::c_void,
        id: *mut ib_portid_t,
        attrid: ::std::os::raw::c_uint,
        mod_: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
    ) -> *mut u8;
}
extern "C" {
    pub fn smp_query_via(
        buf: *mut ::std::os::raw::c_void,
        id: *mut ib_portid_t,
        attrid: ::std::os::raw::c_uint,
        mod_: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
        srcport: *const ibmad_port,
    ) -> *mut u8;
}
extern "C" {
    pub fn smp_set_via(
        buf: *mut ::std::os::raw::c_void,
        id: *mut ib_portid_t,
        attrid: ::std::os::raw::c_uint,
        mod_: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
        srcport: *const ibmad_port,
    ) -> *mut u8;
}
extern "C" {
    pub fn smp_query_status_via(
        rcvbuf: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        attrid: ::std::os::raw::c_uint,
        mod_: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
        rstatus: *mut ::std::os::raw::c_int,
        srcport: *const ibmad_port,
    ) -> *mut u8;
}
extern "C" {
    pub fn smp_set_status_via(
        data: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        attrid: ::std::os::raw::c_uint,
        mod_: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
        rstatus: *mut ::std::os::raw::c_int,
        srcport: *const ibmad_port,
    ) -> *mut u8;
}
extern "C" {
    pub fn smp_mkey_set(srcport: *mut ibmad_port, mkey: u64);
}
extern "C" {
    pub fn smp_mkey_get(srcport: *const ibmad_port) -> u64;
}
extern "C" {
    pub fn cc_query_status_via(
        rcvbuf: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        attrid: ::std::os::raw::c_uint,
        mod_: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
        rstatus: *mut ::std::os::raw::c_int,
        srcport: *const ibmad_port,
        cckey: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cc_config_status_via(
        payload: *mut ::std::os::raw::c_void,
        rcvbuf: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        attrid: ::std::os::raw::c_uint,
        mod_: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
        rstatus: *mut ::std::os::raw::c_int,
        srcport: *const ibmad_port,
        cckey: u64,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sa_call(
        rcvbuf: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        sa: *mut ib_sa_call_t,
        timeout: ::std::os::raw::c_uint,
    ) -> *mut u8;
}
extern "C" {
    pub fn ib_path_query(
        srcgid: *mut u8,
        destgid: *mut u8,
        sm_id: *mut ib_portid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sa_rpc_call(
        srcport: *const ibmad_port,
        rcvbuf: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        sa: *mut ib_sa_call_t,
        timeout: ::std::os::raw::c_uint,
    ) -> *mut u8;
}
extern "C" {
    pub fn ib_path_query_via(
        srcport: *const ibmad_port,
        srcgid: *mut u8,
        destgid: *mut u8,
        sm_id: *mut ib_portid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_node_query_via(
        srcport: *const ibmad_port,
        guid: u64,
        sm_id: *mut ib_portid_t,
        buf: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_resolve_smlid(
        sm_id: *mut ib_portid_t,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_resolve_portid_str(
        portid: *mut ib_portid_t,
        addr_str: *mut ::std::os::raw::c_char,
        dest: MAD_DEST,
        sm_id: *mut ib_portid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_resolve_self(
        portid: *mut ib_portid_t,
        portnum: *mut ::std::os::raw::c_int,
        gid: *mut ibmad_gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_resolve_smlid_via(
        sm_id: *mut ib_portid_t,
        timeout: ::std::os::raw::c_int,
        srcport: *const ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_resolve_guid_via(
        portid: *mut ib_portid_t,
        guid: *mut u64,
        sm_id: *mut ib_portid_t,
        timeout: ::std::os::raw::c_int,
        srcport: *const ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_resolve_gid_via(
        portid: *mut ib_portid_t,
        gid: *mut u8,
        sm_id: *mut ib_portid_t,
        timeout: ::std::os::raw::c_int,
        srcport: *const ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_resolve_portid_str_via(
        portid: *mut ib_portid_t,
        addr_str: *mut ::std::os::raw::c_char,
        dest: MAD_DEST,
        sm_id: *mut ib_portid_t,
        srcport: *const ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ib_resolve_self_via(
        portid: *mut ib_portid_t,
        portnum: *mut ::std::os::raw::c_int,
        gid: *mut ibmad_gid_t,
        srcport: *const ibmad_port,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pma_query_via(
        rcvbuf: *mut ::std::os::raw::c_void,
        dest: *mut ib_portid_t,
        port: ::std::os::raw::c_int,
        timeout: ::std::os::raw::c_uint,
        id: ::std::os::raw::c_uint,
        srcport: *const ibmad_port,
    ) -> *mut u8;
}
extern "C" {
    pub fn performance_reset_via(
        rcvbuf: *mut ::std::os::raw::c_void,
        dest: *mut ib_portid_t,
        port: ::std::os::raw::c_int,
        mask: ::std::os::raw::c_uint,
        timeout: ::std::os::raw::c_uint,
        id: ::std::os::raw::c_uint,
        srcport: *const ibmad_port,
    ) -> *mut u8;
}
extern "C" {
    pub fn bm_call_via(
        data: *mut ::std::os::raw::c_void,
        portid: *mut ib_portid_t,
        call: *mut ib_bm_call_t,
        srcport: *mut ibmad_port,
    ) -> *mut u8;
}
extern "C" {
    pub fn mad_dump_int(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_uint(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_hex(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_rhex(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_bitfield(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_array(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_string(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkwidth(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkwidthsup(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkwidthen(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkdowndefstate(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkspeed(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkspeedsup(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkspeeden(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkspeedext(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkspeedextsup(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_linkspeedexten(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_portstate(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_portstates(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_physportstate(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_portcapmask(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_portcapmask2(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_mtu(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_vlcap(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_opervls(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_node_type(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_sltovl(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_vlarbitration(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_nodedesc(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_nodeinfo(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_portinfo(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_switchinfo(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_ext(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_xmt_sl(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_rcv_sl(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_xmt_disc(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_rcv_err(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_portsamples_control(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_port_ext_speeds_counters(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_port_op_rcv_counters(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_port_flow_ctl_counters(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_port_vl_op_packet(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_port_vl_op_data(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_port_vl_xmit_flow_ctl_update_errors(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_port_vl_xmit_wait_counters(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_sw_port_vl_congestion(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_rcv_con_ctrl(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_sl_rcv_fecn(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_sl_rcv_becn(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_xmit_con_ctrl(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_perfcounters_vl_xmit_time_cong(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_mlnx_ext_port_info(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestioninfo(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestionkeyinfo(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestionlog(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestionlogswitch(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestionlogentryswitch(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestionlogca(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestionlogentryca(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_switchcongestionsetting(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_switchportcongestionsettingelement(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_cacongestionsetting(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_cacongestionentry(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestioncontroltable(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_congestioncontroltableentry(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_cc_timestamp(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_classportinfo(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_portsamples_result(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_portinfo_ext(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_port_ext_speeds_counters_rsfec_active(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mad_dump_fields(
        buf: *mut ::std::os::raw::c_char,
        bufsz: ::std::os::raw::c_int,
        val: *mut ::std::os::raw::c_void,
        valsz: ::std::os::raw::c_int,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub static mut ibdebug: ::std::os::raw::c_int;
}
extern "C" {
    pub fn xdump(
        file: *mut FILE,
        msg: *const ::std::os::raw::c_char,
        p: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
    );
}
pub type be16_t = __be16;
pub type be32_t = __be32;
pub type be64_t = __be64;
#[repr(C, packed(4))]
#[derive(Copy, Clone)]
pub union umad_gid {
    pub raw: [u8; 16usize],
    pub raw_be16: [__be16; 8usize],
    pub global: umad_gid__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct umad_gid__bindgen_ty_1 {
    pub subnet_prefix: __be64,
    pub interface_id: __be64,
}
#[test]
fn bindgen_test_layout_umad_gid__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<umad_gid__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<umad_gid__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(umad_gid__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<umad_gid__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(umad_gid__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).subnet_prefix) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_gid__bindgen_ty_1),
            "::",
            stringify!(subnet_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interface_id) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_gid__bindgen_ty_1),
            "::",
            stringify!(interface_id)
        )
    );
}
#[test]
fn bindgen_test_layout_umad_gid() {
    const UNINIT: ::std::mem::MaybeUninit<umad_gid> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<umad_gid>(),
        16usize,
        concat!("Size of: ", stringify!(umad_gid))
    );
    assert_eq!(
        ::std::mem::align_of::<umad_gid>(),
        4usize,
        concat!("Alignment of ", stringify!(umad_gid))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_gid),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).raw_be16) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_gid),
            "::",
            stringify!(raw_be16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).global) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_gid),
            "::",
            stringify!(global)
        )
    );
}
impl Default for umad_gid {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_mad_addr {
    pub qpn: __be32,
    pub qkey: __be32,
    pub lid: __be16,
    pub sl: u8,
    pub path_bits: u8,
    pub grh_present: u8,
    pub gid_index: u8,
    pub hop_limit: u8,
    pub traffic_class: u8,
    pub __bindgen_anon_1: ib_mad_addr__bindgen_ty_1,
    pub flow_label: __be32,
    pub pkey_index: u16,
    pub reserved: [u8; 6usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_mad_addr__bindgen_ty_1 {
    pub gid: [u8; 16usize],
    pub ib_gid: umad_gid,
}
#[test]
fn bindgen_test_layout_ib_mad_addr__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ib_mad_addr__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_mad_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ib_mad_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_mad_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_mad_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr__bindgen_ty_1),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ib_gid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr__bindgen_ty_1),
            "::",
            stringify!(ib_gid)
        )
    );
}
impl Default for ib_mad_addr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_ib_mad_addr() {
    const UNINIT: ::std::mem::MaybeUninit<ib_mad_addr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_mad_addr>(),
        44usize,
        concat!("Size of: ", stringify!(ib_mad_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_mad_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_mad_addr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qpn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(qpn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).qkey) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(qkey)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sl) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).path_bits) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(path_bits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grh_present) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(grh_present)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid_index) as usize - ptr as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(gid_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hop_limit) as usize - ptr as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(hop_limit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).traffic_class) as usize - ptr as usize },
        15usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(traffic_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flow_label) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(flow_label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkey_index) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(pkey_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        38usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_mad_addr),
            "::",
            stringify!(reserved)
        )
    );
}
impl Default for ib_mad_addr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ib_mad_addr_t = ib_mad_addr;
#[repr(C)]
pub struct ib_user_mad {
    pub agent_id: u32,
    pub status: u32,
    pub timeout_ms: u32,
    pub retries: u32,
    pub length: u32,
    pub addr: ib_mad_addr_t,
    pub data: __IncompleteArrayField<u8>,
}
#[test]
fn bindgen_test_layout_ib_user_mad() {
    const UNINIT: ::std::mem::MaybeUninit<ib_user_mad> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ib_user_mad>(),
        64usize,
        concat!("Size of: ", stringify!(ib_user_mad))
    );
    assert_eq!(
        ::std::mem::align_of::<ib_user_mad>(),
        4usize,
        concat!("Alignment of ", stringify!(ib_user_mad))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).agent_id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_user_mad),
            "::",
            stringify!(agent_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).status) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_user_mad),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).timeout_ms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_user_mad),
            "::",
            stringify!(timeout_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).retries) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_user_mad),
            "::",
            stringify!(retries)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_user_mad),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addr) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_user_mad),
            "::",
            stringify!(addr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ib_user_mad),
            "::",
            stringify!(data)
        )
    );
}
impl Default for ib_user_mad {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type ib_user_mad_t = ib_user_mad;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umad_port {
    pub ca_name: [::std::os::raw::c_char; 20usize],
    pub portnum: ::std::os::raw::c_int,
    pub base_lid: ::std::os::raw::c_uint,
    pub lmc: ::std::os::raw::c_uint,
    pub sm_lid: ::std::os::raw::c_uint,
    pub sm_sl: ::std::os::raw::c_uint,
    pub state: ::std::os::raw::c_uint,
    pub phys_state: ::std::os::raw::c_uint,
    pub rate: ::std::os::raw::c_uint,
    pub capmask: __be32,
    pub gid_prefix: __be64,
    pub port_guid: __be64,
    pub pkeys_size: ::std::os::raw::c_uint,
    pub pkeys: *mut u16,
    pub link_layer: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout_umad_port() {
    const UNINIT: ::std::mem::MaybeUninit<umad_port> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<umad_port>(),
        112usize,
        concat!("Size of: ", stringify!(umad_port))
    );
    assert_eq!(
        ::std::mem::align_of::<umad_port>(),
        8usize,
        concat!("Alignment of ", stringify!(umad_port))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(ca_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).portnum) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(portnum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base_lid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(base_lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmc) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(lmc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_lid) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(sm_lid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sm_sl) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(sm_sl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).phys_state) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(phys_state)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(rate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capmask) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(capmask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid_prefix) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(gid_prefix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port_guid) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(port_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkeys_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(pkeys_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pkeys) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(pkeys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link_layer) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_port),
            "::",
            stringify!(link_layer)
        )
    );
}
impl Default for umad_port {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type umad_port_t = umad_port;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umad_ca {
    pub ca_name: [::std::os::raw::c_char; 20usize],
    pub node_type: ::std::os::raw::c_uint,
    pub numports: ::std::os::raw::c_int,
    pub fw_ver: [::std::os::raw::c_char; 20usize],
    pub ca_type: [::std::os::raw::c_char; 40usize],
    pub hw_ver: [::std::os::raw::c_char; 20usize],
    pub node_guid: __be64,
    pub system_guid: __be64,
    pub ports: [*mut umad_port_t; 10usize],
}
#[test]
fn bindgen_test_layout_umad_ca() {
    const UNINIT: ::std::mem::MaybeUninit<umad_ca> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<umad_ca>(),
        208usize,
        concat!("Size of: ", stringify!(umad_ca))
    );
    assert_eq!(
        ::std::mem::align_of::<umad_ca>(),
        8usize,
        concat!("Alignment of ", stringify!(umad_ca))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(ca_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(node_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numports) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(numports)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fw_ver) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(fw_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca_type) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(ca_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hw_ver) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(hw_ver)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_guid) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(node_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).system_guid) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(system_guid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ports) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_ca),
            "::",
            stringify!(ports)
        )
    );
}
impl Default for umad_ca {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type umad_ca_t = umad_ca;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct umad_device_node {
    pub next: *mut umad_device_node,
    pub ca_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_umad_device_node() {
    const UNINIT: ::std::mem::MaybeUninit<umad_device_node> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<umad_device_node>(),
        16usize,
        concat!("Size of: ", stringify!(umad_device_node))
    );
    assert_eq!(
        ::std::mem::align_of::<umad_device_node>(),
        8usize,
        concat!("Alignment of ", stringify!(umad_device_node))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_device_node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ca_name) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_device_node),
            "::",
            stringify!(ca_name)
        )
    );
}
impl Default for umad_device_node {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn umad_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_done() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_cas_names(
        cas: *mut [::std::os::raw::c_char; 20usize],
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_ca_portguids(
        ca_name: *const ::std::os::raw::c_char,
        portguids: *mut __be64,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_ca(
        ca_name: *const ::std::os::raw::c_char,
        ca: *mut umad_ca_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_release_ca(ca: *mut umad_ca_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_port(
        ca_name: *const ::std::os::raw::c_char,
        portnum: ::std::os::raw::c_int,
        port: *mut umad_port_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_release_port(port: *mut umad_port_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_issm_path(
        ca_name: *const ::std::os::raw::c_char,
        portnum: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        max: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_open_port(
        ca_name: *const ::std::os::raw::c_char,
        portnum: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_close_port(portid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_mad(umad: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn umad_size() -> usize;
}
extern "C" {
    pub fn umad_status(umad: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_mad_addr(umad: *mut ::std::os::raw::c_void) -> *mut ib_mad_addr_t;
}
extern "C" {
    pub fn umad_set_grh_net(
        umad: *mut ::std::os::raw::c_void,
        mad_addr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_set_grh(
        umad: *mut ::std::os::raw::c_void,
        mad_addr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_set_addr_net(
        umad: *mut ::std::os::raw::c_void,
        dlid: __be16,
        dqp: __be32,
        sl: ::std::os::raw::c_int,
        qkey: __be32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_set_addr(
        umad: *mut ::std::os::raw::c_void,
        dlid: ::std::os::raw::c_int,
        dqp: ::std::os::raw::c_int,
        sl: ::std::os::raw::c_int,
        qkey: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_set_pkey(
        umad: *mut ::std::os::raw::c_void,
        pkey_index: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_pkey(umad: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_send(
        portid: ::std::os::raw::c_int,
        agentid: ::std::os::raw::c_int,
        umad: *mut ::std::os::raw::c_void,
        length: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_int,
        retries: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_recv(
        portid: ::std::os::raw::c_int,
        umad: *mut ::std::os::raw::c_void,
        length: *mut ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_poll(
        portid: ::std::os::raw::c_int,
        timeout_ms: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_fd(portid: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_register(
        portid: ::std::os::raw::c_int,
        mgmt_class: ::std::os::raw::c_int,
        mgmt_version: ::std::os::raw::c_int,
        rmpp_version: u8,
        method_mask: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_register_oui(
        portid: ::std::os::raw::c_int,
        mgmt_class: ::std::os::raw::c_int,
        rmpp_version: u8,
        oui: *mut u8,
        method_mask: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_unregister(
        portid: ::std::os::raw::c_int,
        agentid: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_sort_ca_device_list(
        head: *mut *mut umad_device_node,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_get_ca_device_list() -> *mut umad_device_node;
}
extern "C" {
    pub fn umad_free_ca_device_list(head: *mut umad_device_node);
}
pub const UMAD_USER_RMPP: _bindgen_ty_27 = 1;
pub type _bindgen_ty_27 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct umad_reg_attr {
    pub mgmt_class: u8,
    pub mgmt_class_version: u8,
    pub flags: u32,
    pub method_mask: [u64; 2usize],
    pub oui: u32,
    pub rmpp_version: u8,
}
#[test]
fn bindgen_test_layout_umad_reg_attr() {
    const UNINIT: ::std::mem::MaybeUninit<umad_reg_attr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<umad_reg_attr>(),
        32usize,
        concat!("Size of: ", stringify!(umad_reg_attr))
    );
    assert_eq!(
        ::std::mem::align_of::<umad_reg_attr>(),
        8usize,
        concat!("Alignment of ", stringify!(umad_reg_attr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgmt_class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_reg_attr),
            "::",
            stringify!(mgmt_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mgmt_class_version) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_reg_attr),
            "::",
            stringify!(mgmt_class_version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_reg_attr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).method_mask) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_reg_attr),
            "::",
            stringify!(method_mask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).oui) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_reg_attr),
            "::",
            stringify!(oui)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmpp_version) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(umad_reg_attr),
            "::",
            stringify!(rmpp_version)
        )
    );
}
extern "C" {
    pub fn umad_register2(
        port_fd: ::std::os::raw::c_int,
        attr: *mut umad_reg_attr,
        agent_id: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_debug(level: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn umad_addr_dump(addr: *mut ib_mad_addr_t);
}
extern "C" {
    pub fn umad_dump(umad: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct verbs_ex_private {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    const UNINIT: ::std::mem::MaybeUninit<__va_list_tag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fp_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overflow_arg_area) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reg_save_area) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
