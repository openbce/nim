/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _STRING_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const __BITS_PER_LONG: u32 = 64;
pub const _SYS_TYPES_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const IB_USER_VERBS_ABI_VERSION: u32 = 6;
pub const IB_USER_VERBS_CMD_THRESHOLD: u32 = 50;
pub const IB_USER_VERBS_CMD_COMMAND_MASK: u32 = 255;
pub const IB_USER_VERBS_CMD_FLAG_EXTENDED: u32 = 2147483648;
pub const IB_USER_VERBS_MAX_LOG_IND_TBL_SIZE: u32 = 13;
pub const IB_DEVICE_NAME_MAX: u32 = 64;
pub const IB_UVERBS_ACCESS_OPTIONAL_FIRST: u32 = 1048576;
pub const IB_UVERBS_ACCESS_OPTIONAL_LAST: u32 = 536870912;
pub const IBV_ACCESS_OPTIONAL_FIRST: u32 = 1048576;
pub const IBV_DEVICE_RAW_SCATTER_FCS: u64 = 17179869184;
pub const IBV_DEVICE_PCI_WRITE_END_PADDING: u64 = 68719476736;
pub const ETHERNET_LL_SIZE: u32 = 6;
pub const IB_ROCE_UDP_ENCAP_VALID_PORT_MIN: u32 = 49152;
pub const IB_ROCE_UDP_ENCAP_VALID_PORT_MAX: u32 = 65535;
pub const IB_GRH_FLOWLABEL_MASK: u32 = 1048575;
pub const IBV_PATH_RECORD_REVERSIBLE: u32 = 128;
pub const IBV_PATH_FLAG_GMP: u32 = 1;
pub const IBV_PATH_FLAG_PRIMARY: u32 = 2;
pub const IBV_PATH_FLAG_ALTERNATE: u32 = 4;
pub const IBV_PATH_FLAG_OUTBOUND: u32 = 8;
pub const IBV_PATH_FLAG_INBOUND: u32 = 16;
pub const IBV_PATH_FLAG_INBOUND_REVERSE: u32 = 32;
pub const IBV_PATH_FLAG_BIDIRECTIONAL: u32 = 40;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 4usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
};
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cpu_set_t"][::std::mem::size_of::<cpu_set_t>() - 128usize];
    ["Alignment of cpu_set_t"][::std::mem::align_of::<cpu_set_t>() - 8usize];
    ["Offset of field: cpu_set_t::__bits"][::std::mem::offset_of!(cpu_set_t, __bits) - 0usize];
};
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
impl Default for tm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
impl Default for __locale_struct {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
impl Default for __atomic_wide_counter {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
impl Default for __pthread_internal_list {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
impl Default for __pthread_internal_slist {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
impl Default for __pthread_cond_s {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
impl Default for pthread_condattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
impl Default for pthread_attr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
impl Default for pthread_mutex_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
impl Default for pthread_cond_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
impl Default for pthread_barrier_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __jmp_buf_tag"][::std::mem::size_of::<__jmp_buf_tag>() - 200usize];
    ["Alignment of __jmp_buf_tag"][::std::mem::align_of::<__jmp_buf_tag>() - 8usize];
    ["Offset of field: __jmp_buf_tag::__jmpbuf"]
        [::std::mem::offset_of!(__jmp_buf_tag, __jmpbuf) - 0usize];
    ["Offset of field: __jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__jmp_buf_tag, __mask_was_saved) - 64usize];
    ["Offset of field: __jmp_buf_tag::__saved_mask"]
        [::std::mem::offset_of!(__jmp_buf_tag, __saved_mask) - 72usize];
};
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_1 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_2 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_2 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_2 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_2 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_2 = 0;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_3 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_3 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_4 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_4 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_4 = 2;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_5 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_5 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_5 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_5 = 0;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_6 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_6 = 1;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_7 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_7 = 1;
pub type _bindgen_ty_7 = ::std::os::raw::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_8 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_8 = 1;
pub type _bindgen_ty_8 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __canceltype: ::std::os::raw::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _pthread_cleanup_buffer"][::std::mem::size_of::<_pthread_cleanup_buffer>() - 32usize];
    ["Alignment of _pthread_cleanup_buffer"]
        [::std::mem::align_of::<_pthread_cleanup_buffer>() - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__routine"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __routine) - 0usize];
    ["Offset of field: _pthread_cleanup_buffer::__arg"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __arg) - 8usize];
    ["Offset of field: _pthread_cleanup_buffer::__canceltype"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __canceltype) - 16usize];
    ["Offset of field: _pthread_cleanup_buffer::__prev"]
        [::std::mem::offset_of!(_pthread_cleanup_buffer, __prev) - 24usize];
};
impl Default for _pthread_cleanup_buffer {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_9 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_9 = 1;
pub type _bindgen_ty_9 = ::std::os::raw::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_10 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_10 = 1;
pub type _bindgen_ty_10 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(
        __th: pthread_t,
        __thread_return: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        __attr: *mut pthread_attr_t,
        __scope: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut ::std::os::raw::c_void,
        __stacksize: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut ::std::os::raw::c_void,
        __stacksize: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: ::std::os::raw::c_int,
        __param: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut ::std::os::raw::c_int,
        __param: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(
        __target_thread: pthread_t,
        __prio: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: ::std::os::raw::c_int,
        __oldstate: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        __type: ::std::os::raw::c_int,
        __oldtype: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __cancel_jmp_buf_tag"][::std::mem::size_of::<__cancel_jmp_buf_tag>() - 72usize];
    ["Alignment of __cancel_jmp_buf_tag"][::std::mem::align_of::<__cancel_jmp_buf_tag>() - 8usize];
    ["Offset of field: __cancel_jmp_buf_tag::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __cancel_jmp_buf_tag::__mask_was_saved"]
        [::std::mem::offset_of!(__cancel_jmp_buf_tag, __mask_was_saved) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut ::std::os::raw::c_void; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_unwind_buf_t"][::std::mem::size_of::<__pthread_unwind_buf_t>() - 104usize];
    ["Alignment of __pthread_unwind_buf_t"]
        [::std::mem::align_of::<__pthread_unwind_buf_t>() - 8usize];
    ["Offset of field: __pthread_unwind_buf_t::__cancel_jmp_buf"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __cancel_jmp_buf) - 0usize];
    ["Offset of field: __pthread_unwind_buf_t::__pad"]
        [::std::mem::offset_of!(__pthread_unwind_buf_t, __pad) - 72usize];
};
impl Default for __pthread_unwind_buf_t {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __cancel_arg: *mut ::std::os::raw::c_void,
    pub __do_it: ::std::os::raw::c_int,
    pub __cancel_type: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cleanup_frame"][::std::mem::size_of::<__pthread_cleanup_frame>() - 24usize];
    ["Alignment of __pthread_cleanup_frame"]
        [::std::mem::align_of::<__pthread_cleanup_frame>() - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_routine"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_routine) - 0usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_arg"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_arg) - 8usize];
    ["Offset of field: __pthread_cleanup_frame::__do_it"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __do_it) - 16usize];
    ["Offset of field: __pthread_cleanup_frame::__cancel_type"]
        [::std::mem::offset_of!(__pthread_cleanup_frame, __cancel_type) - 20usize];
};
impl Default for __pthread_cleanup_frame {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: ::std::os::raw::c_int,
        __old_ceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_setspecific(
        __key: pthread_key_t,
        __pointer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::std::option::Option<unsafe extern "C" fn()>,
        __parent: ::std::option::Option<unsafe extern "C" fn()>,
        __child: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn strlcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub const IB_USER_VERBS_CMD_GET_CONTEXT: ib_uverbs_write_cmds = 0;
pub const IB_USER_VERBS_CMD_QUERY_DEVICE: ib_uverbs_write_cmds = 1;
pub const IB_USER_VERBS_CMD_QUERY_PORT: ib_uverbs_write_cmds = 2;
pub const IB_USER_VERBS_CMD_ALLOC_PD: ib_uverbs_write_cmds = 3;
pub const IB_USER_VERBS_CMD_DEALLOC_PD: ib_uverbs_write_cmds = 4;
pub const IB_USER_VERBS_CMD_CREATE_AH: ib_uverbs_write_cmds = 5;
pub const IB_USER_VERBS_CMD_MODIFY_AH: ib_uverbs_write_cmds = 6;
pub const IB_USER_VERBS_CMD_QUERY_AH: ib_uverbs_write_cmds = 7;
pub const IB_USER_VERBS_CMD_DESTROY_AH: ib_uverbs_write_cmds = 8;
pub const IB_USER_VERBS_CMD_REG_MR: ib_uverbs_write_cmds = 9;
pub const IB_USER_VERBS_CMD_REG_SMR: ib_uverbs_write_cmds = 10;
pub const IB_USER_VERBS_CMD_REREG_MR: ib_uverbs_write_cmds = 11;
pub const IB_USER_VERBS_CMD_QUERY_MR: ib_uverbs_write_cmds = 12;
pub const IB_USER_VERBS_CMD_DEREG_MR: ib_uverbs_write_cmds = 13;
pub const IB_USER_VERBS_CMD_ALLOC_MW: ib_uverbs_write_cmds = 14;
pub const IB_USER_VERBS_CMD_BIND_MW: ib_uverbs_write_cmds = 15;
pub const IB_USER_VERBS_CMD_DEALLOC_MW: ib_uverbs_write_cmds = 16;
pub const IB_USER_VERBS_CMD_CREATE_COMP_CHANNEL: ib_uverbs_write_cmds = 17;
pub const IB_USER_VERBS_CMD_CREATE_CQ: ib_uverbs_write_cmds = 18;
pub const IB_USER_VERBS_CMD_RESIZE_CQ: ib_uverbs_write_cmds = 19;
pub const IB_USER_VERBS_CMD_DESTROY_CQ: ib_uverbs_write_cmds = 20;
pub const IB_USER_VERBS_CMD_POLL_CQ: ib_uverbs_write_cmds = 21;
pub const IB_USER_VERBS_CMD_PEEK_CQ: ib_uverbs_write_cmds = 22;
pub const IB_USER_VERBS_CMD_REQ_NOTIFY_CQ: ib_uverbs_write_cmds = 23;
pub const IB_USER_VERBS_CMD_CREATE_QP: ib_uverbs_write_cmds = 24;
pub const IB_USER_VERBS_CMD_QUERY_QP: ib_uverbs_write_cmds = 25;
pub const IB_USER_VERBS_CMD_MODIFY_QP: ib_uverbs_write_cmds = 26;
pub const IB_USER_VERBS_CMD_DESTROY_QP: ib_uverbs_write_cmds = 27;
pub const IB_USER_VERBS_CMD_POST_SEND: ib_uverbs_write_cmds = 28;
pub const IB_USER_VERBS_CMD_POST_RECV: ib_uverbs_write_cmds = 29;
pub const IB_USER_VERBS_CMD_ATTACH_MCAST: ib_uverbs_write_cmds = 30;
pub const IB_USER_VERBS_CMD_DETACH_MCAST: ib_uverbs_write_cmds = 31;
pub const IB_USER_VERBS_CMD_CREATE_SRQ: ib_uverbs_write_cmds = 32;
pub const IB_USER_VERBS_CMD_MODIFY_SRQ: ib_uverbs_write_cmds = 33;
pub const IB_USER_VERBS_CMD_QUERY_SRQ: ib_uverbs_write_cmds = 34;
pub const IB_USER_VERBS_CMD_DESTROY_SRQ: ib_uverbs_write_cmds = 35;
pub const IB_USER_VERBS_CMD_POST_SRQ_RECV: ib_uverbs_write_cmds = 36;
pub const IB_USER_VERBS_CMD_OPEN_XRCD: ib_uverbs_write_cmds = 37;
pub const IB_USER_VERBS_CMD_CLOSE_XRCD: ib_uverbs_write_cmds = 38;
pub const IB_USER_VERBS_CMD_CREATE_XSRQ: ib_uverbs_write_cmds = 39;
pub const IB_USER_VERBS_CMD_OPEN_QP: ib_uverbs_write_cmds = 40;
pub type ib_uverbs_write_cmds = ::std::os::raw::c_uint;
pub const IB_USER_VERBS_EX_CMD_QUERY_DEVICE: _bindgen_ty_11 = 1;
pub const IB_USER_VERBS_EX_CMD_CREATE_CQ: _bindgen_ty_11 = 18;
pub const IB_USER_VERBS_EX_CMD_CREATE_QP: _bindgen_ty_11 = 24;
pub const IB_USER_VERBS_EX_CMD_MODIFY_QP: _bindgen_ty_11 = 26;
pub const IB_USER_VERBS_EX_CMD_CREATE_FLOW: _bindgen_ty_11 = 50;
pub const IB_USER_VERBS_EX_CMD_DESTROY_FLOW: _bindgen_ty_11 = 51;
pub const IB_USER_VERBS_EX_CMD_CREATE_WQ: _bindgen_ty_11 = 52;
pub const IB_USER_VERBS_EX_CMD_MODIFY_WQ: _bindgen_ty_11 = 53;
pub const IB_USER_VERBS_EX_CMD_DESTROY_WQ: _bindgen_ty_11 = 54;
pub const IB_USER_VERBS_EX_CMD_CREATE_RWQ_IND_TBL: _bindgen_ty_11 = 55;
pub const IB_USER_VERBS_EX_CMD_DESTROY_RWQ_IND_TBL: _bindgen_ty_11 = 56;
pub const IB_USER_VERBS_EX_CMD_MODIFY_CQ: _bindgen_ty_11 = 57;
pub type _bindgen_ty_11 = ::std::os::raw::c_uint;
pub const IB_FLUSH_GLOBAL: ib_placement_type = 1;
pub const IB_FLUSH_PERSISTENT: ib_placement_type = 2;
pub type ib_placement_type = ::std::os::raw::c_uint;
pub const IB_FLUSH_RANGE: ib_selectivity_level = 0;
pub const IB_FLUSH_MR: ib_selectivity_level = 1;
pub type ib_selectivity_level = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_async_event_desc {
    pub element: __u64,
    pub event_type: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_async_event_desc"]
        [::std::mem::size_of::<ib_uverbs_async_event_desc>() - 16usize];
    ["Alignment of ib_uverbs_async_event_desc"]
        [::std::mem::align_of::<ib_uverbs_async_event_desc>() - 8usize];
    ["Offset of field: ib_uverbs_async_event_desc::element"]
        [::std::mem::offset_of!(ib_uverbs_async_event_desc, element) - 0usize];
    ["Offset of field: ib_uverbs_async_event_desc::event_type"]
        [::std::mem::offset_of!(ib_uverbs_async_event_desc, event_type) - 8usize];
    ["Offset of field: ib_uverbs_async_event_desc::reserved"]
        [::std::mem::offset_of!(ib_uverbs_async_event_desc, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_comp_event_desc {
    pub cq_handle: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_comp_event_desc"]
        [::std::mem::size_of::<ib_uverbs_comp_event_desc>() - 8usize];
    ["Alignment of ib_uverbs_comp_event_desc"]
        [::std::mem::align_of::<ib_uverbs_comp_event_desc>() - 8usize];
    ["Offset of field: ib_uverbs_comp_event_desc::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_comp_event_desc, cq_handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_cq_moderation_caps {
    pub max_cq_moderation_count: __u16,
    pub max_cq_moderation_period: __u16,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_cq_moderation_caps"]
        [::std::mem::size_of::<ib_uverbs_cq_moderation_caps>() - 8usize];
    ["Alignment of ib_uverbs_cq_moderation_caps"]
        [::std::mem::align_of::<ib_uverbs_cq_moderation_caps>() - 4usize];
    ["Offset of field: ib_uverbs_cq_moderation_caps::max_cq_moderation_count"]
        [::std::mem::offset_of!(ib_uverbs_cq_moderation_caps, max_cq_moderation_count) - 0usize];
    ["Offset of field: ib_uverbs_cq_moderation_caps::max_cq_moderation_period"]
        [::std::mem::offset_of!(ib_uverbs_cq_moderation_caps, max_cq_moderation_period) - 2usize];
    ["Offset of field: ib_uverbs_cq_moderation_caps::reserved"]
        [::std::mem::offset_of!(ib_uverbs_cq_moderation_caps, reserved) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_cmd_hdr {
    pub command: __u32,
    pub in_words: __u16,
    pub out_words: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_cmd_hdr"][::std::mem::size_of::<ib_uverbs_cmd_hdr>() - 8usize];
    ["Alignment of ib_uverbs_cmd_hdr"][::std::mem::align_of::<ib_uverbs_cmd_hdr>() - 4usize];
    ["Offset of field: ib_uverbs_cmd_hdr::command"]
        [::std::mem::offset_of!(ib_uverbs_cmd_hdr, command) - 0usize];
    ["Offset of field: ib_uverbs_cmd_hdr::in_words"]
        [::std::mem::offset_of!(ib_uverbs_cmd_hdr, in_words) - 4usize];
    ["Offset of field: ib_uverbs_cmd_hdr::out_words"]
        [::std::mem::offset_of!(ib_uverbs_cmd_hdr, out_words) - 6usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_cmd_hdr {
    pub response: __u64,
    pub provider_in_words: __u16,
    pub provider_out_words: __u16,
    pub cmd_hdr_reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_cmd_hdr"][::std::mem::size_of::<ib_uverbs_ex_cmd_hdr>() - 16usize];
    ["Alignment of ib_uverbs_ex_cmd_hdr"][::std::mem::align_of::<ib_uverbs_ex_cmd_hdr>() - 8usize];
    ["Offset of field: ib_uverbs_ex_cmd_hdr::response"]
        [::std::mem::offset_of!(ib_uverbs_ex_cmd_hdr, response) - 0usize];
    ["Offset of field: ib_uverbs_ex_cmd_hdr::provider_in_words"]
        [::std::mem::offset_of!(ib_uverbs_ex_cmd_hdr, provider_in_words) - 8usize];
    ["Offset of field: ib_uverbs_ex_cmd_hdr::provider_out_words"]
        [::std::mem::offset_of!(ib_uverbs_ex_cmd_hdr, provider_out_words) - 10usize];
    ["Offset of field: ib_uverbs_ex_cmd_hdr::cmd_hdr_reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_cmd_hdr, cmd_hdr_reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_get_context {
    pub response: __u64,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_get_context"][::std::mem::size_of::<ib_uverbs_get_context>() - 8usize];
    ["Alignment of ib_uverbs_get_context"]
        [::std::mem::align_of::<ib_uverbs_get_context>() - 8usize];
    ["Offset of field: ib_uverbs_get_context::response"]
        [::std::mem::offset_of!(ib_uverbs_get_context, response) - 0usize];
    ["Offset of field: ib_uverbs_get_context::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_get_context, driver_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_get_context_resp {
    pub async_fd: __u32,
    pub num_comp_vectors: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_get_context_resp"]
        [::std::mem::size_of::<ib_uverbs_get_context_resp>() - 8usize];
    ["Alignment of ib_uverbs_get_context_resp"]
        [::std::mem::align_of::<ib_uverbs_get_context_resp>() - 8usize];
    ["Offset of field: ib_uverbs_get_context_resp::async_fd"]
        [::std::mem::offset_of!(ib_uverbs_get_context_resp, async_fd) - 0usize];
    ["Offset of field: ib_uverbs_get_context_resp::num_comp_vectors"]
        [::std::mem::offset_of!(ib_uverbs_get_context_resp, num_comp_vectors) - 4usize];
    ["Offset of field: ib_uverbs_get_context_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_get_context_resp, driver_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_device {
    pub response: __u64,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_device"][::std::mem::size_of::<ib_uverbs_query_device>() - 8usize];
    ["Alignment of ib_uverbs_query_device"]
        [::std::mem::align_of::<ib_uverbs_query_device>() - 8usize];
    ["Offset of field: ib_uverbs_query_device::response"]
        [::std::mem::offset_of!(ib_uverbs_query_device, response) - 0usize];
    ["Offset of field: ib_uverbs_query_device::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_query_device, driver_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_query_device_resp {
    pub fw_ver: __u64,
    pub node_guid: __be64,
    pub sys_image_guid: __be64,
    pub max_mr_size: __u64,
    pub page_size_cap: __u64,
    pub vendor_id: __u32,
    pub vendor_part_id: __u32,
    pub hw_ver: __u32,
    pub max_qp: __u32,
    pub max_qp_wr: __u32,
    pub device_cap_flags: __u32,
    pub max_sge: __u32,
    pub max_sge_rd: __u32,
    pub max_cq: __u32,
    pub max_cqe: __u32,
    pub max_mr: __u32,
    pub max_pd: __u32,
    pub max_qp_rd_atom: __u32,
    pub max_ee_rd_atom: __u32,
    pub max_res_rd_atom: __u32,
    pub max_qp_init_rd_atom: __u32,
    pub max_ee_init_rd_atom: __u32,
    pub atomic_cap: __u32,
    pub max_ee: __u32,
    pub max_rdd: __u32,
    pub max_mw: __u32,
    pub max_raw_ipv6_qp: __u32,
    pub max_raw_ethy_qp: __u32,
    pub max_mcast_grp: __u32,
    pub max_mcast_qp_attach: __u32,
    pub max_total_mcast_qp_attach: __u32,
    pub max_ah: __u32,
    pub max_fmr: __u32,
    pub max_map_per_fmr: __u32,
    pub max_srq: __u32,
    pub max_srq_wr: __u32,
    pub max_srq_sge: __u32,
    pub max_pkeys: __u16,
    pub local_ca_ack_delay: __u8,
    pub phys_port_cnt: __u8,
    pub reserved: [__u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_device_resp"]
        [::std::mem::size_of::<ib_uverbs_query_device_resp>() - 176usize];
    ["Alignment of ib_uverbs_query_device_resp"]
        [::std::mem::align_of::<ib_uverbs_query_device_resp>() - 8usize];
    ["Offset of field: ib_uverbs_query_device_resp::fw_ver"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, fw_ver) - 0usize];
    ["Offset of field: ib_uverbs_query_device_resp::node_guid"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, node_guid) - 8usize];
    ["Offset of field: ib_uverbs_query_device_resp::sys_image_guid"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, sys_image_guid) - 16usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_mr_size"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_mr_size) - 24usize];
    ["Offset of field: ib_uverbs_query_device_resp::page_size_cap"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, page_size_cap) - 32usize];
    ["Offset of field: ib_uverbs_query_device_resp::vendor_id"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, vendor_id) - 40usize];
    ["Offset of field: ib_uverbs_query_device_resp::vendor_part_id"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, vendor_part_id) - 44usize];
    ["Offset of field: ib_uverbs_query_device_resp::hw_ver"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, hw_ver) - 48usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_qp"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_qp) - 52usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_qp_wr"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_qp_wr) - 56usize];
    ["Offset of field: ib_uverbs_query_device_resp::device_cap_flags"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, device_cap_flags) - 60usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_sge"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_sge) - 64usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_sge_rd"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_sge_rd) - 68usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_cq"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_cq) - 72usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_cqe"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_cqe) - 76usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_mr"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_mr) - 80usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_pd"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_pd) - 84usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_qp_rd_atom"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_qp_rd_atom) - 88usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_ee_rd_atom"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_ee_rd_atom) - 92usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_res_rd_atom"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_res_rd_atom) - 96usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_qp_init_rd_atom"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_qp_init_rd_atom) - 100usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_ee_init_rd_atom"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_ee_init_rd_atom) - 104usize];
    ["Offset of field: ib_uverbs_query_device_resp::atomic_cap"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, atomic_cap) - 108usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_ee"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_ee) - 112usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_rdd"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_rdd) - 116usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_mw"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_mw) - 120usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_raw_ipv6_qp"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_raw_ipv6_qp) - 124usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_raw_ethy_qp"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_raw_ethy_qp) - 128usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_mcast_grp"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_mcast_grp) - 132usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_mcast_qp_attach"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_mcast_qp_attach) - 136usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_total_mcast_qp_attach"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_total_mcast_qp_attach) - 140usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_ah"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_ah) - 144usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_fmr"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_fmr) - 148usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_map_per_fmr"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_map_per_fmr) - 152usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_srq"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_srq) - 156usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_srq_wr"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_srq_wr) - 160usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_srq_sge"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_srq_sge) - 164usize];
    ["Offset of field: ib_uverbs_query_device_resp::max_pkeys"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, max_pkeys) - 168usize];
    ["Offset of field: ib_uverbs_query_device_resp::local_ca_ack_delay"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, local_ca_ack_delay) - 170usize];
    ["Offset of field: ib_uverbs_query_device_resp::phys_port_cnt"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, phys_port_cnt) - 171usize];
    ["Offset of field: ib_uverbs_query_device_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_query_device_resp, reserved) - 172usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_query_device {
    pub comp_mask: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_query_device"]
        [::std::mem::size_of::<ib_uverbs_ex_query_device>() - 8usize];
    ["Alignment of ib_uverbs_ex_query_device"]
        [::std::mem::align_of::<ib_uverbs_ex_query_device>() - 4usize];
    ["Offset of field: ib_uverbs_ex_query_device::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_query_device::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device, reserved) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_odp_caps {
    pub general_caps: __u64,
    pub per_transport_caps: ib_uverbs_odp_caps__bindgen_ty_1,
    pub reserved: __u32,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_odp_caps__bindgen_ty_1 {
    pub rc_odp_caps: __u32,
    pub uc_odp_caps: __u32,
    pub ud_odp_caps: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_odp_caps__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_odp_caps__bindgen_ty_1>() - 12usize];
    ["Alignment of ib_uverbs_odp_caps__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_odp_caps__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_odp_caps__bindgen_ty_1::rc_odp_caps"]
        [::std::mem::offset_of!(ib_uverbs_odp_caps__bindgen_ty_1, rc_odp_caps) - 0usize];
    ["Offset of field: ib_uverbs_odp_caps__bindgen_ty_1::uc_odp_caps"]
        [::std::mem::offset_of!(ib_uverbs_odp_caps__bindgen_ty_1, uc_odp_caps) - 4usize];
    ["Offset of field: ib_uverbs_odp_caps__bindgen_ty_1::ud_odp_caps"]
        [::std::mem::offset_of!(ib_uverbs_odp_caps__bindgen_ty_1, ud_odp_caps) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_odp_caps"][::std::mem::size_of::<ib_uverbs_odp_caps>() - 24usize];
    ["Alignment of ib_uverbs_odp_caps"][::std::mem::align_of::<ib_uverbs_odp_caps>() - 8usize];
    ["Offset of field: ib_uverbs_odp_caps::general_caps"]
        [::std::mem::offset_of!(ib_uverbs_odp_caps, general_caps) - 0usize];
    ["Offset of field: ib_uverbs_odp_caps::per_transport_caps"]
        [::std::mem::offset_of!(ib_uverbs_odp_caps, per_transport_caps) - 8usize];
    ["Offset of field: ib_uverbs_odp_caps::reserved"]
        [::std::mem::offset_of!(ib_uverbs_odp_caps, reserved) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_rss_caps {
    pub supported_qpts: __u32,
    pub max_rwq_indirection_tables: __u32,
    pub max_rwq_indirection_table_size: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_rss_caps"][::std::mem::size_of::<ib_uverbs_rss_caps>() - 16usize];
    ["Alignment of ib_uverbs_rss_caps"][::std::mem::align_of::<ib_uverbs_rss_caps>() - 4usize];
    ["Offset of field: ib_uverbs_rss_caps::supported_qpts"]
        [::std::mem::offset_of!(ib_uverbs_rss_caps, supported_qpts) - 0usize];
    ["Offset of field: ib_uverbs_rss_caps::max_rwq_indirection_tables"]
        [::std::mem::offset_of!(ib_uverbs_rss_caps, max_rwq_indirection_tables) - 4usize];
    ["Offset of field: ib_uverbs_rss_caps::max_rwq_indirection_table_size"]
        [::std::mem::offset_of!(ib_uverbs_rss_caps, max_rwq_indirection_table_size) - 8usize];
    ["Offset of field: ib_uverbs_rss_caps::reserved"]
        [::std::mem::offset_of!(ib_uverbs_rss_caps, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_tm_caps {
    pub max_rndv_hdr_size: __u32,
    pub max_num_tags: __u32,
    pub flags: __u32,
    pub max_ops: __u32,
    pub max_sge: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_tm_caps"][::std::mem::size_of::<ib_uverbs_tm_caps>() - 24usize];
    ["Alignment of ib_uverbs_tm_caps"][::std::mem::align_of::<ib_uverbs_tm_caps>() - 4usize];
    ["Offset of field: ib_uverbs_tm_caps::max_rndv_hdr_size"]
        [::std::mem::offset_of!(ib_uverbs_tm_caps, max_rndv_hdr_size) - 0usize];
    ["Offset of field: ib_uverbs_tm_caps::max_num_tags"]
        [::std::mem::offset_of!(ib_uverbs_tm_caps, max_num_tags) - 4usize];
    ["Offset of field: ib_uverbs_tm_caps::flags"]
        [::std::mem::offset_of!(ib_uverbs_tm_caps, flags) - 8usize];
    ["Offset of field: ib_uverbs_tm_caps::max_ops"]
        [::std::mem::offset_of!(ib_uverbs_tm_caps, max_ops) - 12usize];
    ["Offset of field: ib_uverbs_tm_caps::max_sge"]
        [::std::mem::offset_of!(ib_uverbs_tm_caps, max_sge) - 16usize];
    ["Offset of field: ib_uverbs_tm_caps::reserved"]
        [::std::mem::offset_of!(ib_uverbs_tm_caps, reserved) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_query_device_resp {
    pub base: ib_uverbs_query_device_resp,
    pub comp_mask: __u32,
    pub response_length: __u32,
    pub odp_caps: ib_uverbs_odp_caps,
    pub timestamp_mask: __u64,
    pub hca_core_clock: __u64,
    pub device_cap_flags_ex: __u64,
    pub rss_caps: ib_uverbs_rss_caps,
    pub max_wq_type_rq: __u32,
    pub raw_packet_caps: __u32,
    pub tm_caps: ib_uverbs_tm_caps,
    pub cq_moderation_caps: ib_uverbs_cq_moderation_caps,
    pub max_dm_size: __u64,
    pub xrc_odp_caps: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_query_device_resp"]
        [::std::mem::size_of::<ib_uverbs_ex_query_device_resp>() - 304usize];
    ["Alignment of ib_uverbs_ex_query_device_resp"]
        [::std::mem::align_of::<ib_uverbs_ex_query_device_resp>() - 8usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::base"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, base) - 0usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, comp_mask) - 176usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::response_length"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, response_length) - 180usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::odp_caps"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, odp_caps) - 184usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::timestamp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, timestamp_mask) - 208usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::hca_core_clock"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, hca_core_clock) - 216usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::device_cap_flags_ex"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, device_cap_flags_ex) - 224usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::rss_caps"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, rss_caps) - 232usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::max_wq_type_rq"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, max_wq_type_rq) - 248usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::raw_packet_caps"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, raw_packet_caps) - 252usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::tm_caps"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, tm_caps) - 256usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::cq_moderation_caps"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, cq_moderation_caps) - 280usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::max_dm_size"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, max_dm_size) - 288usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::xrc_odp_caps"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, xrc_odp_caps) - 296usize];
    ["Offset of field: ib_uverbs_ex_query_device_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_query_device_resp, reserved) - 300usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_port {
    pub response: __u64,
    pub port_num: __u8,
    pub reserved: [__u8; 7usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_port"][::std::mem::size_of::<ib_uverbs_query_port>() - 16usize];
    ["Alignment of ib_uverbs_query_port"][::std::mem::align_of::<ib_uverbs_query_port>() - 8usize];
    ["Offset of field: ib_uverbs_query_port::response"]
        [::std::mem::offset_of!(ib_uverbs_query_port, response) - 0usize];
    ["Offset of field: ib_uverbs_query_port::port_num"]
        [::std::mem::offset_of!(ib_uverbs_query_port, port_num) - 8usize];
    ["Offset of field: ib_uverbs_query_port::reserved"]
        [::std::mem::offset_of!(ib_uverbs_query_port, reserved) - 9usize];
    ["Offset of field: ib_uverbs_query_port::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_query_port, driver_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_query_port_resp {
    pub port_cap_flags: __u32,
    pub max_msg_sz: __u32,
    pub bad_pkey_cntr: __u32,
    pub qkey_viol_cntr: __u32,
    pub gid_tbl_len: __u32,
    pub pkey_tbl_len: __u16,
    pub lid: __u16,
    pub sm_lid: __u16,
    pub state: __u8,
    pub max_mtu: __u8,
    pub active_mtu: __u8,
    pub lmc: __u8,
    pub max_vl_num: __u8,
    pub sm_sl: __u8,
    pub subnet_timeout: __u8,
    pub init_type_reply: __u8,
    pub active_width: __u8,
    pub active_speed: __u8,
    pub phys_state: __u8,
    pub link_layer: __u8,
    pub flags: __u8,
    pub reserved: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_port_resp"]
        [::std::mem::size_of::<ib_uverbs_query_port_resp>() - 40usize];
    ["Alignment of ib_uverbs_query_port_resp"]
        [::std::mem::align_of::<ib_uverbs_query_port_resp>() - 4usize];
    ["Offset of field: ib_uverbs_query_port_resp::port_cap_flags"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, port_cap_flags) - 0usize];
    ["Offset of field: ib_uverbs_query_port_resp::max_msg_sz"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, max_msg_sz) - 4usize];
    ["Offset of field: ib_uverbs_query_port_resp::bad_pkey_cntr"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, bad_pkey_cntr) - 8usize];
    ["Offset of field: ib_uverbs_query_port_resp::qkey_viol_cntr"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, qkey_viol_cntr) - 12usize];
    ["Offset of field: ib_uverbs_query_port_resp::gid_tbl_len"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, gid_tbl_len) - 16usize];
    ["Offset of field: ib_uverbs_query_port_resp::pkey_tbl_len"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, pkey_tbl_len) - 20usize];
    ["Offset of field: ib_uverbs_query_port_resp::lid"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, lid) - 22usize];
    ["Offset of field: ib_uverbs_query_port_resp::sm_lid"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, sm_lid) - 24usize];
    ["Offset of field: ib_uverbs_query_port_resp::state"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, state) - 26usize];
    ["Offset of field: ib_uverbs_query_port_resp::max_mtu"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, max_mtu) - 27usize];
    ["Offset of field: ib_uverbs_query_port_resp::active_mtu"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, active_mtu) - 28usize];
    ["Offset of field: ib_uverbs_query_port_resp::lmc"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, lmc) - 29usize];
    ["Offset of field: ib_uverbs_query_port_resp::max_vl_num"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, max_vl_num) - 30usize];
    ["Offset of field: ib_uverbs_query_port_resp::sm_sl"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, sm_sl) - 31usize];
    ["Offset of field: ib_uverbs_query_port_resp::subnet_timeout"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, subnet_timeout) - 32usize];
    ["Offset of field: ib_uverbs_query_port_resp::init_type_reply"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, init_type_reply) - 33usize];
    ["Offset of field: ib_uverbs_query_port_resp::active_width"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, active_width) - 34usize];
    ["Offset of field: ib_uverbs_query_port_resp::active_speed"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, active_speed) - 35usize];
    ["Offset of field: ib_uverbs_query_port_resp::phys_state"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, phys_state) - 36usize];
    ["Offset of field: ib_uverbs_query_port_resp::link_layer"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, link_layer) - 37usize];
    ["Offset of field: ib_uverbs_query_port_resp::flags"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, flags) - 38usize];
    ["Offset of field: ib_uverbs_query_port_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp, reserved) - 39usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_alloc_pd {
    pub response: __u64,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_alloc_pd"][::std::mem::size_of::<ib_uverbs_alloc_pd>() - 8usize];
    ["Alignment of ib_uverbs_alloc_pd"][::std::mem::align_of::<ib_uverbs_alloc_pd>() - 8usize];
    ["Offset of field: ib_uverbs_alloc_pd::response"]
        [::std::mem::offset_of!(ib_uverbs_alloc_pd, response) - 0usize];
    ["Offset of field: ib_uverbs_alloc_pd::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_alloc_pd, driver_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_alloc_pd_resp {
    pub pd_handle: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_alloc_pd_resp"][::std::mem::size_of::<ib_uverbs_alloc_pd_resp>() - 4usize];
    ["Alignment of ib_uverbs_alloc_pd_resp"]
        [::std::mem::align_of::<ib_uverbs_alloc_pd_resp>() - 4usize];
    ["Offset of field: ib_uverbs_alloc_pd_resp::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_alloc_pd_resp, pd_handle) - 0usize];
    ["Offset of field: ib_uverbs_alloc_pd_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_alloc_pd_resp, driver_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_dealloc_pd {
    pub pd_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_dealloc_pd"][::std::mem::size_of::<ib_uverbs_dealloc_pd>() - 4usize];
    ["Alignment of ib_uverbs_dealloc_pd"][::std::mem::align_of::<ib_uverbs_dealloc_pd>() - 4usize];
    ["Offset of field: ib_uverbs_dealloc_pd::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_dealloc_pd, pd_handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_open_xrcd {
    pub response: __u64,
    pub fd: __u32,
    pub oflags: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_open_xrcd"][::std::mem::size_of::<ib_uverbs_open_xrcd>() - 16usize];
    ["Alignment of ib_uverbs_open_xrcd"][::std::mem::align_of::<ib_uverbs_open_xrcd>() - 8usize];
    ["Offset of field: ib_uverbs_open_xrcd::response"]
        [::std::mem::offset_of!(ib_uverbs_open_xrcd, response) - 0usize];
    ["Offset of field: ib_uverbs_open_xrcd::fd"]
        [::std::mem::offset_of!(ib_uverbs_open_xrcd, fd) - 8usize];
    ["Offset of field: ib_uverbs_open_xrcd::oflags"]
        [::std::mem::offset_of!(ib_uverbs_open_xrcd, oflags) - 12usize];
    ["Offset of field: ib_uverbs_open_xrcd::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_open_xrcd, driver_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_open_xrcd_resp {
    pub xrcd_handle: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_open_xrcd_resp"]
        [::std::mem::size_of::<ib_uverbs_open_xrcd_resp>() - 4usize];
    ["Alignment of ib_uverbs_open_xrcd_resp"]
        [::std::mem::align_of::<ib_uverbs_open_xrcd_resp>() - 4usize];
    ["Offset of field: ib_uverbs_open_xrcd_resp::xrcd_handle"]
        [::std::mem::offset_of!(ib_uverbs_open_xrcd_resp, xrcd_handle) - 0usize];
    ["Offset of field: ib_uverbs_open_xrcd_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_open_xrcd_resp, driver_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_close_xrcd {
    pub xrcd_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_close_xrcd"][::std::mem::size_of::<ib_uverbs_close_xrcd>() - 4usize];
    ["Alignment of ib_uverbs_close_xrcd"][::std::mem::align_of::<ib_uverbs_close_xrcd>() - 4usize];
    ["Offset of field: ib_uverbs_close_xrcd::xrcd_handle"]
        [::std::mem::offset_of!(ib_uverbs_close_xrcd, xrcd_handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_reg_mr {
    pub response: __u64,
    pub start: __u64,
    pub length: __u64,
    pub hca_va: __u64,
    pub pd_handle: __u32,
    pub access_flags: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_reg_mr"][::std::mem::size_of::<ib_uverbs_reg_mr>() - 40usize];
    ["Alignment of ib_uverbs_reg_mr"][::std::mem::align_of::<ib_uverbs_reg_mr>() - 8usize];
    ["Offset of field: ib_uverbs_reg_mr::response"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr, response) - 0usize];
    ["Offset of field: ib_uverbs_reg_mr::start"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr, start) - 8usize];
    ["Offset of field: ib_uverbs_reg_mr::length"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr, length) - 16usize];
    ["Offset of field: ib_uverbs_reg_mr::hca_va"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr, hca_va) - 24usize];
    ["Offset of field: ib_uverbs_reg_mr::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr, pd_handle) - 32usize];
    ["Offset of field: ib_uverbs_reg_mr::access_flags"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr, access_flags) - 36usize];
    ["Offset of field: ib_uverbs_reg_mr::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr, driver_data) - 40usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_reg_mr_resp {
    pub mr_handle: __u32,
    pub lkey: __u32,
    pub rkey: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_reg_mr_resp"][::std::mem::size_of::<ib_uverbs_reg_mr_resp>() - 12usize];
    ["Alignment of ib_uverbs_reg_mr_resp"]
        [::std::mem::align_of::<ib_uverbs_reg_mr_resp>() - 4usize];
    ["Offset of field: ib_uverbs_reg_mr_resp::mr_handle"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr_resp, mr_handle) - 0usize];
    ["Offset of field: ib_uverbs_reg_mr_resp::lkey"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr_resp, lkey) - 4usize];
    ["Offset of field: ib_uverbs_reg_mr_resp::rkey"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr_resp, rkey) - 8usize];
    ["Offset of field: ib_uverbs_reg_mr_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_reg_mr_resp, driver_data) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_rereg_mr {
    pub response: __u64,
    pub mr_handle: __u32,
    pub flags: __u32,
    pub start: __u64,
    pub length: __u64,
    pub hca_va: __u64,
    pub pd_handle: __u32,
    pub access_flags: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_rereg_mr"][::std::mem::size_of::<ib_uverbs_rereg_mr>() - 48usize];
    ["Alignment of ib_uverbs_rereg_mr"][::std::mem::align_of::<ib_uverbs_rereg_mr>() - 8usize];
    ["Offset of field: ib_uverbs_rereg_mr::response"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, response) - 0usize];
    ["Offset of field: ib_uverbs_rereg_mr::mr_handle"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, mr_handle) - 8usize];
    ["Offset of field: ib_uverbs_rereg_mr::flags"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, flags) - 12usize];
    ["Offset of field: ib_uverbs_rereg_mr::start"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, start) - 16usize];
    ["Offset of field: ib_uverbs_rereg_mr::length"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, length) - 24usize];
    ["Offset of field: ib_uverbs_rereg_mr::hca_va"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, hca_va) - 32usize];
    ["Offset of field: ib_uverbs_rereg_mr::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, pd_handle) - 40usize];
    ["Offset of field: ib_uverbs_rereg_mr::access_flags"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, access_flags) - 44usize];
    ["Offset of field: ib_uverbs_rereg_mr::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr, driver_data) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_rereg_mr_resp {
    pub lkey: __u32,
    pub rkey: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_rereg_mr_resp"][::std::mem::size_of::<ib_uverbs_rereg_mr_resp>() - 8usize];
    ["Alignment of ib_uverbs_rereg_mr_resp"]
        [::std::mem::align_of::<ib_uverbs_rereg_mr_resp>() - 8usize];
    ["Offset of field: ib_uverbs_rereg_mr_resp::lkey"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr_resp, lkey) - 0usize];
    ["Offset of field: ib_uverbs_rereg_mr_resp::rkey"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr_resp, rkey) - 4usize];
    ["Offset of field: ib_uverbs_rereg_mr_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_rereg_mr_resp, driver_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_dereg_mr {
    pub mr_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_dereg_mr"][::std::mem::size_of::<ib_uverbs_dereg_mr>() - 4usize];
    ["Alignment of ib_uverbs_dereg_mr"][::std::mem::align_of::<ib_uverbs_dereg_mr>() - 4usize];
    ["Offset of field: ib_uverbs_dereg_mr::mr_handle"]
        [::std::mem::offset_of!(ib_uverbs_dereg_mr, mr_handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_alloc_mw {
    pub response: __u64,
    pub pd_handle: __u32,
    pub mw_type: __u8,
    pub reserved: [__u8; 3usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_alloc_mw"][::std::mem::size_of::<ib_uverbs_alloc_mw>() - 16usize];
    ["Alignment of ib_uverbs_alloc_mw"][::std::mem::align_of::<ib_uverbs_alloc_mw>() - 8usize];
    ["Offset of field: ib_uverbs_alloc_mw::response"]
        [::std::mem::offset_of!(ib_uverbs_alloc_mw, response) - 0usize];
    ["Offset of field: ib_uverbs_alloc_mw::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_alloc_mw, pd_handle) - 8usize];
    ["Offset of field: ib_uverbs_alloc_mw::mw_type"]
        [::std::mem::offset_of!(ib_uverbs_alloc_mw, mw_type) - 12usize];
    ["Offset of field: ib_uverbs_alloc_mw::reserved"]
        [::std::mem::offset_of!(ib_uverbs_alloc_mw, reserved) - 13usize];
    ["Offset of field: ib_uverbs_alloc_mw::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_alloc_mw, driver_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_alloc_mw_resp {
    pub mw_handle: __u32,
    pub rkey: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_alloc_mw_resp"][::std::mem::size_of::<ib_uverbs_alloc_mw_resp>() - 8usize];
    ["Alignment of ib_uverbs_alloc_mw_resp"]
        [::std::mem::align_of::<ib_uverbs_alloc_mw_resp>() - 8usize];
    ["Offset of field: ib_uverbs_alloc_mw_resp::mw_handle"]
        [::std::mem::offset_of!(ib_uverbs_alloc_mw_resp, mw_handle) - 0usize];
    ["Offset of field: ib_uverbs_alloc_mw_resp::rkey"]
        [::std::mem::offset_of!(ib_uverbs_alloc_mw_resp, rkey) - 4usize];
    ["Offset of field: ib_uverbs_alloc_mw_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_alloc_mw_resp, driver_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_dealloc_mw {
    pub mw_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_dealloc_mw"][::std::mem::size_of::<ib_uverbs_dealloc_mw>() - 4usize];
    ["Alignment of ib_uverbs_dealloc_mw"][::std::mem::align_of::<ib_uverbs_dealloc_mw>() - 4usize];
    ["Offset of field: ib_uverbs_dealloc_mw::mw_handle"]
        [::std::mem::offset_of!(ib_uverbs_dealloc_mw, mw_handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_create_comp_channel {
    pub response: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_comp_channel"]
        [::std::mem::size_of::<ib_uverbs_create_comp_channel>() - 8usize];
    ["Alignment of ib_uverbs_create_comp_channel"]
        [::std::mem::align_of::<ib_uverbs_create_comp_channel>() - 8usize];
    ["Offset of field: ib_uverbs_create_comp_channel::response"]
        [::std::mem::offset_of!(ib_uverbs_create_comp_channel, response) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_create_comp_channel_resp {
    pub fd: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_comp_channel_resp"]
        [::std::mem::size_of::<ib_uverbs_create_comp_channel_resp>() - 4usize];
    ["Alignment of ib_uverbs_create_comp_channel_resp"]
        [::std::mem::align_of::<ib_uverbs_create_comp_channel_resp>() - 4usize];
    ["Offset of field: ib_uverbs_create_comp_channel_resp::fd"]
        [::std::mem::offset_of!(ib_uverbs_create_comp_channel_resp, fd) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_cq {
    pub response: __u64,
    pub user_handle: __u64,
    pub cqe: __u32,
    pub comp_vector: __u32,
    pub comp_channel: __s32,
    pub reserved: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_cq"][::std::mem::size_of::<ib_uverbs_create_cq>() - 32usize];
    ["Alignment of ib_uverbs_create_cq"][::std::mem::align_of::<ib_uverbs_create_cq>() - 8usize];
    ["Offset of field: ib_uverbs_create_cq::response"]
        [::std::mem::offset_of!(ib_uverbs_create_cq, response) - 0usize];
    ["Offset of field: ib_uverbs_create_cq::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_cq, user_handle) - 8usize];
    ["Offset of field: ib_uverbs_create_cq::cqe"]
        [::std::mem::offset_of!(ib_uverbs_create_cq, cqe) - 16usize];
    ["Offset of field: ib_uverbs_create_cq::comp_vector"]
        [::std::mem::offset_of!(ib_uverbs_create_cq, comp_vector) - 20usize];
    ["Offset of field: ib_uverbs_create_cq::comp_channel"]
        [::std::mem::offset_of!(ib_uverbs_create_cq, comp_channel) - 24usize];
    ["Offset of field: ib_uverbs_create_cq::reserved"]
        [::std::mem::offset_of!(ib_uverbs_create_cq, reserved) - 28usize];
    ["Offset of field: ib_uverbs_create_cq::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_cq, driver_data) - 32usize];
};
pub const IB_UVERBS_CQ_FLAGS_TIMESTAMP_COMPLETION: ib_uverbs_ex_create_cq_flags = 1;
pub const IB_UVERBS_CQ_FLAGS_IGNORE_OVERRUN: ib_uverbs_ex_create_cq_flags = 2;
pub type ib_uverbs_ex_create_cq_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_cq {
    pub user_handle: __u64,
    pub cqe: __u32,
    pub comp_vector: __u32,
    pub comp_channel: __s32,
    pub comp_mask: __u32,
    pub flags: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_create_cq"][::std::mem::size_of::<ib_uverbs_ex_create_cq>() - 32usize];
    ["Alignment of ib_uverbs_ex_create_cq"]
        [::std::mem::align_of::<ib_uverbs_ex_create_cq>() - 8usize];
    ["Offset of field: ib_uverbs_ex_create_cq::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq, user_handle) - 0usize];
    ["Offset of field: ib_uverbs_ex_create_cq::cqe"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq, cqe) - 8usize];
    ["Offset of field: ib_uverbs_ex_create_cq::comp_vector"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq, comp_vector) - 12usize];
    ["Offset of field: ib_uverbs_ex_create_cq::comp_channel"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq, comp_channel) - 16usize];
    ["Offset of field: ib_uverbs_ex_create_cq::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq, comp_mask) - 20usize];
    ["Offset of field: ib_uverbs_ex_create_cq::flags"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq, flags) - 24usize];
    ["Offset of field: ib_uverbs_ex_create_cq::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq, reserved) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_cq_resp {
    pub cq_handle: __u32,
    pub cqe: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_cq_resp"]
        [::std::mem::size_of::<ib_uverbs_create_cq_resp>() - 8usize];
    ["Alignment of ib_uverbs_create_cq_resp"]
        [::std::mem::align_of::<ib_uverbs_create_cq_resp>() - 8usize];
    ["Offset of field: ib_uverbs_create_cq_resp::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_cq_resp, cq_handle) - 0usize];
    ["Offset of field: ib_uverbs_create_cq_resp::cqe"]
        [::std::mem::offset_of!(ib_uverbs_create_cq_resp, cqe) - 4usize];
    ["Offset of field: ib_uverbs_create_cq_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_cq_resp, driver_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_ex_create_cq_resp {
    pub base: ib_uverbs_create_cq_resp,
    pub comp_mask: __u32,
    pub response_length: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_create_cq_resp"]
        [::std::mem::size_of::<ib_uverbs_ex_create_cq_resp>() - 16usize];
    ["Alignment of ib_uverbs_ex_create_cq_resp"]
        [::std::mem::align_of::<ib_uverbs_ex_create_cq_resp>() - 8usize];
    ["Offset of field: ib_uverbs_ex_create_cq_resp::base"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq_resp, base) - 0usize];
    ["Offset of field: ib_uverbs_ex_create_cq_resp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq_resp, comp_mask) - 8usize];
    ["Offset of field: ib_uverbs_ex_create_cq_resp::response_length"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_cq_resp, response_length) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_resize_cq {
    pub response: __u64,
    pub cq_handle: __u32,
    pub cqe: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_resize_cq"][::std::mem::size_of::<ib_uverbs_resize_cq>() - 16usize];
    ["Alignment of ib_uverbs_resize_cq"][::std::mem::align_of::<ib_uverbs_resize_cq>() - 8usize];
    ["Offset of field: ib_uverbs_resize_cq::response"]
        [::std::mem::offset_of!(ib_uverbs_resize_cq, response) - 0usize];
    ["Offset of field: ib_uverbs_resize_cq::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_resize_cq, cq_handle) - 8usize];
    ["Offset of field: ib_uverbs_resize_cq::cqe"]
        [::std::mem::offset_of!(ib_uverbs_resize_cq, cqe) - 12usize];
    ["Offset of field: ib_uverbs_resize_cq::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_resize_cq, driver_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_resize_cq_resp {
    pub cqe: __u32,
    pub reserved: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_resize_cq_resp"]
        [::std::mem::size_of::<ib_uverbs_resize_cq_resp>() - 8usize];
    ["Alignment of ib_uverbs_resize_cq_resp"]
        [::std::mem::align_of::<ib_uverbs_resize_cq_resp>() - 8usize];
    ["Offset of field: ib_uverbs_resize_cq_resp::cqe"]
        [::std::mem::offset_of!(ib_uverbs_resize_cq_resp, cqe) - 0usize];
    ["Offset of field: ib_uverbs_resize_cq_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_resize_cq_resp, reserved) - 4usize];
    ["Offset of field: ib_uverbs_resize_cq_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_resize_cq_resp, driver_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_poll_cq {
    pub response: __u64,
    pub cq_handle: __u32,
    pub ne: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_poll_cq"][::std::mem::size_of::<ib_uverbs_poll_cq>() - 16usize];
    ["Alignment of ib_uverbs_poll_cq"][::std::mem::align_of::<ib_uverbs_poll_cq>() - 8usize];
    ["Offset of field: ib_uverbs_poll_cq::response"]
        [::std::mem::offset_of!(ib_uverbs_poll_cq, response) - 0usize];
    ["Offset of field: ib_uverbs_poll_cq::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_poll_cq, cq_handle) - 8usize];
    ["Offset of field: ib_uverbs_poll_cq::ne"]
        [::std::mem::offset_of!(ib_uverbs_poll_cq, ne) - 12usize];
};
pub const IB_UVERBS_WC_SEND: ib_uverbs_wc_opcode = 0;
pub const IB_UVERBS_WC_RDMA_WRITE: ib_uverbs_wc_opcode = 1;
pub const IB_UVERBS_WC_RDMA_READ: ib_uverbs_wc_opcode = 2;
pub const IB_UVERBS_WC_COMP_SWAP: ib_uverbs_wc_opcode = 3;
pub const IB_UVERBS_WC_FETCH_ADD: ib_uverbs_wc_opcode = 4;
pub const IB_UVERBS_WC_BIND_MW: ib_uverbs_wc_opcode = 5;
pub const IB_UVERBS_WC_LOCAL_INV: ib_uverbs_wc_opcode = 6;
pub const IB_UVERBS_WC_TSO: ib_uverbs_wc_opcode = 7;
pub const IB_UVERBS_WC_FLUSH: ib_uverbs_wc_opcode = 8;
pub const IB_UVERBS_WC_ATOMIC_WRITE: ib_uverbs_wc_opcode = 9;
pub type ib_uverbs_wc_opcode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_uverbs_wc {
    pub wr_id: __u64,
    pub status: __u32,
    pub opcode: __u32,
    pub vendor_err: __u32,
    pub byte_len: __u32,
    pub ex: ib_uverbs_wc__bindgen_ty_1,
    pub qp_num: __u32,
    pub src_qp: __u32,
    pub wc_flags: __u32,
    pub pkey_index: __u16,
    pub slid: __u16,
    pub sl: __u8,
    pub dlid_path_bits: __u8,
    pub port_num: __u8,
    pub reserved: __u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_wc__bindgen_ty_1 {
    pub imm_data: __be32,
    pub invalidate_rkey: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_wc__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_wc__bindgen_ty_1>() - 4usize];
    ["Alignment of ib_uverbs_wc__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_wc__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_wc__bindgen_ty_1::imm_data"]
        [::std::mem::offset_of!(ib_uverbs_wc__bindgen_ty_1, imm_data) - 0usize];
    ["Offset of field: ib_uverbs_wc__bindgen_ty_1::invalidate_rkey"]
        [::std::mem::offset_of!(ib_uverbs_wc__bindgen_ty_1, invalidate_rkey) - 0usize];
};
impl Default for ib_uverbs_wc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_wc"][::std::mem::size_of::<ib_uverbs_wc>() - 48usize];
    ["Alignment of ib_uverbs_wc"][::std::mem::align_of::<ib_uverbs_wc>() - 8usize];
    ["Offset of field: ib_uverbs_wc::wr_id"][::std::mem::offset_of!(ib_uverbs_wc, wr_id) - 0usize];
    ["Offset of field: ib_uverbs_wc::status"]
        [::std::mem::offset_of!(ib_uverbs_wc, status) - 8usize];
    ["Offset of field: ib_uverbs_wc::opcode"]
        [::std::mem::offset_of!(ib_uverbs_wc, opcode) - 12usize];
    ["Offset of field: ib_uverbs_wc::vendor_err"]
        [::std::mem::offset_of!(ib_uverbs_wc, vendor_err) - 16usize];
    ["Offset of field: ib_uverbs_wc::byte_len"]
        [::std::mem::offset_of!(ib_uverbs_wc, byte_len) - 20usize];
    ["Offset of field: ib_uverbs_wc::ex"][::std::mem::offset_of!(ib_uverbs_wc, ex) - 24usize];
    ["Offset of field: ib_uverbs_wc::qp_num"]
        [::std::mem::offset_of!(ib_uverbs_wc, qp_num) - 28usize];
    ["Offset of field: ib_uverbs_wc::src_qp"]
        [::std::mem::offset_of!(ib_uverbs_wc, src_qp) - 32usize];
    ["Offset of field: ib_uverbs_wc::wc_flags"]
        [::std::mem::offset_of!(ib_uverbs_wc, wc_flags) - 36usize];
    ["Offset of field: ib_uverbs_wc::pkey_index"]
        [::std::mem::offset_of!(ib_uverbs_wc, pkey_index) - 40usize];
    ["Offset of field: ib_uverbs_wc::slid"][::std::mem::offset_of!(ib_uverbs_wc, slid) - 42usize];
    ["Offset of field: ib_uverbs_wc::sl"][::std::mem::offset_of!(ib_uverbs_wc, sl) - 44usize];
    ["Offset of field: ib_uverbs_wc::dlid_path_bits"]
        [::std::mem::offset_of!(ib_uverbs_wc, dlid_path_bits) - 45usize];
    ["Offset of field: ib_uverbs_wc::port_num"]
        [::std::mem::offset_of!(ib_uverbs_wc, port_num) - 46usize];
    ["Offset of field: ib_uverbs_wc::reserved"]
        [::std::mem::offset_of!(ib_uverbs_wc, reserved) - 47usize];
};
impl Default for ib_uverbs_wc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_poll_cq_resp {
    pub count: __u32,
    pub reserved: __u32,
    pub wc: __IncompleteArrayField<ib_uverbs_wc>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_poll_cq_resp"][::std::mem::size_of::<ib_uverbs_poll_cq_resp>() - 8usize];
    ["Alignment of ib_uverbs_poll_cq_resp"]
        [::std::mem::align_of::<ib_uverbs_poll_cq_resp>() - 8usize];
    ["Offset of field: ib_uverbs_poll_cq_resp::count"]
        [::std::mem::offset_of!(ib_uverbs_poll_cq_resp, count) - 0usize];
    ["Offset of field: ib_uverbs_poll_cq_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_poll_cq_resp, reserved) - 4usize];
    ["Offset of field: ib_uverbs_poll_cq_resp::wc"]
        [::std::mem::offset_of!(ib_uverbs_poll_cq_resp, wc) - 8usize];
};
impl Default for ib_uverbs_poll_cq_resp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_req_notify_cq {
    pub cq_handle: __u32,
    pub solicited_only: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_req_notify_cq"][::std::mem::size_of::<ib_uverbs_req_notify_cq>() - 8usize];
    ["Alignment of ib_uverbs_req_notify_cq"]
        [::std::mem::align_of::<ib_uverbs_req_notify_cq>() - 4usize];
    ["Offset of field: ib_uverbs_req_notify_cq::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_req_notify_cq, cq_handle) - 0usize];
    ["Offset of field: ib_uverbs_req_notify_cq::solicited_only"]
        [::std::mem::offset_of!(ib_uverbs_req_notify_cq, solicited_only) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_cq {
    pub response: __u64,
    pub cq_handle: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_destroy_cq"][::std::mem::size_of::<ib_uverbs_destroy_cq>() - 16usize];
    ["Alignment of ib_uverbs_destroy_cq"][::std::mem::align_of::<ib_uverbs_destroy_cq>() - 8usize];
    ["Offset of field: ib_uverbs_destroy_cq::response"]
        [::std::mem::offset_of!(ib_uverbs_destroy_cq, response) - 0usize];
    ["Offset of field: ib_uverbs_destroy_cq::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_destroy_cq, cq_handle) - 8usize];
    ["Offset of field: ib_uverbs_destroy_cq::reserved"]
        [::std::mem::offset_of!(ib_uverbs_destroy_cq, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_cq_resp {
    pub comp_events_reported: __u32,
    pub async_events_reported: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_destroy_cq_resp"]
        [::std::mem::size_of::<ib_uverbs_destroy_cq_resp>() - 8usize];
    ["Alignment of ib_uverbs_destroy_cq_resp"]
        [::std::mem::align_of::<ib_uverbs_destroy_cq_resp>() - 4usize];
    ["Offset of field: ib_uverbs_destroy_cq_resp::comp_events_reported"]
        [::std::mem::offset_of!(ib_uverbs_destroy_cq_resp, comp_events_reported) - 0usize];
    ["Offset of field: ib_uverbs_destroy_cq_resp::async_events_reported"]
        [::std::mem::offset_of!(ib_uverbs_destroy_cq_resp, async_events_reported) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_global_route {
    pub dgid: [__u8; 16usize],
    pub flow_label: __u32,
    pub sgid_index: __u8,
    pub hop_limit: __u8,
    pub traffic_class: __u8,
    pub reserved: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_global_route"][::std::mem::size_of::<ib_uverbs_global_route>() - 24usize];
    ["Alignment of ib_uverbs_global_route"]
        [::std::mem::align_of::<ib_uverbs_global_route>() - 4usize];
    ["Offset of field: ib_uverbs_global_route::dgid"]
        [::std::mem::offset_of!(ib_uverbs_global_route, dgid) - 0usize];
    ["Offset of field: ib_uverbs_global_route::flow_label"]
        [::std::mem::offset_of!(ib_uverbs_global_route, flow_label) - 16usize];
    ["Offset of field: ib_uverbs_global_route::sgid_index"]
        [::std::mem::offset_of!(ib_uverbs_global_route, sgid_index) - 20usize];
    ["Offset of field: ib_uverbs_global_route::hop_limit"]
        [::std::mem::offset_of!(ib_uverbs_global_route, hop_limit) - 21usize];
    ["Offset of field: ib_uverbs_global_route::traffic_class"]
        [::std::mem::offset_of!(ib_uverbs_global_route, traffic_class) - 22usize];
    ["Offset of field: ib_uverbs_global_route::reserved"]
        [::std::mem::offset_of!(ib_uverbs_global_route, reserved) - 23usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ah_attr {
    pub grh: ib_uverbs_global_route,
    pub dlid: __u16,
    pub sl: __u8,
    pub src_path_bits: __u8,
    pub static_rate: __u8,
    pub is_global: __u8,
    pub port_num: __u8,
    pub reserved: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ah_attr"][::std::mem::size_of::<ib_uverbs_ah_attr>() - 32usize];
    ["Alignment of ib_uverbs_ah_attr"][::std::mem::align_of::<ib_uverbs_ah_attr>() - 4usize];
    ["Offset of field: ib_uverbs_ah_attr::grh"]
        [::std::mem::offset_of!(ib_uverbs_ah_attr, grh) - 0usize];
    ["Offset of field: ib_uverbs_ah_attr::dlid"]
        [::std::mem::offset_of!(ib_uverbs_ah_attr, dlid) - 24usize];
    ["Offset of field: ib_uverbs_ah_attr::sl"]
        [::std::mem::offset_of!(ib_uverbs_ah_attr, sl) - 26usize];
    ["Offset of field: ib_uverbs_ah_attr::src_path_bits"]
        [::std::mem::offset_of!(ib_uverbs_ah_attr, src_path_bits) - 27usize];
    ["Offset of field: ib_uverbs_ah_attr::static_rate"]
        [::std::mem::offset_of!(ib_uverbs_ah_attr, static_rate) - 28usize];
    ["Offset of field: ib_uverbs_ah_attr::is_global"]
        [::std::mem::offset_of!(ib_uverbs_ah_attr, is_global) - 29usize];
    ["Offset of field: ib_uverbs_ah_attr::port_num"]
        [::std::mem::offset_of!(ib_uverbs_ah_attr, port_num) - 30usize];
    ["Offset of field: ib_uverbs_ah_attr::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ah_attr, reserved) - 31usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_qp_attr {
    pub qp_attr_mask: __u32,
    pub qp_state: __u32,
    pub cur_qp_state: __u32,
    pub path_mtu: __u32,
    pub path_mig_state: __u32,
    pub qkey: __u32,
    pub rq_psn: __u32,
    pub sq_psn: __u32,
    pub dest_qp_num: __u32,
    pub qp_access_flags: __u32,
    pub ah_attr: ib_uverbs_ah_attr,
    pub alt_ah_attr: ib_uverbs_ah_attr,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub pkey_index: __u16,
    pub alt_pkey_index: __u16,
    pub en_sqd_async_notify: __u8,
    pub sq_draining: __u8,
    pub max_rd_atomic: __u8,
    pub max_dest_rd_atomic: __u8,
    pub min_rnr_timer: __u8,
    pub port_num: __u8,
    pub timeout: __u8,
    pub retry_cnt: __u8,
    pub rnr_retry: __u8,
    pub alt_port_num: __u8,
    pub alt_timeout: __u8,
    pub reserved: [__u8; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_qp_attr"][::std::mem::size_of::<ib_uverbs_qp_attr>() - 144usize];
    ["Alignment of ib_uverbs_qp_attr"][::std::mem::align_of::<ib_uverbs_qp_attr>() - 4usize];
    ["Offset of field: ib_uverbs_qp_attr::qp_attr_mask"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, qp_attr_mask) - 0usize];
    ["Offset of field: ib_uverbs_qp_attr::qp_state"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, qp_state) - 4usize];
    ["Offset of field: ib_uverbs_qp_attr::cur_qp_state"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, cur_qp_state) - 8usize];
    ["Offset of field: ib_uverbs_qp_attr::path_mtu"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, path_mtu) - 12usize];
    ["Offset of field: ib_uverbs_qp_attr::path_mig_state"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, path_mig_state) - 16usize];
    ["Offset of field: ib_uverbs_qp_attr::qkey"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, qkey) - 20usize];
    ["Offset of field: ib_uverbs_qp_attr::rq_psn"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, rq_psn) - 24usize];
    ["Offset of field: ib_uverbs_qp_attr::sq_psn"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, sq_psn) - 28usize];
    ["Offset of field: ib_uverbs_qp_attr::dest_qp_num"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, dest_qp_num) - 32usize];
    ["Offset of field: ib_uverbs_qp_attr::qp_access_flags"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, qp_access_flags) - 36usize];
    ["Offset of field: ib_uverbs_qp_attr::ah_attr"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, ah_attr) - 40usize];
    ["Offset of field: ib_uverbs_qp_attr::alt_ah_attr"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, alt_ah_attr) - 72usize];
    ["Offset of field: ib_uverbs_qp_attr::max_send_wr"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, max_send_wr) - 104usize];
    ["Offset of field: ib_uverbs_qp_attr::max_recv_wr"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, max_recv_wr) - 108usize];
    ["Offset of field: ib_uverbs_qp_attr::max_send_sge"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, max_send_sge) - 112usize];
    ["Offset of field: ib_uverbs_qp_attr::max_recv_sge"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, max_recv_sge) - 116usize];
    ["Offset of field: ib_uverbs_qp_attr::max_inline_data"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, max_inline_data) - 120usize];
    ["Offset of field: ib_uverbs_qp_attr::pkey_index"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, pkey_index) - 124usize];
    ["Offset of field: ib_uverbs_qp_attr::alt_pkey_index"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, alt_pkey_index) - 126usize];
    ["Offset of field: ib_uverbs_qp_attr::en_sqd_async_notify"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, en_sqd_async_notify) - 128usize];
    ["Offset of field: ib_uverbs_qp_attr::sq_draining"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, sq_draining) - 129usize];
    ["Offset of field: ib_uverbs_qp_attr::max_rd_atomic"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, max_rd_atomic) - 130usize];
    ["Offset of field: ib_uverbs_qp_attr::max_dest_rd_atomic"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, max_dest_rd_atomic) - 131usize];
    ["Offset of field: ib_uverbs_qp_attr::min_rnr_timer"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, min_rnr_timer) - 132usize];
    ["Offset of field: ib_uverbs_qp_attr::port_num"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, port_num) - 133usize];
    ["Offset of field: ib_uverbs_qp_attr::timeout"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, timeout) - 134usize];
    ["Offset of field: ib_uverbs_qp_attr::retry_cnt"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, retry_cnt) - 135usize];
    ["Offset of field: ib_uverbs_qp_attr::rnr_retry"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, rnr_retry) - 136usize];
    ["Offset of field: ib_uverbs_qp_attr::alt_port_num"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, alt_port_num) - 137usize];
    ["Offset of field: ib_uverbs_qp_attr::alt_timeout"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, alt_timeout) - 138usize];
    ["Offset of field: ib_uverbs_qp_attr::reserved"]
        [::std::mem::offset_of!(ib_uverbs_qp_attr, reserved) - 139usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_qp {
    pub response: __u64,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub send_cq_handle: __u32,
    pub recv_cq_handle: __u32,
    pub srq_handle: __u32,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub sq_sig_all: __u8,
    pub qp_type: __u8,
    pub is_srq: __u8,
    pub reserved: __u8,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_qp"][::std::mem::size_of::<ib_uverbs_create_qp>() - 56usize];
    ["Alignment of ib_uverbs_create_qp"][::std::mem::align_of::<ib_uverbs_create_qp>() - 8usize];
    ["Offset of field: ib_uverbs_create_qp::response"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, response) - 0usize];
    ["Offset of field: ib_uverbs_create_qp::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, user_handle) - 8usize];
    ["Offset of field: ib_uverbs_create_qp::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, pd_handle) - 16usize];
    ["Offset of field: ib_uverbs_create_qp::send_cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, send_cq_handle) - 20usize];
    ["Offset of field: ib_uverbs_create_qp::recv_cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, recv_cq_handle) - 24usize];
    ["Offset of field: ib_uverbs_create_qp::srq_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, srq_handle) - 28usize];
    ["Offset of field: ib_uverbs_create_qp::max_send_wr"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, max_send_wr) - 32usize];
    ["Offset of field: ib_uverbs_create_qp::max_recv_wr"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, max_recv_wr) - 36usize];
    ["Offset of field: ib_uverbs_create_qp::max_send_sge"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, max_send_sge) - 40usize];
    ["Offset of field: ib_uverbs_create_qp::max_recv_sge"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, max_recv_sge) - 44usize];
    ["Offset of field: ib_uverbs_create_qp::max_inline_data"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, max_inline_data) - 48usize];
    ["Offset of field: ib_uverbs_create_qp::sq_sig_all"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, sq_sig_all) - 52usize];
    ["Offset of field: ib_uverbs_create_qp::qp_type"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, qp_type) - 53usize];
    ["Offset of field: ib_uverbs_create_qp::is_srq"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, is_srq) - 54usize];
    ["Offset of field: ib_uverbs_create_qp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, reserved) - 55usize];
    ["Offset of field: ib_uverbs_create_qp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_qp, driver_data) - 56usize];
};
pub const IB_UVERBS_CREATE_QP_MASK_IND_TABLE: ib_uverbs_create_qp_mask = 1;
pub type ib_uverbs_create_qp_mask = ::std::os::raw::c_uint;
pub const IB_UVERBS_CREATE_QP_SUP_COMP_MASK: _bindgen_ty_12 = 1;
pub type _bindgen_ty_12 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_qp {
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub send_cq_handle: __u32,
    pub recv_cq_handle: __u32,
    pub srq_handle: __u32,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub sq_sig_all: __u8,
    pub qp_type: __u8,
    pub is_srq: __u8,
    pub reserved: __u8,
    pub comp_mask: __u32,
    pub create_flags: __u32,
    pub rwq_ind_tbl_handle: __u32,
    pub source_qpn: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_create_qp"][::std::mem::size_of::<ib_uverbs_ex_create_qp>() - 64usize];
    ["Alignment of ib_uverbs_ex_create_qp"]
        [::std::mem::align_of::<ib_uverbs_ex_create_qp>() - 8usize];
    ["Offset of field: ib_uverbs_ex_create_qp::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, user_handle) - 0usize];
    ["Offset of field: ib_uverbs_ex_create_qp::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, pd_handle) - 8usize];
    ["Offset of field: ib_uverbs_ex_create_qp::send_cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, send_cq_handle) - 12usize];
    ["Offset of field: ib_uverbs_ex_create_qp::recv_cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, recv_cq_handle) - 16usize];
    ["Offset of field: ib_uverbs_ex_create_qp::srq_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, srq_handle) - 20usize];
    ["Offset of field: ib_uverbs_ex_create_qp::max_send_wr"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, max_send_wr) - 24usize];
    ["Offset of field: ib_uverbs_ex_create_qp::max_recv_wr"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, max_recv_wr) - 28usize];
    ["Offset of field: ib_uverbs_ex_create_qp::max_send_sge"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, max_send_sge) - 32usize];
    ["Offset of field: ib_uverbs_ex_create_qp::max_recv_sge"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, max_recv_sge) - 36usize];
    ["Offset of field: ib_uverbs_ex_create_qp::max_inline_data"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, max_inline_data) - 40usize];
    ["Offset of field: ib_uverbs_ex_create_qp::sq_sig_all"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, sq_sig_all) - 44usize];
    ["Offset of field: ib_uverbs_ex_create_qp::qp_type"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, qp_type) - 45usize];
    ["Offset of field: ib_uverbs_ex_create_qp::is_srq"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, is_srq) - 46usize];
    ["Offset of field: ib_uverbs_ex_create_qp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, reserved) - 47usize];
    ["Offset of field: ib_uverbs_ex_create_qp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, comp_mask) - 48usize];
    ["Offset of field: ib_uverbs_ex_create_qp::create_flags"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, create_flags) - 52usize];
    ["Offset of field: ib_uverbs_ex_create_qp::rwq_ind_tbl_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, rwq_ind_tbl_handle) - 56usize];
    ["Offset of field: ib_uverbs_ex_create_qp::source_qpn"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp, source_qpn) - 60usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_open_qp {
    pub response: __u64,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub qpn: __u32,
    pub qp_type: __u8,
    pub reserved: [__u8; 7usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_open_qp"][::std::mem::size_of::<ib_uverbs_open_qp>() - 32usize];
    ["Alignment of ib_uverbs_open_qp"][::std::mem::align_of::<ib_uverbs_open_qp>() - 8usize];
    ["Offset of field: ib_uverbs_open_qp::response"]
        [::std::mem::offset_of!(ib_uverbs_open_qp, response) - 0usize];
    ["Offset of field: ib_uverbs_open_qp::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_open_qp, user_handle) - 8usize];
    ["Offset of field: ib_uverbs_open_qp::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_open_qp, pd_handle) - 16usize];
    ["Offset of field: ib_uverbs_open_qp::qpn"]
        [::std::mem::offset_of!(ib_uverbs_open_qp, qpn) - 20usize];
    ["Offset of field: ib_uverbs_open_qp::qp_type"]
        [::std::mem::offset_of!(ib_uverbs_open_qp, qp_type) - 24usize];
    ["Offset of field: ib_uverbs_open_qp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_open_qp, reserved) - 25usize];
    ["Offset of field: ib_uverbs_open_qp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_open_qp, driver_data) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_qp_resp {
    pub qp_handle: __u32,
    pub qpn: __u32,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub reserved: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_qp_resp"]
        [::std::mem::size_of::<ib_uverbs_create_qp_resp>() - 32usize];
    ["Alignment of ib_uverbs_create_qp_resp"]
        [::std::mem::align_of::<ib_uverbs_create_qp_resp>() - 4usize];
    ["Offset of field: ib_uverbs_create_qp_resp::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, qp_handle) - 0usize];
    ["Offset of field: ib_uverbs_create_qp_resp::qpn"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, qpn) - 4usize];
    ["Offset of field: ib_uverbs_create_qp_resp::max_send_wr"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, max_send_wr) - 8usize];
    ["Offset of field: ib_uverbs_create_qp_resp::max_recv_wr"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, max_recv_wr) - 12usize];
    ["Offset of field: ib_uverbs_create_qp_resp::max_send_sge"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, max_send_sge) - 16usize];
    ["Offset of field: ib_uverbs_create_qp_resp::max_recv_sge"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, max_recv_sge) - 20usize];
    ["Offset of field: ib_uverbs_create_qp_resp::max_inline_data"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, max_inline_data) - 24usize];
    ["Offset of field: ib_uverbs_create_qp_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, reserved) - 28usize];
    ["Offset of field: ib_uverbs_create_qp_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_qp_resp, driver_data) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_ex_create_qp_resp {
    pub base: ib_uverbs_create_qp_resp,
    pub comp_mask: __u32,
    pub response_length: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_create_qp_resp"]
        [::std::mem::size_of::<ib_uverbs_ex_create_qp_resp>() - 40usize];
    ["Alignment of ib_uverbs_ex_create_qp_resp"]
        [::std::mem::align_of::<ib_uverbs_ex_create_qp_resp>() - 4usize];
    ["Offset of field: ib_uverbs_ex_create_qp_resp::base"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp_resp, base) - 0usize];
    ["Offset of field: ib_uverbs_ex_create_qp_resp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp_resp, comp_mask) - 32usize];
    ["Offset of field: ib_uverbs_ex_create_qp_resp::response_length"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_qp_resp, response_length) - 36usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_qp_dest {
    pub dgid: [__u8; 16usize],
    pub flow_label: __u32,
    pub dlid: __u16,
    pub reserved: __u16,
    pub sgid_index: __u8,
    pub hop_limit: __u8,
    pub traffic_class: __u8,
    pub sl: __u8,
    pub src_path_bits: __u8,
    pub static_rate: __u8,
    pub is_global: __u8,
    pub port_num: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_qp_dest"][::std::mem::size_of::<ib_uverbs_qp_dest>() - 32usize];
    ["Alignment of ib_uverbs_qp_dest"][::std::mem::align_of::<ib_uverbs_qp_dest>() - 4usize];
    ["Offset of field: ib_uverbs_qp_dest::dgid"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, dgid) - 0usize];
    ["Offset of field: ib_uverbs_qp_dest::flow_label"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, flow_label) - 16usize];
    ["Offset of field: ib_uverbs_qp_dest::dlid"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, dlid) - 20usize];
    ["Offset of field: ib_uverbs_qp_dest::reserved"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, reserved) - 22usize];
    ["Offset of field: ib_uverbs_qp_dest::sgid_index"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, sgid_index) - 24usize];
    ["Offset of field: ib_uverbs_qp_dest::hop_limit"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, hop_limit) - 25usize];
    ["Offset of field: ib_uverbs_qp_dest::traffic_class"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, traffic_class) - 26usize];
    ["Offset of field: ib_uverbs_qp_dest::sl"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, sl) - 27usize];
    ["Offset of field: ib_uverbs_qp_dest::src_path_bits"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, src_path_bits) - 28usize];
    ["Offset of field: ib_uverbs_qp_dest::static_rate"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, static_rate) - 29usize];
    ["Offset of field: ib_uverbs_qp_dest::is_global"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, is_global) - 30usize];
    ["Offset of field: ib_uverbs_qp_dest::port_num"]
        [::std::mem::offset_of!(ib_uverbs_qp_dest, port_num) - 31usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_qp {
    pub response: __u64,
    pub qp_handle: __u32,
    pub attr_mask: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_qp"][::std::mem::size_of::<ib_uverbs_query_qp>() - 16usize];
    ["Alignment of ib_uverbs_query_qp"][::std::mem::align_of::<ib_uverbs_query_qp>() - 8usize];
    ["Offset of field: ib_uverbs_query_qp::response"]
        [::std::mem::offset_of!(ib_uverbs_query_qp, response) - 0usize];
    ["Offset of field: ib_uverbs_query_qp::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_query_qp, qp_handle) - 8usize];
    ["Offset of field: ib_uverbs_query_qp::attr_mask"]
        [::std::mem::offset_of!(ib_uverbs_query_qp, attr_mask) - 12usize];
    ["Offset of field: ib_uverbs_query_qp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_query_qp, driver_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_qp_resp {
    pub dest: ib_uverbs_qp_dest,
    pub alt_dest: ib_uverbs_qp_dest,
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
    pub qkey: __u32,
    pub rq_psn: __u32,
    pub sq_psn: __u32,
    pub dest_qp_num: __u32,
    pub qp_access_flags: __u32,
    pub pkey_index: __u16,
    pub alt_pkey_index: __u16,
    pub qp_state: __u8,
    pub cur_qp_state: __u8,
    pub path_mtu: __u8,
    pub path_mig_state: __u8,
    pub sq_draining: __u8,
    pub max_rd_atomic: __u8,
    pub max_dest_rd_atomic: __u8,
    pub min_rnr_timer: __u8,
    pub port_num: __u8,
    pub timeout: __u8,
    pub retry_cnt: __u8,
    pub rnr_retry: __u8,
    pub alt_port_num: __u8,
    pub alt_timeout: __u8,
    pub sq_sig_all: __u8,
    pub reserved: [__u8; 5usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_qp_resp"]
        [::std::mem::size_of::<ib_uverbs_query_qp_resp>() - 128usize];
    ["Alignment of ib_uverbs_query_qp_resp"]
        [::std::mem::align_of::<ib_uverbs_query_qp_resp>() - 8usize];
    ["Offset of field: ib_uverbs_query_qp_resp::dest"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, dest) - 0usize];
    ["Offset of field: ib_uverbs_query_qp_resp::alt_dest"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, alt_dest) - 32usize];
    ["Offset of field: ib_uverbs_query_qp_resp::max_send_wr"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, max_send_wr) - 64usize];
    ["Offset of field: ib_uverbs_query_qp_resp::max_recv_wr"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, max_recv_wr) - 68usize];
    ["Offset of field: ib_uverbs_query_qp_resp::max_send_sge"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, max_send_sge) - 72usize];
    ["Offset of field: ib_uverbs_query_qp_resp::max_recv_sge"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, max_recv_sge) - 76usize];
    ["Offset of field: ib_uverbs_query_qp_resp::max_inline_data"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, max_inline_data) - 80usize];
    ["Offset of field: ib_uverbs_query_qp_resp::qkey"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, qkey) - 84usize];
    ["Offset of field: ib_uverbs_query_qp_resp::rq_psn"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, rq_psn) - 88usize];
    ["Offset of field: ib_uverbs_query_qp_resp::sq_psn"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, sq_psn) - 92usize];
    ["Offset of field: ib_uverbs_query_qp_resp::dest_qp_num"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, dest_qp_num) - 96usize];
    ["Offset of field: ib_uverbs_query_qp_resp::qp_access_flags"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, qp_access_flags) - 100usize];
    ["Offset of field: ib_uverbs_query_qp_resp::pkey_index"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, pkey_index) - 104usize];
    ["Offset of field: ib_uverbs_query_qp_resp::alt_pkey_index"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, alt_pkey_index) - 106usize];
    ["Offset of field: ib_uverbs_query_qp_resp::qp_state"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, qp_state) - 108usize];
    ["Offset of field: ib_uverbs_query_qp_resp::cur_qp_state"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, cur_qp_state) - 109usize];
    ["Offset of field: ib_uverbs_query_qp_resp::path_mtu"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, path_mtu) - 110usize];
    ["Offset of field: ib_uverbs_query_qp_resp::path_mig_state"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, path_mig_state) - 111usize];
    ["Offset of field: ib_uverbs_query_qp_resp::sq_draining"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, sq_draining) - 112usize];
    ["Offset of field: ib_uverbs_query_qp_resp::max_rd_atomic"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, max_rd_atomic) - 113usize];
    ["Offset of field: ib_uverbs_query_qp_resp::max_dest_rd_atomic"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, max_dest_rd_atomic) - 114usize];
    ["Offset of field: ib_uverbs_query_qp_resp::min_rnr_timer"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, min_rnr_timer) - 115usize];
    ["Offset of field: ib_uverbs_query_qp_resp::port_num"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, port_num) - 116usize];
    ["Offset of field: ib_uverbs_query_qp_resp::timeout"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, timeout) - 117usize];
    ["Offset of field: ib_uverbs_query_qp_resp::retry_cnt"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, retry_cnt) - 118usize];
    ["Offset of field: ib_uverbs_query_qp_resp::rnr_retry"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, rnr_retry) - 119usize];
    ["Offset of field: ib_uverbs_query_qp_resp::alt_port_num"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, alt_port_num) - 120usize];
    ["Offset of field: ib_uverbs_query_qp_resp::alt_timeout"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, alt_timeout) - 121usize];
    ["Offset of field: ib_uverbs_query_qp_resp::sq_sig_all"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, sq_sig_all) - 122usize];
    ["Offset of field: ib_uverbs_query_qp_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, reserved) - 123usize];
    ["Offset of field: ib_uverbs_query_qp_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_query_qp_resp, driver_data) - 128usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_modify_qp {
    pub dest: ib_uverbs_qp_dest,
    pub alt_dest: ib_uverbs_qp_dest,
    pub qp_handle: __u32,
    pub attr_mask: __u32,
    pub qkey: __u32,
    pub rq_psn: __u32,
    pub sq_psn: __u32,
    pub dest_qp_num: __u32,
    pub qp_access_flags: __u32,
    pub pkey_index: __u16,
    pub alt_pkey_index: __u16,
    pub qp_state: __u8,
    pub cur_qp_state: __u8,
    pub path_mtu: __u8,
    pub path_mig_state: __u8,
    pub en_sqd_async_notify: __u8,
    pub max_rd_atomic: __u8,
    pub max_dest_rd_atomic: __u8,
    pub min_rnr_timer: __u8,
    pub port_num: __u8,
    pub timeout: __u8,
    pub retry_cnt: __u8,
    pub rnr_retry: __u8,
    pub alt_port_num: __u8,
    pub alt_timeout: __u8,
    pub reserved: [__u8; 2usize],
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_modify_qp"][::std::mem::size_of::<ib_uverbs_modify_qp>() - 112usize];
    ["Alignment of ib_uverbs_modify_qp"][::std::mem::align_of::<ib_uverbs_modify_qp>() - 8usize];
    ["Offset of field: ib_uverbs_modify_qp::dest"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, dest) - 0usize];
    ["Offset of field: ib_uverbs_modify_qp::alt_dest"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, alt_dest) - 32usize];
    ["Offset of field: ib_uverbs_modify_qp::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, qp_handle) - 64usize];
    ["Offset of field: ib_uverbs_modify_qp::attr_mask"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, attr_mask) - 68usize];
    ["Offset of field: ib_uverbs_modify_qp::qkey"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, qkey) - 72usize];
    ["Offset of field: ib_uverbs_modify_qp::rq_psn"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, rq_psn) - 76usize];
    ["Offset of field: ib_uverbs_modify_qp::sq_psn"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, sq_psn) - 80usize];
    ["Offset of field: ib_uverbs_modify_qp::dest_qp_num"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, dest_qp_num) - 84usize];
    ["Offset of field: ib_uverbs_modify_qp::qp_access_flags"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, qp_access_flags) - 88usize];
    ["Offset of field: ib_uverbs_modify_qp::pkey_index"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, pkey_index) - 92usize];
    ["Offset of field: ib_uverbs_modify_qp::alt_pkey_index"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, alt_pkey_index) - 94usize];
    ["Offset of field: ib_uverbs_modify_qp::qp_state"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, qp_state) - 96usize];
    ["Offset of field: ib_uverbs_modify_qp::cur_qp_state"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, cur_qp_state) - 97usize];
    ["Offset of field: ib_uverbs_modify_qp::path_mtu"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, path_mtu) - 98usize];
    ["Offset of field: ib_uverbs_modify_qp::path_mig_state"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, path_mig_state) - 99usize];
    ["Offset of field: ib_uverbs_modify_qp::en_sqd_async_notify"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, en_sqd_async_notify) - 100usize];
    ["Offset of field: ib_uverbs_modify_qp::max_rd_atomic"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, max_rd_atomic) - 101usize];
    ["Offset of field: ib_uverbs_modify_qp::max_dest_rd_atomic"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, max_dest_rd_atomic) - 102usize];
    ["Offset of field: ib_uverbs_modify_qp::min_rnr_timer"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, min_rnr_timer) - 103usize];
    ["Offset of field: ib_uverbs_modify_qp::port_num"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, port_num) - 104usize];
    ["Offset of field: ib_uverbs_modify_qp::timeout"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, timeout) - 105usize];
    ["Offset of field: ib_uverbs_modify_qp::retry_cnt"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, retry_cnt) - 106usize];
    ["Offset of field: ib_uverbs_modify_qp::rnr_retry"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, rnr_retry) - 107usize];
    ["Offset of field: ib_uverbs_modify_qp::alt_port_num"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, alt_port_num) - 108usize];
    ["Offset of field: ib_uverbs_modify_qp::alt_timeout"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, alt_timeout) - 109usize];
    ["Offset of field: ib_uverbs_modify_qp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, reserved) - 110usize];
    ["Offset of field: ib_uverbs_modify_qp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_modify_qp, driver_data) - 112usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_ex_modify_qp {
    pub base: ib_uverbs_modify_qp,
    pub rate_limit: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_modify_qp"][::std::mem::size_of::<ib_uverbs_ex_modify_qp>() - 120usize];
    ["Alignment of ib_uverbs_ex_modify_qp"]
        [::std::mem::align_of::<ib_uverbs_ex_modify_qp>() - 8usize];
    ["Offset of field: ib_uverbs_ex_modify_qp::base"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_qp, base) - 0usize];
    ["Offset of field: ib_uverbs_ex_modify_qp::rate_limit"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_qp, rate_limit) - 112usize];
    ["Offset of field: ib_uverbs_ex_modify_qp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_qp, reserved) - 116usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_modify_qp_resp {
    pub comp_mask: __u32,
    pub response_length: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_modify_qp_resp"]
        [::std::mem::size_of::<ib_uverbs_ex_modify_qp_resp>() - 8usize];
    ["Alignment of ib_uverbs_ex_modify_qp_resp"]
        [::std::mem::align_of::<ib_uverbs_ex_modify_qp_resp>() - 4usize];
    ["Offset of field: ib_uverbs_ex_modify_qp_resp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_qp_resp, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_modify_qp_resp::response_length"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_qp_resp, response_length) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_qp {
    pub response: __u64,
    pub qp_handle: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_destroy_qp"][::std::mem::size_of::<ib_uverbs_destroy_qp>() - 16usize];
    ["Alignment of ib_uverbs_destroy_qp"][::std::mem::align_of::<ib_uverbs_destroy_qp>() - 8usize];
    ["Offset of field: ib_uverbs_destroy_qp::response"]
        [::std::mem::offset_of!(ib_uverbs_destroy_qp, response) - 0usize];
    ["Offset of field: ib_uverbs_destroy_qp::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_destroy_qp, qp_handle) - 8usize];
    ["Offset of field: ib_uverbs_destroy_qp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_destroy_qp, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_qp_resp {
    pub events_reported: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_destroy_qp_resp"]
        [::std::mem::size_of::<ib_uverbs_destroy_qp_resp>() - 4usize];
    ["Alignment of ib_uverbs_destroy_qp_resp"]
        [::std::mem::align_of::<ib_uverbs_destroy_qp_resp>() - 4usize];
    ["Offset of field: ib_uverbs_destroy_qp_resp::events_reported"]
        [::std::mem::offset_of!(ib_uverbs_destroy_qp_resp, events_reported) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_sge {
    pub addr: __u64,
    pub length: __u32,
    pub lkey: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_sge"][::std::mem::size_of::<ib_uverbs_sge>() - 16usize];
    ["Alignment of ib_uverbs_sge"][::std::mem::align_of::<ib_uverbs_sge>() - 8usize];
    ["Offset of field: ib_uverbs_sge::addr"][::std::mem::offset_of!(ib_uverbs_sge, addr) - 0usize];
    ["Offset of field: ib_uverbs_sge::length"]
        [::std::mem::offset_of!(ib_uverbs_sge, length) - 8usize];
    ["Offset of field: ib_uverbs_sge::lkey"][::std::mem::offset_of!(ib_uverbs_sge, lkey) - 12usize];
};
pub const IB_UVERBS_WR_RDMA_WRITE: ib_uverbs_wr_opcode = 0;
pub const IB_UVERBS_WR_RDMA_WRITE_WITH_IMM: ib_uverbs_wr_opcode = 1;
pub const IB_UVERBS_WR_SEND: ib_uverbs_wr_opcode = 2;
pub const IB_UVERBS_WR_SEND_WITH_IMM: ib_uverbs_wr_opcode = 3;
pub const IB_UVERBS_WR_RDMA_READ: ib_uverbs_wr_opcode = 4;
pub const IB_UVERBS_WR_ATOMIC_CMP_AND_SWP: ib_uverbs_wr_opcode = 5;
pub const IB_UVERBS_WR_ATOMIC_FETCH_AND_ADD: ib_uverbs_wr_opcode = 6;
pub const IB_UVERBS_WR_LOCAL_INV: ib_uverbs_wr_opcode = 7;
pub const IB_UVERBS_WR_BIND_MW: ib_uverbs_wr_opcode = 8;
pub const IB_UVERBS_WR_SEND_WITH_INV: ib_uverbs_wr_opcode = 9;
pub const IB_UVERBS_WR_TSO: ib_uverbs_wr_opcode = 10;
pub const IB_UVERBS_WR_RDMA_READ_WITH_INV: ib_uverbs_wr_opcode = 11;
pub const IB_UVERBS_WR_MASKED_ATOMIC_CMP_AND_SWP: ib_uverbs_wr_opcode = 12;
pub const IB_UVERBS_WR_MASKED_ATOMIC_FETCH_AND_ADD: ib_uverbs_wr_opcode = 13;
pub const IB_UVERBS_WR_FLUSH: ib_uverbs_wr_opcode = 14;
pub const IB_UVERBS_WR_ATOMIC_WRITE: ib_uverbs_wr_opcode = 15;
pub type ib_uverbs_wr_opcode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_uverbs_send_wr {
    pub wr_id: __u64,
    pub num_sge: __u32,
    pub opcode: __u32,
    pub send_flags: __u32,
    pub ex: ib_uverbs_send_wr__bindgen_ty_1,
    pub wr: ib_uverbs_send_wr__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_send_wr__bindgen_ty_1 {
    pub imm_data: __be32,
    pub invalidate_rkey: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_send_wr__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_1>() - 4usize];
    ["Alignment of ib_uverbs_send_wr__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_1::imm_data"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_1, imm_data) - 0usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_1::invalidate_rkey"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_1, invalidate_rkey) - 0usize];
};
impl Default for ib_uverbs_send_wr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_send_wr__bindgen_ty_2 {
    pub rdma: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1,
    pub atomic: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2,
    pub ud: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1 {
    pub remote_addr: __u64,
    pub rkey: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1>() - 16usize];
    ["Alignment of ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1::remote_addr"][::std::mem::offset_of!(
        ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1,
        remote_addr
    ) - 0usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1::rkey"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1, rkey) - 8usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1::reserved"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_1, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2 {
    pub remote_addr: __u64,
    pub compare_add: __u64,
    pub swap: __u64,
    pub rkey: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2>() - 32usize];
    ["Alignment of ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2>() - 8usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2::remote_addr"][::std::mem::offset_of!(
        ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2,
        remote_addr
    ) - 0usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2::compare_add"][::std::mem::offset_of!(
        ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2,
        compare_add
    ) - 8usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2::swap"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2, swap) - 16usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2::rkey"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2, rkey) - 24usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2::reserved"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_2, reserved) - 28usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3 {
    pub ah: __u32,
    pub remote_qpn: __u32,
    pub remote_qkey: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3>() - 16usize];
    ["Alignment of ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3>() - 4usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3::ah"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3, ah) - 0usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3::remote_qpn"][::std::mem::offset_of!(
        ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3,
        remote_qpn
    ) - 4usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3::remote_qkey"][::std::mem::offset_of!(
        ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3,
        remote_qkey
    ) - 8usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3::reserved"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2__bindgen_ty_3, reserved) - 12usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_send_wr__bindgen_ty_2"]
        [::std::mem::size_of::<ib_uverbs_send_wr__bindgen_ty_2>() - 32usize];
    ["Alignment of ib_uverbs_send_wr__bindgen_ty_2"]
        [::std::mem::align_of::<ib_uverbs_send_wr__bindgen_ty_2>() - 8usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2::rdma"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2, rdma) - 0usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2::atomic"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2, atomic) - 0usize];
    ["Offset of field: ib_uverbs_send_wr__bindgen_ty_2::ud"]
        [::std::mem::offset_of!(ib_uverbs_send_wr__bindgen_ty_2, ud) - 0usize];
};
impl Default for ib_uverbs_send_wr__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_send_wr"][::std::mem::size_of::<ib_uverbs_send_wr>() - 56usize];
    ["Alignment of ib_uverbs_send_wr"][::std::mem::align_of::<ib_uverbs_send_wr>() - 8usize];
    ["Offset of field: ib_uverbs_send_wr::wr_id"]
        [::std::mem::offset_of!(ib_uverbs_send_wr, wr_id) - 0usize];
    ["Offset of field: ib_uverbs_send_wr::num_sge"]
        [::std::mem::offset_of!(ib_uverbs_send_wr, num_sge) - 8usize];
    ["Offset of field: ib_uverbs_send_wr::opcode"]
        [::std::mem::offset_of!(ib_uverbs_send_wr, opcode) - 12usize];
    ["Offset of field: ib_uverbs_send_wr::send_flags"]
        [::std::mem::offset_of!(ib_uverbs_send_wr, send_flags) - 16usize];
    ["Offset of field: ib_uverbs_send_wr::ex"]
        [::std::mem::offset_of!(ib_uverbs_send_wr, ex) - 20usize];
    ["Offset of field: ib_uverbs_send_wr::wr"]
        [::std::mem::offset_of!(ib_uverbs_send_wr, wr) - 24usize];
};
impl Default for ib_uverbs_send_wr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_post_send {
    pub response: __u64,
    pub qp_handle: __u32,
    pub wr_count: __u32,
    pub sge_count: __u32,
    pub wqe_size: __u32,
    pub send_wr: __IncompleteArrayField<ib_uverbs_send_wr>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_post_send"][::std::mem::size_of::<ib_uverbs_post_send>() - 24usize];
    ["Alignment of ib_uverbs_post_send"][::std::mem::align_of::<ib_uverbs_post_send>() - 8usize];
    ["Offset of field: ib_uverbs_post_send::response"]
        [::std::mem::offset_of!(ib_uverbs_post_send, response) - 0usize];
    ["Offset of field: ib_uverbs_post_send::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_post_send, qp_handle) - 8usize];
    ["Offset of field: ib_uverbs_post_send::wr_count"]
        [::std::mem::offset_of!(ib_uverbs_post_send, wr_count) - 12usize];
    ["Offset of field: ib_uverbs_post_send::sge_count"]
        [::std::mem::offset_of!(ib_uverbs_post_send, sge_count) - 16usize];
    ["Offset of field: ib_uverbs_post_send::wqe_size"]
        [::std::mem::offset_of!(ib_uverbs_post_send, wqe_size) - 20usize];
    ["Offset of field: ib_uverbs_post_send::send_wr"]
        [::std::mem::offset_of!(ib_uverbs_post_send, send_wr) - 24usize];
};
impl Default for ib_uverbs_post_send {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_post_send_resp {
    pub bad_wr: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_post_send_resp"]
        [::std::mem::size_of::<ib_uverbs_post_send_resp>() - 4usize];
    ["Alignment of ib_uverbs_post_send_resp"]
        [::std::mem::align_of::<ib_uverbs_post_send_resp>() - 4usize];
    ["Offset of field: ib_uverbs_post_send_resp::bad_wr"]
        [::std::mem::offset_of!(ib_uverbs_post_send_resp, bad_wr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_recv_wr {
    pub wr_id: __u64,
    pub num_sge: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_recv_wr"][::std::mem::size_of::<ib_uverbs_recv_wr>() - 16usize];
    ["Alignment of ib_uverbs_recv_wr"][::std::mem::align_of::<ib_uverbs_recv_wr>() - 8usize];
    ["Offset of field: ib_uverbs_recv_wr::wr_id"]
        [::std::mem::offset_of!(ib_uverbs_recv_wr, wr_id) - 0usize];
    ["Offset of field: ib_uverbs_recv_wr::num_sge"]
        [::std::mem::offset_of!(ib_uverbs_recv_wr, num_sge) - 8usize];
    ["Offset of field: ib_uverbs_recv_wr::reserved"]
        [::std::mem::offset_of!(ib_uverbs_recv_wr, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_post_recv {
    pub response: __u64,
    pub qp_handle: __u32,
    pub wr_count: __u32,
    pub sge_count: __u32,
    pub wqe_size: __u32,
    pub recv_wr: __IncompleteArrayField<ib_uverbs_recv_wr>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_post_recv"][::std::mem::size_of::<ib_uverbs_post_recv>() - 24usize];
    ["Alignment of ib_uverbs_post_recv"][::std::mem::align_of::<ib_uverbs_post_recv>() - 8usize];
    ["Offset of field: ib_uverbs_post_recv::response"]
        [::std::mem::offset_of!(ib_uverbs_post_recv, response) - 0usize];
    ["Offset of field: ib_uverbs_post_recv::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_post_recv, qp_handle) - 8usize];
    ["Offset of field: ib_uverbs_post_recv::wr_count"]
        [::std::mem::offset_of!(ib_uverbs_post_recv, wr_count) - 12usize];
    ["Offset of field: ib_uverbs_post_recv::sge_count"]
        [::std::mem::offset_of!(ib_uverbs_post_recv, sge_count) - 16usize];
    ["Offset of field: ib_uverbs_post_recv::wqe_size"]
        [::std::mem::offset_of!(ib_uverbs_post_recv, wqe_size) - 20usize];
    ["Offset of field: ib_uverbs_post_recv::recv_wr"]
        [::std::mem::offset_of!(ib_uverbs_post_recv, recv_wr) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_post_recv_resp {
    pub bad_wr: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_post_recv_resp"]
        [::std::mem::size_of::<ib_uverbs_post_recv_resp>() - 4usize];
    ["Alignment of ib_uverbs_post_recv_resp"]
        [::std::mem::align_of::<ib_uverbs_post_recv_resp>() - 4usize];
    ["Offset of field: ib_uverbs_post_recv_resp::bad_wr"]
        [::std::mem::offset_of!(ib_uverbs_post_recv_resp, bad_wr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_post_srq_recv {
    pub response: __u64,
    pub srq_handle: __u32,
    pub wr_count: __u32,
    pub sge_count: __u32,
    pub wqe_size: __u32,
    pub recv: __IncompleteArrayField<ib_uverbs_recv_wr>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_post_srq_recv"][::std::mem::size_of::<ib_uverbs_post_srq_recv>() - 24usize];
    ["Alignment of ib_uverbs_post_srq_recv"]
        [::std::mem::align_of::<ib_uverbs_post_srq_recv>() - 8usize];
    ["Offset of field: ib_uverbs_post_srq_recv::response"]
        [::std::mem::offset_of!(ib_uverbs_post_srq_recv, response) - 0usize];
    ["Offset of field: ib_uverbs_post_srq_recv::srq_handle"]
        [::std::mem::offset_of!(ib_uverbs_post_srq_recv, srq_handle) - 8usize];
    ["Offset of field: ib_uverbs_post_srq_recv::wr_count"]
        [::std::mem::offset_of!(ib_uverbs_post_srq_recv, wr_count) - 12usize];
    ["Offset of field: ib_uverbs_post_srq_recv::sge_count"]
        [::std::mem::offset_of!(ib_uverbs_post_srq_recv, sge_count) - 16usize];
    ["Offset of field: ib_uverbs_post_srq_recv::wqe_size"]
        [::std::mem::offset_of!(ib_uverbs_post_srq_recv, wqe_size) - 20usize];
    ["Offset of field: ib_uverbs_post_srq_recv::recv"]
        [::std::mem::offset_of!(ib_uverbs_post_srq_recv, recv) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_post_srq_recv_resp {
    pub bad_wr: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_post_srq_recv_resp"]
        [::std::mem::size_of::<ib_uverbs_post_srq_recv_resp>() - 4usize];
    ["Alignment of ib_uverbs_post_srq_recv_resp"]
        [::std::mem::align_of::<ib_uverbs_post_srq_recv_resp>() - 4usize];
    ["Offset of field: ib_uverbs_post_srq_recv_resp::bad_wr"]
        [::std::mem::offset_of!(ib_uverbs_post_srq_recv_resp, bad_wr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_ah {
    pub response: __u64,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub reserved: __u32,
    pub attr: ib_uverbs_ah_attr,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_ah"][::std::mem::size_of::<ib_uverbs_create_ah>() - 56usize];
    ["Alignment of ib_uverbs_create_ah"][::std::mem::align_of::<ib_uverbs_create_ah>() - 8usize];
    ["Offset of field: ib_uverbs_create_ah::response"]
        [::std::mem::offset_of!(ib_uverbs_create_ah, response) - 0usize];
    ["Offset of field: ib_uverbs_create_ah::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_ah, user_handle) - 8usize];
    ["Offset of field: ib_uverbs_create_ah::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_ah, pd_handle) - 16usize];
    ["Offset of field: ib_uverbs_create_ah::reserved"]
        [::std::mem::offset_of!(ib_uverbs_create_ah, reserved) - 20usize];
    ["Offset of field: ib_uverbs_create_ah::attr"]
        [::std::mem::offset_of!(ib_uverbs_create_ah, attr) - 24usize];
    ["Offset of field: ib_uverbs_create_ah::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_ah, driver_data) - 56usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_ah_resp {
    pub ah_handle: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_ah_resp"]
        [::std::mem::size_of::<ib_uverbs_create_ah_resp>() - 4usize];
    ["Alignment of ib_uverbs_create_ah_resp"]
        [::std::mem::align_of::<ib_uverbs_create_ah_resp>() - 4usize];
    ["Offset of field: ib_uverbs_create_ah_resp::ah_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_ah_resp, ah_handle) - 0usize];
    ["Offset of field: ib_uverbs_create_ah_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_ah_resp, driver_data) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_ah {
    pub ah_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_destroy_ah"][::std::mem::size_of::<ib_uverbs_destroy_ah>() - 4usize];
    ["Alignment of ib_uverbs_destroy_ah"][::std::mem::align_of::<ib_uverbs_destroy_ah>() - 4usize];
    ["Offset of field: ib_uverbs_destroy_ah::ah_handle"]
        [::std::mem::offset_of!(ib_uverbs_destroy_ah, ah_handle) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_attach_mcast {
    pub gid: [__u8; 16usize],
    pub qp_handle: __u32,
    pub mlid: __u16,
    pub reserved: __u16,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_attach_mcast"][::std::mem::size_of::<ib_uverbs_attach_mcast>() - 24usize];
    ["Alignment of ib_uverbs_attach_mcast"]
        [::std::mem::align_of::<ib_uverbs_attach_mcast>() - 8usize];
    ["Offset of field: ib_uverbs_attach_mcast::gid"]
        [::std::mem::offset_of!(ib_uverbs_attach_mcast, gid) - 0usize];
    ["Offset of field: ib_uverbs_attach_mcast::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_attach_mcast, qp_handle) - 16usize];
    ["Offset of field: ib_uverbs_attach_mcast::mlid"]
        [::std::mem::offset_of!(ib_uverbs_attach_mcast, mlid) - 20usize];
    ["Offset of field: ib_uverbs_attach_mcast::reserved"]
        [::std::mem::offset_of!(ib_uverbs_attach_mcast, reserved) - 22usize];
    ["Offset of field: ib_uverbs_attach_mcast::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_attach_mcast, driver_data) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_detach_mcast {
    pub gid: [__u8; 16usize],
    pub qp_handle: __u32,
    pub mlid: __u16,
    pub reserved: __u16,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_detach_mcast"][::std::mem::size_of::<ib_uverbs_detach_mcast>() - 24usize];
    ["Alignment of ib_uverbs_detach_mcast"]
        [::std::mem::align_of::<ib_uverbs_detach_mcast>() - 8usize];
    ["Offset of field: ib_uverbs_detach_mcast::gid"]
        [::std::mem::offset_of!(ib_uverbs_detach_mcast, gid) - 0usize];
    ["Offset of field: ib_uverbs_detach_mcast::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_detach_mcast, qp_handle) - 16usize];
    ["Offset of field: ib_uverbs_detach_mcast::mlid"]
        [::std::mem::offset_of!(ib_uverbs_detach_mcast, mlid) - 20usize];
    ["Offset of field: ib_uverbs_detach_mcast::reserved"]
        [::std::mem::offset_of!(ib_uverbs_detach_mcast, reserved) - 22usize];
    ["Offset of field: ib_uverbs_detach_mcast::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_detach_mcast, driver_data) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_flow_spec_hdr {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
    pub flow_spec_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_hdr"][::std::mem::size_of::<ib_uverbs_flow_spec_hdr>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_hdr"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_hdr>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_hdr::type_"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_hdr, type_) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_hdr::size"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_hdr, size) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_hdr::reserved"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_hdr, reserved) - 6usize];
    ["Offset of field: ib_uverbs_flow_spec_hdr::flow_spec_data"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_hdr, flow_spec_data) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_eth_filter {
    pub dst_mac: [__u8; 6usize],
    pub src_mac: [__u8; 6usize],
    pub ether_type: __be16,
    pub vlan_tag: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_eth_filter"]
        [::std::mem::size_of::<ib_uverbs_flow_eth_filter>() - 16usize];
    ["Alignment of ib_uverbs_flow_eth_filter"]
        [::std::mem::align_of::<ib_uverbs_flow_eth_filter>() - 2usize];
    ["Offset of field: ib_uverbs_flow_eth_filter::dst_mac"]
        [::std::mem::offset_of!(ib_uverbs_flow_eth_filter, dst_mac) - 0usize];
    ["Offset of field: ib_uverbs_flow_eth_filter::src_mac"]
        [::std::mem::offset_of!(ib_uverbs_flow_eth_filter, src_mac) - 6usize];
    ["Offset of field: ib_uverbs_flow_eth_filter::ether_type"]
        [::std::mem::offset_of!(ib_uverbs_flow_eth_filter, ether_type) - 12usize];
    ["Offset of field: ib_uverbs_flow_eth_filter::vlan_tag"]
        [::std::mem::offset_of!(ib_uverbs_flow_eth_filter, vlan_tag) - 14usize];
};
#[repr(C)]
pub struct ib_uverbs_flow_spec_eth {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_eth__bindgen_ty_1,
    pub val: ib_uverbs_flow_eth_filter,
    pub mask: ib_uverbs_flow_eth_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_eth__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1,
        type_
    ) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_eth__bindgen_ty_1__bindgen_ty_1,
        reserved
    ) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_eth__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_eth__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_eth__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_eth__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_eth__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_eth__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_eth__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_eth"][::std::mem::size_of::<ib_uverbs_flow_spec_eth>() - 40usize];
    ["Alignment of ib_uverbs_flow_spec_eth"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_eth>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_eth::val"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_eth, val) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_eth::mask"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_eth, mask) - 24usize];
};
impl Default for ib_uverbs_flow_spec_eth {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_ipv4_filter {
    pub src_ip: __be32,
    pub dst_ip: __be32,
    pub proto: __u8,
    pub tos: __u8,
    pub ttl: __u8,
    pub flags: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_ipv4_filter"]
        [::std::mem::size_of::<ib_uverbs_flow_ipv4_filter>() - 12usize];
    ["Alignment of ib_uverbs_flow_ipv4_filter"]
        [::std::mem::align_of::<ib_uverbs_flow_ipv4_filter>() - 4usize];
    ["Offset of field: ib_uverbs_flow_ipv4_filter::src_ip"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv4_filter, src_ip) - 0usize];
    ["Offset of field: ib_uverbs_flow_ipv4_filter::dst_ip"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv4_filter, dst_ip) - 4usize];
    ["Offset of field: ib_uverbs_flow_ipv4_filter::proto"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv4_filter, proto) - 8usize];
    ["Offset of field: ib_uverbs_flow_ipv4_filter::tos"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv4_filter, tos) - 9usize];
    ["Offset of field: ib_uverbs_flow_ipv4_filter::ttl"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv4_filter, ttl) - 10usize];
    ["Offset of field: ib_uverbs_flow_ipv4_filter::flags"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv4_filter, flags) - 11usize];
};
#[repr(C)]
pub struct ib_uverbs_flow_spec_ipv4 {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_ipv4__bindgen_ty_1,
    pub val: ib_uverbs_flow_ipv4_filter,
    pub mask: ib_uverbs_flow_ipv4_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_ipv4__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1,
        type_
    ) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_ipv4__bindgen_ty_1__bindgen_ty_1,
        reserved
    ) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_ipv4__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_ipv4__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_ipv4__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_ipv4__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv4__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_ipv4__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_ipv4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_ipv4"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_ipv4>() - 32usize];
    ["Alignment of ib_uverbs_flow_spec_ipv4"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_ipv4>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv4::val"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_ipv4, val) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv4::mask"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_ipv4, mask) - 20usize];
};
impl Default for ib_uverbs_flow_spec_ipv4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_tcp_udp_filter {
    pub dst_port: __be16,
    pub src_port: __be16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_tcp_udp_filter"]
        [::std::mem::size_of::<ib_uverbs_flow_tcp_udp_filter>() - 4usize];
    ["Alignment of ib_uverbs_flow_tcp_udp_filter"]
        [::std::mem::align_of::<ib_uverbs_flow_tcp_udp_filter>() - 2usize];
    ["Offset of field: ib_uverbs_flow_tcp_udp_filter::dst_port"]
        [::std::mem::offset_of!(ib_uverbs_flow_tcp_udp_filter, dst_port) - 0usize];
    ["Offset of field: ib_uverbs_flow_tcp_udp_filter::src_port"]
        [::std::mem::offset_of!(ib_uverbs_flow_tcp_udp_filter, src_port) - 2usize];
};
#[repr(C)]
pub struct ib_uverbs_flow_spec_tcp_udp {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1,
    pub val: ib_uverbs_flow_tcp_udp_filter,
    pub mask: ib_uverbs_flow_tcp_udp_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1,
        type_
    ) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1__bindgen_ty_1,
        reserved
    )
        - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_tcp_udp__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_tcp_udp"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_tcp_udp>() - 16usize];
    ["Alignment of ib_uverbs_flow_spec_tcp_udp"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_tcp_udp>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_tcp_udp::val"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_tcp_udp, val) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_tcp_udp::mask"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_tcp_udp, mask) - 12usize];
};
impl Default for ib_uverbs_flow_spec_tcp_udp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_ipv6_filter {
    pub src_ip: [__u8; 16usize],
    pub dst_ip: [__u8; 16usize],
    pub flow_label: __be32,
    pub next_hdr: __u8,
    pub traffic_class: __u8,
    pub hop_limit: __u8,
    pub reserved: __u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_ipv6_filter"]
        [::std::mem::size_of::<ib_uverbs_flow_ipv6_filter>() - 40usize];
    ["Alignment of ib_uverbs_flow_ipv6_filter"]
        [::std::mem::align_of::<ib_uverbs_flow_ipv6_filter>() - 4usize];
    ["Offset of field: ib_uverbs_flow_ipv6_filter::src_ip"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv6_filter, src_ip) - 0usize];
    ["Offset of field: ib_uverbs_flow_ipv6_filter::dst_ip"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv6_filter, dst_ip) - 16usize];
    ["Offset of field: ib_uverbs_flow_ipv6_filter::flow_label"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv6_filter, flow_label) - 32usize];
    ["Offset of field: ib_uverbs_flow_ipv6_filter::next_hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv6_filter, next_hdr) - 36usize];
    ["Offset of field: ib_uverbs_flow_ipv6_filter::traffic_class"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv6_filter, traffic_class) - 37usize];
    ["Offset of field: ib_uverbs_flow_ipv6_filter::hop_limit"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv6_filter, hop_limit) - 38usize];
    ["Offset of field: ib_uverbs_flow_ipv6_filter::reserved"]
        [::std::mem::offset_of!(ib_uverbs_flow_ipv6_filter, reserved) - 39usize];
};
#[repr(C)]
pub struct ib_uverbs_flow_spec_ipv6 {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_ipv6__bindgen_ty_1,
    pub val: ib_uverbs_flow_ipv6_filter,
    pub mask: ib_uverbs_flow_ipv6_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_ipv6__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1,
        type_
    ) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_ipv6__bindgen_ty_1__bindgen_ty_1,
        reserved
    ) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_ipv6__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_ipv6__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_ipv6__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_ipv6__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv6__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_ipv6__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_ipv6__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_ipv6"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_ipv6>() - 88usize];
    ["Alignment of ib_uverbs_flow_spec_ipv6"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_ipv6>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv6::val"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_ipv6, val) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_ipv6::mask"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_ipv6, mask) - 48usize];
};
impl Default for ib_uverbs_flow_spec_ipv6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_tag {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_action_tag__bindgen_ty_1,
    pub tag_id: __u32,
    pub reserved1: __u32,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_tag__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1"][::std::mem::align_of::<
        ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1,
    >() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1,
        type_
    )
        - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1,
        size
    )
        - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_tag__bindgen_ty_1__bindgen_ty_1,
        reserved
    )
        - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_tag__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_action_tag__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_tag__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_tag__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_tag__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_tag__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_action_tag__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_tag"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_action_tag>() - 16usize];
    ["Alignment of ib_uverbs_flow_spec_action_tag"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_tag>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_tag::tag_id"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_tag, tag_id) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_tag::reserved1"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_tag, reserved1) - 12usize];
};
impl Default for ib_uverbs_flow_spec_action_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_drop {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_action_drop__bindgen_ty_1,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_drop__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1,
        type_
    )
        - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1,
        size
    )
        - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_drop__bindgen_ty_1__bindgen_ty_1,
        reserved
    )
        - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_drop__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_action_drop__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_drop__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_drop__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_drop__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_drop__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_action_drop__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_drop"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_action_drop>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_drop"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_drop>() - 8usize];
};
impl Default for ib_uverbs_flow_spec_action_drop {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_handle {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_action_handle__bindgen_ty_1,
    pub handle: __u32,
    pub reserved1: __u32,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_handle__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1,
        type_
    )
        - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1,
        size
    )
        - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_handle__bindgen_ty_1__bindgen_ty_1,
        reserved
    )
        - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_handle__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_action_handle__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_handle__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_handle__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_handle__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_handle__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_action_handle__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_handle"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_action_handle>() - 16usize];
    ["Alignment of ib_uverbs_flow_spec_action_handle"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_handle>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_handle::handle"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_handle, handle) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_handle::reserved1"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_handle, reserved1) - 12usize];
};
impl Default for ib_uverbs_flow_spec_action_handle {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_count {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_action_count__bindgen_ty_1,
    pub handle: __u32,
    pub reserved1: __u32,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_action_count__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1"][::std::mem::size_of::<
        ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1,
    >() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1>()
            - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1,
        type_
    )
        - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1,
        size
    )
        - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_action_count__bindgen_ty_1__bindgen_ty_1,
        reserved
    )
        - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_count__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_action_count__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_action_count__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_count__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_count__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_count__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_action_count__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_action_count"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_action_count>() - 16usize];
    ["Alignment of ib_uverbs_flow_spec_action_count"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_action_count>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_count::handle"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_count, handle) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_action_count::reserved1"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_action_count, reserved1) - 12usize];
};
impl Default for ib_uverbs_flow_spec_action_count {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_tunnel_filter {
    pub tunnel_id: __be32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_tunnel_filter"]
        [::std::mem::size_of::<ib_uverbs_flow_tunnel_filter>() - 4usize];
    ["Alignment of ib_uverbs_flow_tunnel_filter"]
        [::std::mem::align_of::<ib_uverbs_flow_tunnel_filter>() - 4usize];
    ["Offset of field: ib_uverbs_flow_tunnel_filter::tunnel_id"]
        [::std::mem::offset_of!(ib_uverbs_flow_tunnel_filter, tunnel_id) - 0usize];
};
#[repr(C)]
pub struct ib_uverbs_flow_spec_tunnel {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_tunnel__bindgen_ty_1,
    pub val: ib_uverbs_flow_tunnel_filter,
    pub mask: ib_uverbs_flow_tunnel_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_tunnel__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1:
        __BindgenUnionField<ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1,
        type_
    ) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_tunnel__bindgen_ty_1__bindgen_ty_1,
        reserved
    )
        - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_tunnel__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_tunnel__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_tunnel__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_tunnel__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_tunnel__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_tunnel__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_tunnel__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_tunnel"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_tunnel>() - 16usize];
    ["Alignment of ib_uverbs_flow_spec_tunnel"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_tunnel>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_tunnel::val"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_tunnel, val) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_tunnel::mask"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_tunnel, mask) - 12usize];
};
impl Default for ib_uverbs_flow_spec_tunnel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_esp_filter {
    pub spi: __u32,
    pub seq: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_esp_filter"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_esp_filter>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_esp_filter"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_esp_filter>() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_esp_filter::spi"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_esp_filter, spi) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_esp_filter::seq"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_esp_filter, seq) - 4usize];
};
#[repr(C)]
pub struct ib_uverbs_flow_spec_esp {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_esp__bindgen_ty_1,
    pub val: ib_uverbs_flow_spec_esp_filter,
    pub mask: ib_uverbs_flow_spec_esp_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_esp__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1,
        type_
    ) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_esp__bindgen_ty_1__bindgen_ty_1,
        reserved
    ) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_esp__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_esp__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_esp__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_esp__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_esp__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_esp__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_esp__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_esp"][::std::mem::size_of::<ib_uverbs_flow_spec_esp>() - 24usize];
    ["Alignment of ib_uverbs_flow_spec_esp"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_esp>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_esp::val"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_esp, val) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_esp::mask"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_esp, mask) - 16usize];
};
impl Default for ib_uverbs_flow_spec_esp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_gre_filter {
    pub c_ks_res0_ver: __be16,
    pub protocol: __be16,
    pub key: __be32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_gre_filter"]
        [::std::mem::size_of::<ib_uverbs_flow_gre_filter>() - 8usize];
    ["Alignment of ib_uverbs_flow_gre_filter"]
        [::std::mem::align_of::<ib_uverbs_flow_gre_filter>() - 4usize];
    ["Offset of field: ib_uverbs_flow_gre_filter::c_ks_res0_ver"]
        [::std::mem::offset_of!(ib_uverbs_flow_gre_filter, c_ks_res0_ver) - 0usize];
    ["Offset of field: ib_uverbs_flow_gre_filter::protocol"]
        [::std::mem::offset_of!(ib_uverbs_flow_gre_filter, protocol) - 2usize];
    ["Offset of field: ib_uverbs_flow_gre_filter::key"]
        [::std::mem::offset_of!(ib_uverbs_flow_gre_filter, key) - 4usize];
};
#[repr(C)]
pub struct ib_uverbs_flow_spec_gre {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_gre__bindgen_ty_1,
    pub val: ib_uverbs_flow_gre_filter,
    pub mask: ib_uverbs_flow_gre_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_gre__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1,
        type_
    ) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_gre__bindgen_ty_1__bindgen_ty_1,
        reserved
    ) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_gre__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_gre__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_gre__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_gre__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_gre__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_gre__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_gre__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_gre"][::std::mem::size_of::<ib_uverbs_flow_spec_gre>() - 24usize];
    ["Alignment of ib_uverbs_flow_spec_gre"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_gre>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_gre::val"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_gre, val) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_gre::mask"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_gre, mask) - 16usize];
};
impl Default for ib_uverbs_flow_spec_gre {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_mpls_filter {
    pub label: __be32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_mpls_filter"]
        [::std::mem::size_of::<ib_uverbs_flow_mpls_filter>() - 4usize];
    ["Alignment of ib_uverbs_flow_mpls_filter"]
        [::std::mem::align_of::<ib_uverbs_flow_mpls_filter>() - 4usize];
    ["Offset of field: ib_uverbs_flow_mpls_filter::label"]
        [::std::mem::offset_of!(ib_uverbs_flow_mpls_filter, label) - 0usize];
};
#[repr(C)]
pub struct ib_uverbs_flow_spec_mpls {
    pub __bindgen_anon_1: ib_uverbs_flow_spec_mpls__bindgen_ty_1,
    pub val: ib_uverbs_flow_mpls_filter,
    pub mask: ib_uverbs_flow_mpls_filter,
}
#[repr(C)]
pub struct ib_uverbs_flow_spec_mpls__bindgen_ty_1 {
    pub hdr: __BindgenUnionField<ib_uverbs_flow_spec_hdr>,
    pub __bindgen_anon_1: __BindgenUnionField<ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1>,
    pub bindgen_union_field: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1 {
    pub type_: __u32,
    pub size: __u16,
    pub reserved: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1::type_"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1,
        type_
    ) - 0usize];
    ["Offset of field: ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1::size"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1,
        size
    ) - 4usize];
    ["Offset of field: ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1::reserved"][::std::mem::offset_of!(
        ib_uverbs_flow_spec_mpls__bindgen_ty_1__bindgen_ty_1,
        reserved
    ) - 6usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_mpls__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_mpls__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_spec_mpls__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_mpls__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_mpls__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_mpls__bindgen_ty_1, hdr) - 0usize];
};
impl Default for ib_uverbs_flow_spec_mpls__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_spec_mpls"]
        [::std::mem::size_of::<ib_uverbs_flow_spec_mpls>() - 16usize];
    ["Alignment of ib_uverbs_flow_spec_mpls"]
        [::std::mem::align_of::<ib_uverbs_flow_spec_mpls>() - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_mpls::val"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_mpls, val) - 8usize];
    ["Offset of field: ib_uverbs_flow_spec_mpls::mask"]
        [::std::mem::offset_of!(ib_uverbs_flow_spec_mpls, mask) - 12usize];
};
impl Default for ib_uverbs_flow_spec_mpls {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_flow_attr {
    pub type_: __u32,
    pub size: __u16,
    pub priority: __u16,
    pub num_of_specs: __u8,
    pub reserved: [__u8; 2usize],
    pub port: __u8,
    pub flags: __u32,
    pub flow_specs: __IncompleteArrayField<ib_uverbs_flow_spec_hdr>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_attr"][::std::mem::size_of::<ib_uverbs_flow_attr>() - 16usize];
    ["Alignment of ib_uverbs_flow_attr"][::std::mem::align_of::<ib_uverbs_flow_attr>() - 8usize];
    ["Offset of field: ib_uverbs_flow_attr::type_"]
        [::std::mem::offset_of!(ib_uverbs_flow_attr, type_) - 0usize];
    ["Offset of field: ib_uverbs_flow_attr::size"]
        [::std::mem::offset_of!(ib_uverbs_flow_attr, size) - 4usize];
    ["Offset of field: ib_uverbs_flow_attr::priority"]
        [::std::mem::offset_of!(ib_uverbs_flow_attr, priority) - 6usize];
    ["Offset of field: ib_uverbs_flow_attr::num_of_specs"]
        [::std::mem::offset_of!(ib_uverbs_flow_attr, num_of_specs) - 8usize];
    ["Offset of field: ib_uverbs_flow_attr::reserved"]
        [::std::mem::offset_of!(ib_uverbs_flow_attr, reserved) - 9usize];
    ["Offset of field: ib_uverbs_flow_attr::port"]
        [::std::mem::offset_of!(ib_uverbs_flow_attr, port) - 11usize];
    ["Offset of field: ib_uverbs_flow_attr::flags"]
        [::std::mem::offset_of!(ib_uverbs_flow_attr, flags) - 12usize];
    ["Offset of field: ib_uverbs_flow_attr::flow_specs"]
        [::std::mem::offset_of!(ib_uverbs_flow_attr, flow_specs) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_flow {
    pub comp_mask: __u32,
    pub qp_handle: __u32,
    pub flow_attr: ib_uverbs_flow_attr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_flow"][::std::mem::size_of::<ib_uverbs_create_flow>() - 24usize];
    ["Alignment of ib_uverbs_create_flow"]
        [::std::mem::align_of::<ib_uverbs_create_flow>() - 8usize];
    ["Offset of field: ib_uverbs_create_flow::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_create_flow, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_create_flow::qp_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_flow, qp_handle) - 4usize];
    ["Offset of field: ib_uverbs_create_flow::flow_attr"]
        [::std::mem::offset_of!(ib_uverbs_create_flow, flow_attr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_create_flow_resp {
    pub comp_mask: __u32,
    pub flow_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_flow_resp"]
        [::std::mem::size_of::<ib_uverbs_create_flow_resp>() - 8usize];
    ["Alignment of ib_uverbs_create_flow_resp"]
        [::std::mem::align_of::<ib_uverbs_create_flow_resp>() - 4usize];
    ["Offset of field: ib_uverbs_create_flow_resp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_create_flow_resp, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_create_flow_resp::flow_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_flow_resp, flow_handle) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_flow {
    pub comp_mask: __u32,
    pub flow_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_destroy_flow"][::std::mem::size_of::<ib_uverbs_destroy_flow>() - 8usize];
    ["Alignment of ib_uverbs_destroy_flow"]
        [::std::mem::align_of::<ib_uverbs_destroy_flow>() - 4usize];
    ["Offset of field: ib_uverbs_destroy_flow::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_destroy_flow, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_destroy_flow::flow_handle"]
        [::std::mem::offset_of!(ib_uverbs_destroy_flow, flow_handle) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_srq {
    pub response: __u64,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub srq_limit: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_srq"][::std::mem::size_of::<ib_uverbs_create_srq>() - 32usize];
    ["Alignment of ib_uverbs_create_srq"][::std::mem::align_of::<ib_uverbs_create_srq>() - 8usize];
    ["Offset of field: ib_uverbs_create_srq::response"]
        [::std::mem::offset_of!(ib_uverbs_create_srq, response) - 0usize];
    ["Offset of field: ib_uverbs_create_srq::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_srq, user_handle) - 8usize];
    ["Offset of field: ib_uverbs_create_srq::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_srq, pd_handle) - 16usize];
    ["Offset of field: ib_uverbs_create_srq::max_wr"]
        [::std::mem::offset_of!(ib_uverbs_create_srq, max_wr) - 20usize];
    ["Offset of field: ib_uverbs_create_srq::max_sge"]
        [::std::mem::offset_of!(ib_uverbs_create_srq, max_sge) - 24usize];
    ["Offset of field: ib_uverbs_create_srq::srq_limit"]
        [::std::mem::offset_of!(ib_uverbs_create_srq, srq_limit) - 28usize];
    ["Offset of field: ib_uverbs_create_srq::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_srq, driver_data) - 32usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_xsrq {
    pub response: __u64,
    pub user_handle: __u64,
    pub srq_type: __u32,
    pub pd_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub srq_limit: __u32,
    pub max_num_tags: __u32,
    pub xrcd_handle: __u32,
    pub cq_handle: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_xsrq"][::std::mem::size_of::<ib_uverbs_create_xsrq>() - 48usize];
    ["Alignment of ib_uverbs_create_xsrq"]
        [::std::mem::align_of::<ib_uverbs_create_xsrq>() - 8usize];
    ["Offset of field: ib_uverbs_create_xsrq::response"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, response) - 0usize];
    ["Offset of field: ib_uverbs_create_xsrq::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, user_handle) - 8usize];
    ["Offset of field: ib_uverbs_create_xsrq::srq_type"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, srq_type) - 16usize];
    ["Offset of field: ib_uverbs_create_xsrq::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, pd_handle) - 20usize];
    ["Offset of field: ib_uverbs_create_xsrq::max_wr"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, max_wr) - 24usize];
    ["Offset of field: ib_uverbs_create_xsrq::max_sge"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, max_sge) - 28usize];
    ["Offset of field: ib_uverbs_create_xsrq::srq_limit"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, srq_limit) - 32usize];
    ["Offset of field: ib_uverbs_create_xsrq::max_num_tags"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, max_num_tags) - 36usize];
    ["Offset of field: ib_uverbs_create_xsrq::xrcd_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, xrcd_handle) - 40usize];
    ["Offset of field: ib_uverbs_create_xsrq::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, cq_handle) - 44usize];
    ["Offset of field: ib_uverbs_create_xsrq::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_xsrq, driver_data) - 48usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_create_srq_resp {
    pub srq_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub srqn: __u32,
    pub driver_data: __IncompleteArrayField<__u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_create_srq_resp"]
        [::std::mem::size_of::<ib_uverbs_create_srq_resp>() - 16usize];
    ["Alignment of ib_uverbs_create_srq_resp"]
        [::std::mem::align_of::<ib_uverbs_create_srq_resp>() - 4usize];
    ["Offset of field: ib_uverbs_create_srq_resp::srq_handle"]
        [::std::mem::offset_of!(ib_uverbs_create_srq_resp, srq_handle) - 0usize];
    ["Offset of field: ib_uverbs_create_srq_resp::max_wr"]
        [::std::mem::offset_of!(ib_uverbs_create_srq_resp, max_wr) - 4usize];
    ["Offset of field: ib_uverbs_create_srq_resp::max_sge"]
        [::std::mem::offset_of!(ib_uverbs_create_srq_resp, max_sge) - 8usize];
    ["Offset of field: ib_uverbs_create_srq_resp::srqn"]
        [::std::mem::offset_of!(ib_uverbs_create_srq_resp, srqn) - 12usize];
    ["Offset of field: ib_uverbs_create_srq_resp::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_create_srq_resp, driver_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_modify_srq {
    pub srq_handle: __u32,
    pub attr_mask: __u32,
    pub max_wr: __u32,
    pub srq_limit: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_modify_srq"][::std::mem::size_of::<ib_uverbs_modify_srq>() - 16usize];
    ["Alignment of ib_uverbs_modify_srq"][::std::mem::align_of::<ib_uverbs_modify_srq>() - 8usize];
    ["Offset of field: ib_uverbs_modify_srq::srq_handle"]
        [::std::mem::offset_of!(ib_uverbs_modify_srq, srq_handle) - 0usize];
    ["Offset of field: ib_uverbs_modify_srq::attr_mask"]
        [::std::mem::offset_of!(ib_uverbs_modify_srq, attr_mask) - 4usize];
    ["Offset of field: ib_uverbs_modify_srq::max_wr"]
        [::std::mem::offset_of!(ib_uverbs_modify_srq, max_wr) - 8usize];
    ["Offset of field: ib_uverbs_modify_srq::srq_limit"]
        [::std::mem::offset_of!(ib_uverbs_modify_srq, srq_limit) - 12usize];
    ["Offset of field: ib_uverbs_modify_srq::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_modify_srq, driver_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_query_srq {
    pub response: __u64,
    pub srq_handle: __u32,
    pub reserved: __u32,
    pub driver_data: __IncompleteArrayField<__u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_srq"][::std::mem::size_of::<ib_uverbs_query_srq>() - 16usize];
    ["Alignment of ib_uverbs_query_srq"][::std::mem::align_of::<ib_uverbs_query_srq>() - 8usize];
    ["Offset of field: ib_uverbs_query_srq::response"]
        [::std::mem::offset_of!(ib_uverbs_query_srq, response) - 0usize];
    ["Offset of field: ib_uverbs_query_srq::srq_handle"]
        [::std::mem::offset_of!(ib_uverbs_query_srq, srq_handle) - 8usize];
    ["Offset of field: ib_uverbs_query_srq::reserved"]
        [::std::mem::offset_of!(ib_uverbs_query_srq, reserved) - 12usize];
    ["Offset of field: ib_uverbs_query_srq::driver_data"]
        [::std::mem::offset_of!(ib_uverbs_query_srq, driver_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_query_srq_resp {
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub srq_limit: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_srq_resp"]
        [::std::mem::size_of::<ib_uverbs_query_srq_resp>() - 16usize];
    ["Alignment of ib_uverbs_query_srq_resp"]
        [::std::mem::align_of::<ib_uverbs_query_srq_resp>() - 4usize];
    ["Offset of field: ib_uverbs_query_srq_resp::max_wr"]
        [::std::mem::offset_of!(ib_uverbs_query_srq_resp, max_wr) - 0usize];
    ["Offset of field: ib_uverbs_query_srq_resp::max_sge"]
        [::std::mem::offset_of!(ib_uverbs_query_srq_resp, max_sge) - 4usize];
    ["Offset of field: ib_uverbs_query_srq_resp::srq_limit"]
        [::std::mem::offset_of!(ib_uverbs_query_srq_resp, srq_limit) - 8usize];
    ["Offset of field: ib_uverbs_query_srq_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_query_srq_resp, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_srq {
    pub response: __u64,
    pub srq_handle: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_destroy_srq"][::std::mem::size_of::<ib_uverbs_destroy_srq>() - 16usize];
    ["Alignment of ib_uverbs_destroy_srq"]
        [::std::mem::align_of::<ib_uverbs_destroy_srq>() - 8usize];
    ["Offset of field: ib_uverbs_destroy_srq::response"]
        [::std::mem::offset_of!(ib_uverbs_destroy_srq, response) - 0usize];
    ["Offset of field: ib_uverbs_destroy_srq::srq_handle"]
        [::std::mem::offset_of!(ib_uverbs_destroy_srq, srq_handle) - 8usize];
    ["Offset of field: ib_uverbs_destroy_srq::reserved"]
        [::std::mem::offset_of!(ib_uverbs_destroy_srq, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_destroy_srq_resp {
    pub events_reported: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_destroy_srq_resp"]
        [::std::mem::size_of::<ib_uverbs_destroy_srq_resp>() - 4usize];
    ["Alignment of ib_uverbs_destroy_srq_resp"]
        [::std::mem::align_of::<ib_uverbs_destroy_srq_resp>() - 4usize];
    ["Offset of field: ib_uverbs_destroy_srq_resp::events_reported"]
        [::std::mem::offset_of!(ib_uverbs_destroy_srq_resp, events_reported) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_wq {
    pub comp_mask: __u32,
    pub wq_type: __u32,
    pub user_handle: __u64,
    pub pd_handle: __u32,
    pub cq_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub create_flags: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_create_wq"][::std::mem::size_of::<ib_uverbs_ex_create_wq>() - 40usize];
    ["Alignment of ib_uverbs_ex_create_wq"]
        [::std::mem::align_of::<ib_uverbs_ex_create_wq>() - 8usize];
    ["Offset of field: ib_uverbs_ex_create_wq::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_create_wq::wq_type"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, wq_type) - 4usize];
    ["Offset of field: ib_uverbs_ex_create_wq::user_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, user_handle) - 8usize];
    ["Offset of field: ib_uverbs_ex_create_wq::pd_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, pd_handle) - 16usize];
    ["Offset of field: ib_uverbs_ex_create_wq::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, cq_handle) - 20usize];
    ["Offset of field: ib_uverbs_ex_create_wq::max_wr"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, max_wr) - 24usize];
    ["Offset of field: ib_uverbs_ex_create_wq::max_sge"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, max_sge) - 28usize];
    ["Offset of field: ib_uverbs_ex_create_wq::create_flags"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, create_flags) - 32usize];
    ["Offset of field: ib_uverbs_ex_create_wq::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq, reserved) - 36usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_wq_resp {
    pub comp_mask: __u32,
    pub response_length: __u32,
    pub wq_handle: __u32,
    pub max_wr: __u32,
    pub max_sge: __u32,
    pub wqn: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_create_wq_resp"]
        [::std::mem::size_of::<ib_uverbs_ex_create_wq_resp>() - 24usize];
    ["Alignment of ib_uverbs_ex_create_wq_resp"]
        [::std::mem::align_of::<ib_uverbs_ex_create_wq_resp>() - 4usize];
    ["Offset of field: ib_uverbs_ex_create_wq_resp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq_resp, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_create_wq_resp::response_length"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq_resp, response_length) - 4usize];
    ["Offset of field: ib_uverbs_ex_create_wq_resp::wq_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq_resp, wq_handle) - 8usize];
    ["Offset of field: ib_uverbs_ex_create_wq_resp::max_wr"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq_resp, max_wr) - 12usize];
    ["Offset of field: ib_uverbs_ex_create_wq_resp::max_sge"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq_resp, max_sge) - 16usize];
    ["Offset of field: ib_uverbs_ex_create_wq_resp::wqn"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_wq_resp, wqn) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_destroy_wq {
    pub comp_mask: __u32,
    pub wq_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_destroy_wq"][::std::mem::size_of::<ib_uverbs_ex_destroy_wq>() - 8usize];
    ["Alignment of ib_uverbs_ex_destroy_wq"]
        [::std::mem::align_of::<ib_uverbs_ex_destroy_wq>() - 4usize];
    ["Offset of field: ib_uverbs_ex_destroy_wq::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_destroy_wq, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_destroy_wq::wq_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_destroy_wq, wq_handle) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_destroy_wq_resp {
    pub comp_mask: __u32,
    pub response_length: __u32,
    pub events_reported: __u32,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_destroy_wq_resp"]
        [::std::mem::size_of::<ib_uverbs_ex_destroy_wq_resp>() - 16usize];
    ["Alignment of ib_uverbs_ex_destroy_wq_resp"]
        [::std::mem::align_of::<ib_uverbs_ex_destroy_wq_resp>() - 4usize];
    ["Offset of field: ib_uverbs_ex_destroy_wq_resp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_destroy_wq_resp, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_destroy_wq_resp::response_length"]
        [::std::mem::offset_of!(ib_uverbs_ex_destroy_wq_resp, response_length) - 4usize];
    ["Offset of field: ib_uverbs_ex_destroy_wq_resp::events_reported"]
        [::std::mem::offset_of!(ib_uverbs_ex_destroy_wq_resp, events_reported) - 8usize];
    ["Offset of field: ib_uverbs_ex_destroy_wq_resp::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_destroy_wq_resp, reserved) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_modify_wq {
    pub attr_mask: __u32,
    pub wq_handle: __u32,
    pub wq_state: __u32,
    pub curr_wq_state: __u32,
    pub flags: __u32,
    pub flags_mask: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_modify_wq"][::std::mem::size_of::<ib_uverbs_ex_modify_wq>() - 24usize];
    ["Alignment of ib_uverbs_ex_modify_wq"]
        [::std::mem::align_of::<ib_uverbs_ex_modify_wq>() - 4usize];
    ["Offset of field: ib_uverbs_ex_modify_wq::attr_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_wq, attr_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_modify_wq::wq_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_wq, wq_handle) - 4usize];
    ["Offset of field: ib_uverbs_ex_modify_wq::wq_state"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_wq, wq_state) - 8usize];
    ["Offset of field: ib_uverbs_ex_modify_wq::curr_wq_state"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_wq, curr_wq_state) - 12usize];
    ["Offset of field: ib_uverbs_ex_modify_wq::flags"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_wq, flags) - 16usize];
    ["Offset of field: ib_uverbs_ex_modify_wq::flags_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_wq, flags_mask) - 20usize];
};
#[repr(C)]
#[derive(Debug, Default)]
pub struct ib_uverbs_ex_create_rwq_ind_table {
    pub comp_mask: __u32,
    pub log_ind_tbl_size: __u32,
    pub wq_handles: __IncompleteArrayField<__u32>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_create_rwq_ind_table"]
        [::std::mem::size_of::<ib_uverbs_ex_create_rwq_ind_table>() - 8usize];
    ["Alignment of ib_uverbs_ex_create_rwq_ind_table"]
        [::std::mem::align_of::<ib_uverbs_ex_create_rwq_ind_table>() - 4usize];
    ["Offset of field: ib_uverbs_ex_create_rwq_ind_table::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_rwq_ind_table, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_create_rwq_ind_table::log_ind_tbl_size"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_rwq_ind_table, log_ind_tbl_size) - 4usize];
    ["Offset of field: ib_uverbs_ex_create_rwq_ind_table::wq_handles"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_rwq_ind_table, wq_handles) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_create_rwq_ind_table_resp {
    pub comp_mask: __u32,
    pub response_length: __u32,
    pub ind_tbl_handle: __u32,
    pub ind_tbl_num: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_create_rwq_ind_table_resp"]
        [::std::mem::size_of::<ib_uverbs_ex_create_rwq_ind_table_resp>() - 16usize];
    ["Alignment of ib_uverbs_ex_create_rwq_ind_table_resp"]
        [::std::mem::align_of::<ib_uverbs_ex_create_rwq_ind_table_resp>() - 4usize];
    ["Offset of field: ib_uverbs_ex_create_rwq_ind_table_resp::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_rwq_ind_table_resp, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_create_rwq_ind_table_resp::response_length"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_rwq_ind_table_resp, response_length) - 4usize];
    ["Offset of field: ib_uverbs_ex_create_rwq_ind_table_resp::ind_tbl_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_rwq_ind_table_resp, ind_tbl_handle) - 8usize];
    ["Offset of field: ib_uverbs_ex_create_rwq_ind_table_resp::ind_tbl_num"]
        [::std::mem::offset_of!(ib_uverbs_ex_create_rwq_ind_table_resp, ind_tbl_num) - 12usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_destroy_rwq_ind_table {
    pub comp_mask: __u32,
    pub ind_tbl_handle: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_destroy_rwq_ind_table"]
        [::std::mem::size_of::<ib_uverbs_ex_destroy_rwq_ind_table>() - 8usize];
    ["Alignment of ib_uverbs_ex_destroy_rwq_ind_table"]
        [::std::mem::align_of::<ib_uverbs_ex_destroy_rwq_ind_table>() - 4usize];
    ["Offset of field: ib_uverbs_ex_destroy_rwq_ind_table::comp_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_destroy_rwq_ind_table, comp_mask) - 0usize];
    ["Offset of field: ib_uverbs_ex_destroy_rwq_ind_table::ind_tbl_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_destroy_rwq_ind_table, ind_tbl_handle) - 4usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_cq_moderation {
    pub cq_count: __u16,
    pub cq_period: __u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_cq_moderation"][::std::mem::size_of::<ib_uverbs_cq_moderation>() - 4usize];
    ["Alignment of ib_uverbs_cq_moderation"]
        [::std::mem::align_of::<ib_uverbs_cq_moderation>() - 2usize];
    ["Offset of field: ib_uverbs_cq_moderation::cq_count"]
        [::std::mem::offset_of!(ib_uverbs_cq_moderation, cq_count) - 0usize];
    ["Offset of field: ib_uverbs_cq_moderation::cq_period"]
        [::std::mem::offset_of!(ib_uverbs_cq_moderation, cq_period) - 2usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_ex_modify_cq {
    pub cq_handle: __u32,
    pub attr_mask: __u32,
    pub attr: ib_uverbs_cq_moderation,
    pub reserved: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_ex_modify_cq"][::std::mem::size_of::<ib_uverbs_ex_modify_cq>() - 16usize];
    ["Alignment of ib_uverbs_ex_modify_cq"]
        [::std::mem::align_of::<ib_uverbs_ex_modify_cq>() - 4usize];
    ["Offset of field: ib_uverbs_ex_modify_cq::cq_handle"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_cq, cq_handle) - 0usize];
    ["Offset of field: ib_uverbs_ex_modify_cq::attr_mask"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_cq, attr_mask) - 4usize];
    ["Offset of field: ib_uverbs_ex_modify_cq::attr"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_cq, attr) - 8usize];
    ["Offset of field: ib_uverbs_ex_modify_cq::reserved"]
        [::std::mem::offset_of!(ib_uverbs_ex_modify_cq, reserved) - 12usize];
};
pub const IB_UVERBS_DEVICE_RESIZE_MAX_WR: ib_uverbs_device_cap_flags = 1;
pub const IB_UVERBS_DEVICE_BAD_PKEY_CNTR: ib_uverbs_device_cap_flags = 2;
pub const IB_UVERBS_DEVICE_BAD_QKEY_CNTR: ib_uverbs_device_cap_flags = 4;
pub const IB_UVERBS_DEVICE_RAW_MULTI: ib_uverbs_device_cap_flags = 8;
pub const IB_UVERBS_DEVICE_AUTO_PATH_MIG: ib_uverbs_device_cap_flags = 16;
pub const IB_UVERBS_DEVICE_CHANGE_PHY_PORT: ib_uverbs_device_cap_flags = 32;
pub const IB_UVERBS_DEVICE_UD_AV_PORT_ENFORCE: ib_uverbs_device_cap_flags = 64;
pub const IB_UVERBS_DEVICE_CURR_QP_STATE_MOD: ib_uverbs_device_cap_flags = 128;
pub const IB_UVERBS_DEVICE_SHUTDOWN_PORT: ib_uverbs_device_cap_flags = 256;
pub const IB_UVERBS_DEVICE_PORT_ACTIVE_EVENT: ib_uverbs_device_cap_flags = 1024;
pub const IB_UVERBS_DEVICE_SYS_IMAGE_GUID: ib_uverbs_device_cap_flags = 2048;
pub const IB_UVERBS_DEVICE_RC_RNR_NAK_GEN: ib_uverbs_device_cap_flags = 4096;
pub const IB_UVERBS_DEVICE_SRQ_RESIZE: ib_uverbs_device_cap_flags = 8192;
pub const IB_UVERBS_DEVICE_N_NOTIFY_CQ: ib_uverbs_device_cap_flags = 16384;
pub const IB_UVERBS_DEVICE_MEM_WINDOW: ib_uverbs_device_cap_flags = 131072;
pub const IB_UVERBS_DEVICE_UD_IP_CSUM: ib_uverbs_device_cap_flags = 262144;
pub const IB_UVERBS_DEVICE_XRC: ib_uverbs_device_cap_flags = 1048576;
pub const IB_UVERBS_DEVICE_MEM_MGT_EXTENSIONS: ib_uverbs_device_cap_flags = 2097152;
pub const IB_UVERBS_DEVICE_MEM_WINDOW_TYPE_2A: ib_uverbs_device_cap_flags = 8388608;
pub const IB_UVERBS_DEVICE_MEM_WINDOW_TYPE_2B: ib_uverbs_device_cap_flags = 16777216;
pub const IB_UVERBS_DEVICE_RC_IP_CSUM: ib_uverbs_device_cap_flags = 33554432;
pub const IB_UVERBS_DEVICE_RAW_IP_CSUM: ib_uverbs_device_cap_flags = 67108864;
pub const IB_UVERBS_DEVICE_MANAGED_FLOW_STEERING: ib_uverbs_device_cap_flags = 536870912;
pub const IB_UVERBS_DEVICE_RAW_SCATTER_FCS: ib_uverbs_device_cap_flags = 17179869184;
pub const IB_UVERBS_DEVICE_PCI_WRITE_END_PADDING: ib_uverbs_device_cap_flags = 68719476736;
pub const IB_UVERBS_DEVICE_FLUSH_GLOBAL: ib_uverbs_device_cap_flags = 274877906944;
pub const IB_UVERBS_DEVICE_FLUSH_PERSISTENT: ib_uverbs_device_cap_flags = 549755813888;
pub const IB_UVERBS_DEVICE_ATOMIC_WRITE: ib_uverbs_device_cap_flags = 1099511627776;
pub type ib_uverbs_device_cap_flags = ::std::os::raw::c_ulong;
pub const IB_UVERBS_RAW_PACKET_CAP_CVLAN_STRIPPING: ib_uverbs_raw_packet_caps = 1;
pub const IB_UVERBS_RAW_PACKET_CAP_SCATTER_FCS: ib_uverbs_raw_packet_caps = 2;
pub const IB_UVERBS_RAW_PACKET_CAP_IP_CSUM: ib_uverbs_raw_packet_caps = 4;
pub const IB_UVERBS_RAW_PACKET_CAP_DELAY_DROP: ib_uverbs_raw_packet_caps = 8;
pub type ib_uverbs_raw_packet_caps = ::std::os::raw::c_uint;
pub const IB_UVERBS_CORE_SUPPORT_OPTIONAL_MR_ACCESS: ib_uverbs_core_support = 1;
pub type ib_uverbs_core_support = ::std::os::raw::c_uint;
pub const IB_UVERBS_ACCESS_LOCAL_WRITE: ib_uverbs_access_flags = 1;
pub const IB_UVERBS_ACCESS_REMOTE_WRITE: ib_uverbs_access_flags = 2;
pub const IB_UVERBS_ACCESS_REMOTE_READ: ib_uverbs_access_flags = 4;
pub const IB_UVERBS_ACCESS_REMOTE_ATOMIC: ib_uverbs_access_flags = 8;
pub const IB_UVERBS_ACCESS_MW_BIND: ib_uverbs_access_flags = 16;
pub const IB_UVERBS_ACCESS_ZERO_BASED: ib_uverbs_access_flags = 32;
pub const IB_UVERBS_ACCESS_ON_DEMAND: ib_uverbs_access_flags = 64;
pub const IB_UVERBS_ACCESS_HUGETLB: ib_uverbs_access_flags = 128;
pub const IB_UVERBS_ACCESS_FLUSH_GLOBAL: ib_uverbs_access_flags = 256;
pub const IB_UVERBS_ACCESS_FLUSH_PERSISTENT: ib_uverbs_access_flags = 512;
pub const IB_UVERBS_ACCESS_RELAXED_ORDERING: ib_uverbs_access_flags = 1048576;
pub const IB_UVERBS_ACCESS_OPTIONAL_RANGE: ib_uverbs_access_flags = 1072693248;
pub type ib_uverbs_access_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_SRQT_BASIC: ib_uverbs_srq_type = 0;
pub const IB_UVERBS_SRQT_XRC: ib_uverbs_srq_type = 1;
pub const IB_UVERBS_SRQT_TM: ib_uverbs_srq_type = 2;
pub type ib_uverbs_srq_type = ::std::os::raw::c_uint;
pub const IB_UVERBS_WQT_RQ: ib_uverbs_wq_type = 0;
pub type ib_uverbs_wq_type = ::std::os::raw::c_uint;
pub const IB_UVERBS_WQ_FLAGS_CVLAN_STRIPPING: ib_uverbs_wq_flags = 1;
pub const IB_UVERBS_WQ_FLAGS_SCATTER_FCS: ib_uverbs_wq_flags = 2;
pub const IB_UVERBS_WQ_FLAGS_DELAY_DROP: ib_uverbs_wq_flags = 4;
pub const IB_UVERBS_WQ_FLAGS_PCI_WRITE_END_PADDING: ib_uverbs_wq_flags = 8;
pub type ib_uverbs_wq_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_QPT_RC: ib_uverbs_qp_type = 2;
pub const IB_UVERBS_QPT_UC: ib_uverbs_qp_type = 3;
pub const IB_UVERBS_QPT_UD: ib_uverbs_qp_type = 4;
pub const IB_UVERBS_QPT_RAW_PACKET: ib_uverbs_qp_type = 8;
pub const IB_UVERBS_QPT_XRC_INI: ib_uverbs_qp_type = 9;
pub const IB_UVERBS_QPT_XRC_TGT: ib_uverbs_qp_type = 10;
pub const IB_UVERBS_QPT_DRIVER: ib_uverbs_qp_type = 255;
pub type ib_uverbs_qp_type = ::std::os::raw::c_uint;
pub const IB_UVERBS_QP_CREATE_BLOCK_MULTICAST_LOOPBACK: ib_uverbs_qp_create_flags = 2;
pub const IB_UVERBS_QP_CREATE_SCATTER_FCS: ib_uverbs_qp_create_flags = 256;
pub const IB_UVERBS_QP_CREATE_CVLAN_STRIPPING: ib_uverbs_qp_create_flags = 512;
pub const IB_UVERBS_QP_CREATE_PCI_WRITE_END_PADDING: ib_uverbs_qp_create_flags = 2048;
pub const IB_UVERBS_QP_CREATE_SQ_SIG_ALL: ib_uverbs_qp_create_flags = 4096;
pub type ib_uverbs_qp_create_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_PCF_SM: ib_uverbs_query_port_cap_flags = 2;
pub const IB_UVERBS_PCF_NOTICE_SUP: ib_uverbs_query_port_cap_flags = 4;
pub const IB_UVERBS_PCF_TRAP_SUP: ib_uverbs_query_port_cap_flags = 8;
pub const IB_UVERBS_PCF_OPT_IPD_SUP: ib_uverbs_query_port_cap_flags = 16;
pub const IB_UVERBS_PCF_AUTO_MIGR_SUP: ib_uverbs_query_port_cap_flags = 32;
pub const IB_UVERBS_PCF_SL_MAP_SUP: ib_uverbs_query_port_cap_flags = 64;
pub const IB_UVERBS_PCF_MKEY_NVRAM: ib_uverbs_query_port_cap_flags = 128;
pub const IB_UVERBS_PCF_PKEY_NVRAM: ib_uverbs_query_port_cap_flags = 256;
pub const IB_UVERBS_PCF_LED_INFO_SUP: ib_uverbs_query_port_cap_flags = 512;
pub const IB_UVERBS_PCF_SM_DISABLED: ib_uverbs_query_port_cap_flags = 1024;
pub const IB_UVERBS_PCF_SYS_IMAGE_GUID_SUP: ib_uverbs_query_port_cap_flags = 2048;
pub const IB_UVERBS_PCF_PKEY_SW_EXT_PORT_TRAP_SUP: ib_uverbs_query_port_cap_flags = 4096;
pub const IB_UVERBS_PCF_EXTENDED_SPEEDS_SUP: ib_uverbs_query_port_cap_flags = 16384;
pub const IB_UVERBS_PCF_CM_SUP: ib_uverbs_query_port_cap_flags = 65536;
pub const IB_UVERBS_PCF_SNMP_TUNNEL_SUP: ib_uverbs_query_port_cap_flags = 131072;
pub const IB_UVERBS_PCF_REINIT_SUP: ib_uverbs_query_port_cap_flags = 262144;
pub const IB_UVERBS_PCF_DEVICE_MGMT_SUP: ib_uverbs_query_port_cap_flags = 524288;
pub const IB_UVERBS_PCF_VENDOR_CLASS_SUP: ib_uverbs_query_port_cap_flags = 1048576;
pub const IB_UVERBS_PCF_DR_NOTICE_SUP: ib_uverbs_query_port_cap_flags = 2097152;
pub const IB_UVERBS_PCF_CAP_MASK_NOTICE_SUP: ib_uverbs_query_port_cap_flags = 4194304;
pub const IB_UVERBS_PCF_BOOT_MGMT_SUP: ib_uverbs_query_port_cap_flags = 8388608;
pub const IB_UVERBS_PCF_LINK_LATENCY_SUP: ib_uverbs_query_port_cap_flags = 16777216;
pub const IB_UVERBS_PCF_CLIENT_REG_SUP: ib_uverbs_query_port_cap_flags = 33554432;
pub const IB_UVERBS_PCF_LINK_SPEED_WIDTH_TABLE_SUP: ib_uverbs_query_port_cap_flags = 134217728;
pub const IB_UVERBS_PCF_VENDOR_SPECIFIC_MADS_TABLE_SUP: ib_uverbs_query_port_cap_flags = 268435456;
pub const IB_UVERBS_PCF_MCAST_PKEY_TRAP_SUPPRESSION_SUP: ib_uverbs_query_port_cap_flags = 536870912;
pub const IB_UVERBS_PCF_MCAST_FDB_TOP_SUP: ib_uverbs_query_port_cap_flags = 1073741824;
pub const IB_UVERBS_PCF_HIERARCHY_INFO_SUP: ib_uverbs_query_port_cap_flags = 2147483648;
pub const IB_UVERBS_PCF_IP_BASED_GIDS: ib_uverbs_query_port_cap_flags = 67108864;
pub type ib_uverbs_query_port_cap_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_QPF_GRH_REQUIRED: ib_uverbs_query_port_flags = 1;
pub type ib_uverbs_query_port_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_FLOW_ACTION_ESP_KEYMAT_AES_GCM: ib_uverbs_flow_action_esp_keymat = 0;
pub type ib_uverbs_flow_action_esp_keymat = ::std::os::raw::c_uint;
pub const IB_UVERBS_FLOW_ACTION_IV_ALGO_SEQ: ib_uverbs_flow_action_esp_keymat_aes_gcm_iv_algo = 0;
pub type ib_uverbs_flow_action_esp_keymat_aes_gcm_iv_algo = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_action_esp_keymat_aes_gcm {
    pub iv: __u64,
    pub iv_algo: __u32,
    pub salt: __u32,
    pub icv_len: __u32,
    pub key_len: __u32,
    pub aes_key: [__u32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_action_esp_keymat_aes_gcm"]
        [::std::mem::size_of::<ib_uverbs_flow_action_esp_keymat_aes_gcm>() - 56usize];
    ["Alignment of ib_uverbs_flow_action_esp_keymat_aes_gcm"]
        [::std::mem::align_of::<ib_uverbs_flow_action_esp_keymat_aes_gcm>() - 8usize];
    ["Offset of field: ib_uverbs_flow_action_esp_keymat_aes_gcm::iv"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_keymat_aes_gcm, iv) - 0usize];
    ["Offset of field: ib_uverbs_flow_action_esp_keymat_aes_gcm::iv_algo"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_keymat_aes_gcm, iv_algo) - 8usize];
    ["Offset of field: ib_uverbs_flow_action_esp_keymat_aes_gcm::salt"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_keymat_aes_gcm, salt) - 12usize];
    ["Offset of field: ib_uverbs_flow_action_esp_keymat_aes_gcm::icv_len"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_keymat_aes_gcm, icv_len) - 16usize];
    ["Offset of field: ib_uverbs_flow_action_esp_keymat_aes_gcm::key_len"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_keymat_aes_gcm, key_len) - 20usize];
    ["Offset of field: ib_uverbs_flow_action_esp_keymat_aes_gcm::aes_key"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_keymat_aes_gcm, aes_key) - 24usize];
};
pub const IB_UVERBS_FLOW_ACTION_ESP_REPLAY_NONE: ib_uverbs_flow_action_esp_replay = 0;
pub const IB_UVERBS_FLOW_ACTION_ESP_REPLAY_BMP: ib_uverbs_flow_action_esp_replay = 1;
pub type ib_uverbs_flow_action_esp_replay = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_action_esp_replay_bmp {
    pub size: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_action_esp_replay_bmp"]
        [::std::mem::size_of::<ib_uverbs_flow_action_esp_replay_bmp>() - 4usize];
    ["Alignment of ib_uverbs_flow_action_esp_replay_bmp"]
        [::std::mem::align_of::<ib_uverbs_flow_action_esp_replay_bmp>() - 4usize];
    ["Offset of field: ib_uverbs_flow_action_esp_replay_bmp::size"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_replay_bmp, size) - 0usize];
};
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_INLINE_CRYPTO: ib_uverbs_flow_action_esp_flags = 0;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_FULL_OFFLOAD: ib_uverbs_flow_action_esp_flags = 1;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_TUNNEL: ib_uverbs_flow_action_esp_flags = 0;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_TRANSPORT: ib_uverbs_flow_action_esp_flags = 2;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_DECRYPT: ib_uverbs_flow_action_esp_flags = 0;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_ENCRYPT: ib_uverbs_flow_action_esp_flags = 4;
pub const IB_UVERBS_FLOW_ACTION_ESP_FLAGS_ESN_NEW_WINDOW: ib_uverbs_flow_action_esp_flags = 8;
pub type ib_uverbs_flow_action_esp_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ib_uverbs_flow_action_esp_encap {
    pub __bindgen_anon_1: ib_uverbs_flow_action_esp_encap__bindgen_ty_1,
    pub __bindgen_anon_2: ib_uverbs_flow_action_esp_encap__bindgen_ty_2,
    pub len: __u16,
    pub type_: __u16,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_flow_action_esp_encap__bindgen_ty_1 {
    pub val_ptr: *mut ::std::os::raw::c_void,
    pub val_ptr_data_u64: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_action_esp_encap__bindgen_ty_1"]
        [::std::mem::size_of::<ib_uverbs_flow_action_esp_encap__bindgen_ty_1>() - 8usize];
    ["Alignment of ib_uverbs_flow_action_esp_encap__bindgen_ty_1"]
        [::std::mem::align_of::<ib_uverbs_flow_action_esp_encap__bindgen_ty_1>() - 8usize];
    ["Offset of field: ib_uverbs_flow_action_esp_encap__bindgen_ty_1::val_ptr"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_encap__bindgen_ty_1, val_ptr) - 0usize];
    ["Offset of field: ib_uverbs_flow_action_esp_encap__bindgen_ty_1::val_ptr_data_u64"][::std::mem::offset_of!(
        ib_uverbs_flow_action_esp_encap__bindgen_ty_1,
        val_ptr_data_u64
    )
        - 0usize];
};
impl Default for ib_uverbs_flow_action_esp_encap__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ib_uverbs_flow_action_esp_encap__bindgen_ty_2 {
    pub next_ptr: *mut ib_uverbs_flow_action_esp_encap,
    pub next_ptr_data_u64: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_action_esp_encap__bindgen_ty_2"]
        [::std::mem::size_of::<ib_uverbs_flow_action_esp_encap__bindgen_ty_2>() - 8usize];
    ["Alignment of ib_uverbs_flow_action_esp_encap__bindgen_ty_2"]
        [::std::mem::align_of::<ib_uverbs_flow_action_esp_encap__bindgen_ty_2>() - 8usize];
    ["Offset of field: ib_uverbs_flow_action_esp_encap__bindgen_ty_2::next_ptr"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_encap__bindgen_ty_2, next_ptr) - 0usize];
    ["Offset of field: ib_uverbs_flow_action_esp_encap__bindgen_ty_2::next_ptr_data_u64"][::std::mem::offset_of!(
        ib_uverbs_flow_action_esp_encap__bindgen_ty_2,
        next_ptr_data_u64
    )
        - 0usize];
};
impl Default for ib_uverbs_flow_action_esp_encap__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_action_esp_encap"]
        [::std::mem::size_of::<ib_uverbs_flow_action_esp_encap>() - 24usize];
    ["Alignment of ib_uverbs_flow_action_esp_encap"]
        [::std::mem::align_of::<ib_uverbs_flow_action_esp_encap>() - 8usize];
    ["Offset of field: ib_uverbs_flow_action_esp_encap::len"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_encap, len) - 16usize];
    ["Offset of field: ib_uverbs_flow_action_esp_encap::type_"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp_encap, type_) - 18usize];
};
impl Default for ib_uverbs_flow_action_esp_encap {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_flow_action_esp {
    pub spi: __u32,
    pub seq: __u32,
    pub tfc_pad: __u32,
    pub flags: __u32,
    pub hard_limit_pkts: __u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_flow_action_esp"]
        [::std::mem::size_of::<ib_uverbs_flow_action_esp>() - 24usize];
    ["Alignment of ib_uverbs_flow_action_esp"]
        [::std::mem::align_of::<ib_uverbs_flow_action_esp>() - 8usize];
    ["Offset of field: ib_uverbs_flow_action_esp::spi"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp, spi) - 0usize];
    ["Offset of field: ib_uverbs_flow_action_esp::seq"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp, seq) - 4usize];
    ["Offset of field: ib_uverbs_flow_action_esp::tfc_pad"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp, tfc_pad) - 8usize];
    ["Offset of field: ib_uverbs_flow_action_esp::flags"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp, flags) - 12usize];
    ["Offset of field: ib_uverbs_flow_action_esp::hard_limit_pkts"]
        [::std::mem::offset_of!(ib_uverbs_flow_action_esp, hard_limit_pkts) - 16usize];
};
pub const IB_UVERBS_READ_COUNTERS_PREFER_CACHED: ib_uverbs_read_counters_flags = 1;
pub type ib_uverbs_read_counters_flags = ::std::os::raw::c_uint;
pub const IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH: ib_uverbs_advise_mr_advice = 0;
pub const IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_WRITE: ib_uverbs_advise_mr_advice = 1;
pub const IB_UVERBS_ADVISE_MR_ADVICE_PREFETCH_NO_FAULT: ib_uverbs_advise_mr_advice = 2;
pub type ib_uverbs_advise_mr_advice = ::std::os::raw::c_uint;
pub const IB_UVERBS_ADVISE_MR_FLAG_FLUSH: ib_uverbs_advise_mr_flag = 1;
pub type ib_uverbs_advise_mr_flag = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_query_port_resp_ex {
    pub legacy_resp: ib_uverbs_query_port_resp,
    pub port_cap_flags2: __u16,
    pub reserved: [__u8; 2usize],
    pub active_speed_ex: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_query_port_resp_ex"]
        [::std::mem::size_of::<ib_uverbs_query_port_resp_ex>() - 48usize];
    ["Alignment of ib_uverbs_query_port_resp_ex"]
        [::std::mem::align_of::<ib_uverbs_query_port_resp_ex>() - 4usize];
    ["Offset of field: ib_uverbs_query_port_resp_ex::legacy_resp"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp_ex, legacy_resp) - 0usize];
    ["Offset of field: ib_uverbs_query_port_resp_ex::port_cap_flags2"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp_ex, port_cap_flags2) - 40usize];
    ["Offset of field: ib_uverbs_query_port_resp_ex::reserved"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp_ex, reserved) - 42usize];
    ["Offset of field: ib_uverbs_query_port_resp_ex::active_speed_ex"]
        [::std::mem::offset_of!(ib_uverbs_query_port_resp_ex, active_speed_ex) - 44usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_qp_cap {
    pub max_send_wr: __u32,
    pub max_recv_wr: __u32,
    pub max_send_sge: __u32,
    pub max_recv_sge: __u32,
    pub max_inline_data: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_qp_cap"][::std::mem::size_of::<ib_uverbs_qp_cap>() - 20usize];
    ["Alignment of ib_uverbs_qp_cap"][::std::mem::align_of::<ib_uverbs_qp_cap>() - 4usize];
    ["Offset of field: ib_uverbs_qp_cap::max_send_wr"]
        [::std::mem::offset_of!(ib_uverbs_qp_cap, max_send_wr) - 0usize];
    ["Offset of field: ib_uverbs_qp_cap::max_recv_wr"]
        [::std::mem::offset_of!(ib_uverbs_qp_cap, max_recv_wr) - 4usize];
    ["Offset of field: ib_uverbs_qp_cap::max_send_sge"]
        [::std::mem::offset_of!(ib_uverbs_qp_cap, max_send_sge) - 8usize];
    ["Offset of field: ib_uverbs_qp_cap::max_recv_sge"]
        [::std::mem::offset_of!(ib_uverbs_qp_cap, max_recv_sge) - 12usize];
    ["Offset of field: ib_uverbs_qp_cap::max_inline_data"]
        [::std::mem::offset_of!(ib_uverbs_qp_cap, max_inline_data) - 16usize];
};
pub const RDMA_DRIVER_UNKNOWN: rdma_driver_id = 0;
pub const RDMA_DRIVER_MLX5: rdma_driver_id = 1;
pub const RDMA_DRIVER_MLX4: rdma_driver_id = 2;
pub const RDMA_DRIVER_CXGB3: rdma_driver_id = 3;
pub const RDMA_DRIVER_CXGB4: rdma_driver_id = 4;
pub const RDMA_DRIVER_MTHCA: rdma_driver_id = 5;
pub const RDMA_DRIVER_BNXT_RE: rdma_driver_id = 6;
pub const RDMA_DRIVER_OCRDMA: rdma_driver_id = 7;
pub const RDMA_DRIVER_NES: rdma_driver_id = 8;
pub const RDMA_DRIVER_I40IW: rdma_driver_id = 9;
pub const RDMA_DRIVER_IRDMA: rdma_driver_id = 9;
pub const RDMA_DRIVER_VMW_PVRDMA: rdma_driver_id = 10;
pub const RDMA_DRIVER_QEDR: rdma_driver_id = 11;
pub const RDMA_DRIVER_HNS: rdma_driver_id = 12;
pub const RDMA_DRIVER_USNIC: rdma_driver_id = 13;
pub const RDMA_DRIVER_RXE: rdma_driver_id = 14;
pub const RDMA_DRIVER_HFI1: rdma_driver_id = 15;
pub const RDMA_DRIVER_QIB: rdma_driver_id = 16;
pub const RDMA_DRIVER_EFA: rdma_driver_id = 17;
pub const RDMA_DRIVER_SIW: rdma_driver_id = 18;
pub const RDMA_DRIVER_ERDMA: rdma_driver_id = 19;
pub const RDMA_DRIVER_MANA: rdma_driver_id = 20;
pub type rdma_driver_id = ::std::os::raw::c_uint;
pub const IB_UVERBS_GID_TYPE_IB: ib_uverbs_gid_type = 0;
pub const IB_UVERBS_GID_TYPE_ROCE_V1: ib_uverbs_gid_type = 1;
pub const IB_UVERBS_GID_TYPE_ROCE_V2: ib_uverbs_gid_type = 2;
pub type ib_uverbs_gid_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ib_uverbs_gid_entry {
    pub gid: [__u64; 2usize],
    pub gid_index: __u32,
    pub port_num: __u32,
    pub gid_type: __u32,
    pub netdev_ifindex: __u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ib_uverbs_gid_entry"][::std::mem::size_of::<ib_uverbs_gid_entry>() - 32usize];
    ["Alignment of ib_uverbs_gid_entry"][::std::mem::align_of::<ib_uverbs_gid_entry>() - 8usize];
    ["Offset of field: ib_uverbs_gid_entry::gid"]
        [::std::mem::offset_of!(ib_uverbs_gid_entry, gid) - 0usize];
    ["Offset of field: ib_uverbs_gid_entry::gid_index"]
        [::std::mem::offset_of!(ib_uverbs_gid_entry, gid_index) - 16usize];
    ["Offset of field: ib_uverbs_gid_entry::port_num"]
        [::std::mem::offset_of!(ib_uverbs_gid_entry, port_num) - 20usize];
    ["Offset of field: ib_uverbs_gid_entry::gid_type"]
        [::std::mem::offset_of!(ib_uverbs_gid_entry, gid_type) - 24usize];
    ["Offset of field: ib_uverbs_gid_entry::netdev_ifindex"]
        [::std::mem::offset_of!(ib_uverbs_gid_entry, netdev_ifindex) - 28usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_gid {
    pub raw: [u8; 16usize],
    pub global: ibv_gid__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_gid__bindgen_ty_1 {
    pub subnet_prefix: __be64,
    pub interface_id: __be64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_gid__bindgen_ty_1"][::std::mem::size_of::<ibv_gid__bindgen_ty_1>() - 16usize];
    ["Alignment of ibv_gid__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_gid__bindgen_ty_1>() - 8usize];
    ["Offset of field: ibv_gid__bindgen_ty_1::subnet_prefix"]
        [::std::mem::offset_of!(ibv_gid__bindgen_ty_1, subnet_prefix) - 0usize];
    ["Offset of field: ibv_gid__bindgen_ty_1::interface_id"]
        [::std::mem::offset_of!(ibv_gid__bindgen_ty_1, interface_id) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_gid"][::std::mem::size_of::<ibv_gid>() - 16usize];
    ["Alignment of ibv_gid"][::std::mem::align_of::<ibv_gid>() - 8usize];
    ["Offset of field: ibv_gid::raw"][::std::mem::offset_of!(ibv_gid, raw) - 0usize];
    ["Offset of field: ibv_gid::global"][::std::mem::offset_of!(ibv_gid, global) - 0usize];
};
impl Default for ibv_gid {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_GID_TYPE_IB: ibv_gid_type = 0;
pub const IBV_GID_TYPE_ROCE_V1: ibv_gid_type = 1;
pub const IBV_GID_TYPE_ROCE_V2: ibv_gid_type = 2;
pub type ibv_gid_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_gid_entry {
    pub gid: ibv_gid,
    pub gid_index: u32,
    pub port_num: u32,
    pub gid_type: u32,
    pub ndev_ifindex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_gid_entry"][::std::mem::size_of::<ibv_gid_entry>() - 32usize];
    ["Alignment of ibv_gid_entry"][::std::mem::align_of::<ibv_gid_entry>() - 8usize];
    ["Offset of field: ibv_gid_entry::gid"][::std::mem::offset_of!(ibv_gid_entry, gid) - 0usize];
    ["Offset of field: ibv_gid_entry::gid_index"]
        [::std::mem::offset_of!(ibv_gid_entry, gid_index) - 16usize];
    ["Offset of field: ibv_gid_entry::port_num"]
        [::std::mem::offset_of!(ibv_gid_entry, port_num) - 20usize];
    ["Offset of field: ibv_gid_entry::gid_type"]
        [::std::mem::offset_of!(ibv_gid_entry, gid_type) - 24usize];
    ["Offset of field: ibv_gid_entry::ndev_ifindex"]
        [::std::mem::offset_of!(ibv_gid_entry, ndev_ifindex) - 28usize];
};
impl Default for ibv_gid_entry {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_NODE_UNKNOWN: ibv_node_type = -1;
pub const IBV_NODE_CA: ibv_node_type = 1;
pub const IBV_NODE_SWITCH: ibv_node_type = 2;
pub const IBV_NODE_ROUTER: ibv_node_type = 3;
pub const IBV_NODE_RNIC: ibv_node_type = 4;
pub const IBV_NODE_USNIC: ibv_node_type = 5;
pub const IBV_NODE_USNIC_UDP: ibv_node_type = 6;
pub const IBV_NODE_UNSPECIFIED: ibv_node_type = 7;
pub type ibv_node_type = ::std::os::raw::c_int;
pub const IBV_TRANSPORT_UNKNOWN: ibv_transport_type = -1;
pub const IBV_TRANSPORT_IB: ibv_transport_type = 0;
pub const IBV_TRANSPORT_IWARP: ibv_transport_type = 1;
pub const IBV_TRANSPORT_USNIC: ibv_transport_type = 2;
pub const IBV_TRANSPORT_USNIC_UDP: ibv_transport_type = 3;
pub const IBV_TRANSPORT_UNSPECIFIED: ibv_transport_type = 4;
pub type ibv_transport_type = ::std::os::raw::c_int;
pub const IBV_DEVICE_RESIZE_MAX_WR: ibv_device_cap_flags = 1;
pub const IBV_DEVICE_BAD_PKEY_CNTR: ibv_device_cap_flags = 2;
pub const IBV_DEVICE_BAD_QKEY_CNTR: ibv_device_cap_flags = 4;
pub const IBV_DEVICE_RAW_MULTI: ibv_device_cap_flags = 8;
pub const IBV_DEVICE_AUTO_PATH_MIG: ibv_device_cap_flags = 16;
pub const IBV_DEVICE_CHANGE_PHY_PORT: ibv_device_cap_flags = 32;
pub const IBV_DEVICE_UD_AV_PORT_ENFORCE: ibv_device_cap_flags = 64;
pub const IBV_DEVICE_CURR_QP_STATE_MOD: ibv_device_cap_flags = 128;
pub const IBV_DEVICE_SHUTDOWN_PORT: ibv_device_cap_flags = 256;
pub const IBV_DEVICE_INIT_TYPE: ibv_device_cap_flags = 512;
pub const IBV_DEVICE_PORT_ACTIVE_EVENT: ibv_device_cap_flags = 1024;
pub const IBV_DEVICE_SYS_IMAGE_GUID: ibv_device_cap_flags = 2048;
pub const IBV_DEVICE_RC_RNR_NAK_GEN: ibv_device_cap_flags = 4096;
pub const IBV_DEVICE_SRQ_RESIZE: ibv_device_cap_flags = 8192;
pub const IBV_DEVICE_N_NOTIFY_CQ: ibv_device_cap_flags = 16384;
pub const IBV_DEVICE_MEM_WINDOW: ibv_device_cap_flags = 131072;
pub const IBV_DEVICE_UD_IP_CSUM: ibv_device_cap_flags = 262144;
pub const IBV_DEVICE_XRC: ibv_device_cap_flags = 1048576;
pub const IBV_DEVICE_MEM_MGT_EXTENSIONS: ibv_device_cap_flags = 2097152;
pub const IBV_DEVICE_MEM_WINDOW_TYPE_2A: ibv_device_cap_flags = 8388608;
pub const IBV_DEVICE_MEM_WINDOW_TYPE_2B: ibv_device_cap_flags = 16777216;
pub const IBV_DEVICE_RC_IP_CSUM: ibv_device_cap_flags = 33554432;
pub const IBV_DEVICE_RAW_IP_CSUM: ibv_device_cap_flags = 67108864;
pub const IBV_DEVICE_MANAGED_FLOW_STEERING: ibv_device_cap_flags = 536870912;
pub type ibv_device_cap_flags = ::std::os::raw::c_uint;
pub const IBV_FORK_DISABLED: ibv_fork_status = 0;
pub const IBV_FORK_ENABLED: ibv_fork_status = 1;
pub const IBV_FORK_UNNEEDED: ibv_fork_status = 2;
pub type ibv_fork_status = ::std::os::raw::c_uint;
pub const IBV_ATOMIC_NONE: ibv_atomic_cap = 0;
pub const IBV_ATOMIC_HCA: ibv_atomic_cap = 1;
pub const IBV_ATOMIC_GLOB: ibv_atomic_cap = 2;
pub type ibv_atomic_cap = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_alloc_dm_attr {
    pub length: usize,
    pub log_align_req: u32,
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_alloc_dm_attr"][::std::mem::size_of::<ibv_alloc_dm_attr>() - 16usize];
    ["Alignment of ibv_alloc_dm_attr"][::std::mem::align_of::<ibv_alloc_dm_attr>() - 8usize];
    ["Offset of field: ibv_alloc_dm_attr::length"]
        [::std::mem::offset_of!(ibv_alloc_dm_attr, length) - 0usize];
    ["Offset of field: ibv_alloc_dm_attr::log_align_req"]
        [::std::mem::offset_of!(ibv_alloc_dm_attr, log_align_req) - 8usize];
    ["Offset of field: ibv_alloc_dm_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_alloc_dm_attr, comp_mask) - 12usize];
};
pub const IBV_DM_MASK_HANDLE: ibv_dm_mask = 1;
pub type ibv_dm_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_dm {
    pub context: *mut ibv_context,
    pub memcpy_to_dm: ::std::option::Option<
        unsafe extern "C" fn(
            dm: *mut ibv_dm,
            dm_offset: u64,
            host_addr: *const ::std::os::raw::c_void,
            length: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub memcpy_from_dm: ::std::option::Option<
        unsafe extern "C" fn(
            host_addr: *mut ::std::os::raw::c_void,
            dm: *mut ibv_dm,
            dm_offset: u64,
            length: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub comp_mask: u32,
    pub handle: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_dm"][::std::mem::size_of::<ibv_dm>() - 32usize];
    ["Alignment of ibv_dm"][::std::mem::align_of::<ibv_dm>() - 8usize];
    ["Offset of field: ibv_dm::context"][::std::mem::offset_of!(ibv_dm, context) - 0usize];
    ["Offset of field: ibv_dm::memcpy_to_dm"]
        [::std::mem::offset_of!(ibv_dm, memcpy_to_dm) - 8usize];
    ["Offset of field: ibv_dm::memcpy_from_dm"]
        [::std::mem::offset_of!(ibv_dm, memcpy_from_dm) - 16usize];
    ["Offset of field: ibv_dm::comp_mask"][::std::mem::offset_of!(ibv_dm, comp_mask) - 24usize];
    ["Offset of field: ibv_dm::handle"][::std::mem::offset_of!(ibv_dm, handle) - 28usize];
};
impl Default for ibv_dm {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_device_attr {
    pub fw_ver: [::std::os::raw::c_char; 64usize],
    pub node_guid: __be64,
    pub sys_image_guid: __be64,
    pub max_mr_size: u64,
    pub page_size_cap: u64,
    pub vendor_id: u32,
    pub vendor_part_id: u32,
    pub hw_ver: u32,
    pub max_qp: ::std::os::raw::c_int,
    pub max_qp_wr: ::std::os::raw::c_int,
    pub device_cap_flags: ::std::os::raw::c_uint,
    pub max_sge: ::std::os::raw::c_int,
    pub max_sge_rd: ::std::os::raw::c_int,
    pub max_cq: ::std::os::raw::c_int,
    pub max_cqe: ::std::os::raw::c_int,
    pub max_mr: ::std::os::raw::c_int,
    pub max_pd: ::std::os::raw::c_int,
    pub max_qp_rd_atom: ::std::os::raw::c_int,
    pub max_ee_rd_atom: ::std::os::raw::c_int,
    pub max_res_rd_atom: ::std::os::raw::c_int,
    pub max_qp_init_rd_atom: ::std::os::raw::c_int,
    pub max_ee_init_rd_atom: ::std::os::raw::c_int,
    pub atomic_cap: ibv_atomic_cap,
    pub max_ee: ::std::os::raw::c_int,
    pub max_rdd: ::std::os::raw::c_int,
    pub max_mw: ::std::os::raw::c_int,
    pub max_raw_ipv6_qp: ::std::os::raw::c_int,
    pub max_raw_ethy_qp: ::std::os::raw::c_int,
    pub max_mcast_grp: ::std::os::raw::c_int,
    pub max_mcast_qp_attach: ::std::os::raw::c_int,
    pub max_total_mcast_qp_attach: ::std::os::raw::c_int,
    pub max_ah: ::std::os::raw::c_int,
    pub max_fmr: ::std::os::raw::c_int,
    pub max_map_per_fmr: ::std::os::raw::c_int,
    pub max_srq: ::std::os::raw::c_int,
    pub max_srq_wr: ::std::os::raw::c_int,
    pub max_srq_sge: ::std::os::raw::c_int,
    pub max_pkeys: u16,
    pub local_ca_ack_delay: u8,
    pub phys_port_cnt: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_device_attr"][::std::mem::size_of::<ibv_device_attr>() - 232usize];
    ["Alignment of ibv_device_attr"][::std::mem::align_of::<ibv_device_attr>() - 8usize];
    ["Offset of field: ibv_device_attr::fw_ver"]
        [::std::mem::offset_of!(ibv_device_attr, fw_ver) - 0usize];
    ["Offset of field: ibv_device_attr::node_guid"]
        [::std::mem::offset_of!(ibv_device_attr, node_guid) - 64usize];
    ["Offset of field: ibv_device_attr::sys_image_guid"]
        [::std::mem::offset_of!(ibv_device_attr, sys_image_guid) - 72usize];
    ["Offset of field: ibv_device_attr::max_mr_size"]
        [::std::mem::offset_of!(ibv_device_attr, max_mr_size) - 80usize];
    ["Offset of field: ibv_device_attr::page_size_cap"]
        [::std::mem::offset_of!(ibv_device_attr, page_size_cap) - 88usize];
    ["Offset of field: ibv_device_attr::vendor_id"]
        [::std::mem::offset_of!(ibv_device_attr, vendor_id) - 96usize];
    ["Offset of field: ibv_device_attr::vendor_part_id"]
        [::std::mem::offset_of!(ibv_device_attr, vendor_part_id) - 100usize];
    ["Offset of field: ibv_device_attr::hw_ver"]
        [::std::mem::offset_of!(ibv_device_attr, hw_ver) - 104usize];
    ["Offset of field: ibv_device_attr::max_qp"]
        [::std::mem::offset_of!(ibv_device_attr, max_qp) - 108usize];
    ["Offset of field: ibv_device_attr::max_qp_wr"]
        [::std::mem::offset_of!(ibv_device_attr, max_qp_wr) - 112usize];
    ["Offset of field: ibv_device_attr::device_cap_flags"]
        [::std::mem::offset_of!(ibv_device_attr, device_cap_flags) - 116usize];
    ["Offset of field: ibv_device_attr::max_sge"]
        [::std::mem::offset_of!(ibv_device_attr, max_sge) - 120usize];
    ["Offset of field: ibv_device_attr::max_sge_rd"]
        [::std::mem::offset_of!(ibv_device_attr, max_sge_rd) - 124usize];
    ["Offset of field: ibv_device_attr::max_cq"]
        [::std::mem::offset_of!(ibv_device_attr, max_cq) - 128usize];
    ["Offset of field: ibv_device_attr::max_cqe"]
        [::std::mem::offset_of!(ibv_device_attr, max_cqe) - 132usize];
    ["Offset of field: ibv_device_attr::max_mr"]
        [::std::mem::offset_of!(ibv_device_attr, max_mr) - 136usize];
    ["Offset of field: ibv_device_attr::max_pd"]
        [::std::mem::offset_of!(ibv_device_attr, max_pd) - 140usize];
    ["Offset of field: ibv_device_attr::max_qp_rd_atom"]
        [::std::mem::offset_of!(ibv_device_attr, max_qp_rd_atom) - 144usize];
    ["Offset of field: ibv_device_attr::max_ee_rd_atom"]
        [::std::mem::offset_of!(ibv_device_attr, max_ee_rd_atom) - 148usize];
    ["Offset of field: ibv_device_attr::max_res_rd_atom"]
        [::std::mem::offset_of!(ibv_device_attr, max_res_rd_atom) - 152usize];
    ["Offset of field: ibv_device_attr::max_qp_init_rd_atom"]
        [::std::mem::offset_of!(ibv_device_attr, max_qp_init_rd_atom) - 156usize];
    ["Offset of field: ibv_device_attr::max_ee_init_rd_atom"]
        [::std::mem::offset_of!(ibv_device_attr, max_ee_init_rd_atom) - 160usize];
    ["Offset of field: ibv_device_attr::atomic_cap"]
        [::std::mem::offset_of!(ibv_device_attr, atomic_cap) - 164usize];
    ["Offset of field: ibv_device_attr::max_ee"]
        [::std::mem::offset_of!(ibv_device_attr, max_ee) - 168usize];
    ["Offset of field: ibv_device_attr::max_rdd"]
        [::std::mem::offset_of!(ibv_device_attr, max_rdd) - 172usize];
    ["Offset of field: ibv_device_attr::max_mw"]
        [::std::mem::offset_of!(ibv_device_attr, max_mw) - 176usize];
    ["Offset of field: ibv_device_attr::max_raw_ipv6_qp"]
        [::std::mem::offset_of!(ibv_device_attr, max_raw_ipv6_qp) - 180usize];
    ["Offset of field: ibv_device_attr::max_raw_ethy_qp"]
        [::std::mem::offset_of!(ibv_device_attr, max_raw_ethy_qp) - 184usize];
    ["Offset of field: ibv_device_attr::max_mcast_grp"]
        [::std::mem::offset_of!(ibv_device_attr, max_mcast_grp) - 188usize];
    ["Offset of field: ibv_device_attr::max_mcast_qp_attach"]
        [::std::mem::offset_of!(ibv_device_attr, max_mcast_qp_attach) - 192usize];
    ["Offset of field: ibv_device_attr::max_total_mcast_qp_attach"]
        [::std::mem::offset_of!(ibv_device_attr, max_total_mcast_qp_attach) - 196usize];
    ["Offset of field: ibv_device_attr::max_ah"]
        [::std::mem::offset_of!(ibv_device_attr, max_ah) - 200usize];
    ["Offset of field: ibv_device_attr::max_fmr"]
        [::std::mem::offset_of!(ibv_device_attr, max_fmr) - 204usize];
    ["Offset of field: ibv_device_attr::max_map_per_fmr"]
        [::std::mem::offset_of!(ibv_device_attr, max_map_per_fmr) - 208usize];
    ["Offset of field: ibv_device_attr::max_srq"]
        [::std::mem::offset_of!(ibv_device_attr, max_srq) - 212usize];
    ["Offset of field: ibv_device_attr::max_srq_wr"]
        [::std::mem::offset_of!(ibv_device_attr, max_srq_wr) - 216usize];
    ["Offset of field: ibv_device_attr::max_srq_sge"]
        [::std::mem::offset_of!(ibv_device_attr, max_srq_sge) - 220usize];
    ["Offset of field: ibv_device_attr::max_pkeys"]
        [::std::mem::offset_of!(ibv_device_attr, max_pkeys) - 224usize];
    ["Offset of field: ibv_device_attr::local_ca_ack_delay"]
        [::std::mem::offset_of!(ibv_device_attr, local_ca_ack_delay) - 226usize];
    ["Offset of field: ibv_device_attr::phys_port_cnt"]
        [::std::mem::offset_of!(ibv_device_attr, phys_port_cnt) - 227usize];
};
impl Default for ibv_device_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_query_device_ex_input {
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_query_device_ex_input"]
        [::std::mem::size_of::<ibv_query_device_ex_input>() - 4usize];
    ["Alignment of ibv_query_device_ex_input"]
        [::std::mem::align_of::<ibv_query_device_ex_input>() - 4usize];
    ["Offset of field: ibv_query_device_ex_input::comp_mask"]
        [::std::mem::offset_of!(ibv_query_device_ex_input, comp_mask) - 0usize];
};
pub const IBV_ODP_SUPPORT_SEND: ibv_odp_transport_cap_bits = 1;
pub const IBV_ODP_SUPPORT_RECV: ibv_odp_transport_cap_bits = 2;
pub const IBV_ODP_SUPPORT_WRITE: ibv_odp_transport_cap_bits = 4;
pub const IBV_ODP_SUPPORT_READ: ibv_odp_transport_cap_bits = 8;
pub const IBV_ODP_SUPPORT_ATOMIC: ibv_odp_transport_cap_bits = 16;
pub const IBV_ODP_SUPPORT_SRQ_RECV: ibv_odp_transport_cap_bits = 32;
pub type ibv_odp_transport_cap_bits = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_odp_caps {
    pub general_caps: u64,
    pub per_transport_caps: ibv_odp_caps__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_odp_caps__bindgen_ty_1 {
    pub rc_odp_caps: u32,
    pub uc_odp_caps: u32,
    pub ud_odp_caps: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_odp_caps__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_odp_caps__bindgen_ty_1>() - 12usize];
    ["Alignment of ibv_odp_caps__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_odp_caps__bindgen_ty_1>() - 4usize];
    ["Offset of field: ibv_odp_caps__bindgen_ty_1::rc_odp_caps"]
        [::std::mem::offset_of!(ibv_odp_caps__bindgen_ty_1, rc_odp_caps) - 0usize];
    ["Offset of field: ibv_odp_caps__bindgen_ty_1::uc_odp_caps"]
        [::std::mem::offset_of!(ibv_odp_caps__bindgen_ty_1, uc_odp_caps) - 4usize];
    ["Offset of field: ibv_odp_caps__bindgen_ty_1::ud_odp_caps"]
        [::std::mem::offset_of!(ibv_odp_caps__bindgen_ty_1, ud_odp_caps) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_odp_caps"][::std::mem::size_of::<ibv_odp_caps>() - 24usize];
    ["Alignment of ibv_odp_caps"][::std::mem::align_of::<ibv_odp_caps>() - 8usize];
    ["Offset of field: ibv_odp_caps::general_caps"]
        [::std::mem::offset_of!(ibv_odp_caps, general_caps) - 0usize];
    ["Offset of field: ibv_odp_caps::per_transport_caps"]
        [::std::mem::offset_of!(ibv_odp_caps, per_transport_caps) - 8usize];
};
pub const IBV_ODP_SUPPORT: ibv_odp_general_caps = 1;
pub const IBV_ODP_SUPPORT_IMPLICIT: ibv_odp_general_caps = 2;
pub type ibv_odp_general_caps = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_tso_caps {
    pub max_tso: u32,
    pub supported_qpts: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_tso_caps"][::std::mem::size_of::<ibv_tso_caps>() - 8usize];
    ["Alignment of ibv_tso_caps"][::std::mem::align_of::<ibv_tso_caps>() - 4usize];
    ["Offset of field: ibv_tso_caps::max_tso"]
        [::std::mem::offset_of!(ibv_tso_caps, max_tso) - 0usize];
    ["Offset of field: ibv_tso_caps::supported_qpts"]
        [::std::mem::offset_of!(ibv_tso_caps, supported_qpts) - 4usize];
};
pub const IBV_RX_HASH_FUNC_TOEPLITZ: ibv_rx_hash_function_flags = 1;
pub type ibv_rx_hash_function_flags = ::std::os::raw::c_uint;
pub const IBV_RX_HASH_SRC_IPV4: ibv_rx_hash_fields = 1;
pub const IBV_RX_HASH_DST_IPV4: ibv_rx_hash_fields = 2;
pub const IBV_RX_HASH_SRC_IPV6: ibv_rx_hash_fields = 4;
pub const IBV_RX_HASH_DST_IPV6: ibv_rx_hash_fields = 8;
pub const IBV_RX_HASH_SRC_PORT_TCP: ibv_rx_hash_fields = 16;
pub const IBV_RX_HASH_DST_PORT_TCP: ibv_rx_hash_fields = 32;
pub const IBV_RX_HASH_SRC_PORT_UDP: ibv_rx_hash_fields = 64;
pub const IBV_RX_HASH_DST_PORT_UDP: ibv_rx_hash_fields = 128;
pub const IBV_RX_HASH_IPSEC_SPI: ibv_rx_hash_fields = 256;
pub const IBV_RX_HASH_INNER: ibv_rx_hash_fields = 2147483648;
pub type ibv_rx_hash_fields = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_rss_caps {
    pub supported_qpts: u32,
    pub max_rwq_indirection_tables: u32,
    pub max_rwq_indirection_table_size: u32,
    pub rx_hash_fields_mask: u64,
    pub rx_hash_function: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_rss_caps"][::std::mem::size_of::<ibv_rss_caps>() - 32usize];
    ["Alignment of ibv_rss_caps"][::std::mem::align_of::<ibv_rss_caps>() - 8usize];
    ["Offset of field: ibv_rss_caps::supported_qpts"]
        [::std::mem::offset_of!(ibv_rss_caps, supported_qpts) - 0usize];
    ["Offset of field: ibv_rss_caps::max_rwq_indirection_tables"]
        [::std::mem::offset_of!(ibv_rss_caps, max_rwq_indirection_tables) - 4usize];
    ["Offset of field: ibv_rss_caps::max_rwq_indirection_table_size"]
        [::std::mem::offset_of!(ibv_rss_caps, max_rwq_indirection_table_size) - 8usize];
    ["Offset of field: ibv_rss_caps::rx_hash_fields_mask"]
        [::std::mem::offset_of!(ibv_rss_caps, rx_hash_fields_mask) - 16usize];
    ["Offset of field: ibv_rss_caps::rx_hash_function"]
        [::std::mem::offset_of!(ibv_rss_caps, rx_hash_function) - 24usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_packet_pacing_caps {
    pub qp_rate_limit_min: u32,
    pub qp_rate_limit_max: u32,
    pub supported_qpts: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_packet_pacing_caps"][::std::mem::size_of::<ibv_packet_pacing_caps>() - 12usize];
    ["Alignment of ibv_packet_pacing_caps"]
        [::std::mem::align_of::<ibv_packet_pacing_caps>() - 4usize];
    ["Offset of field: ibv_packet_pacing_caps::qp_rate_limit_min"]
        [::std::mem::offset_of!(ibv_packet_pacing_caps, qp_rate_limit_min) - 0usize];
    ["Offset of field: ibv_packet_pacing_caps::qp_rate_limit_max"]
        [::std::mem::offset_of!(ibv_packet_pacing_caps, qp_rate_limit_max) - 4usize];
    ["Offset of field: ibv_packet_pacing_caps::supported_qpts"]
        [::std::mem::offset_of!(ibv_packet_pacing_caps, supported_qpts) - 8usize];
};
pub const IBV_RAW_PACKET_CAP_CVLAN_STRIPPING: ibv_raw_packet_caps = 1;
pub const IBV_RAW_PACKET_CAP_SCATTER_FCS: ibv_raw_packet_caps = 2;
pub const IBV_RAW_PACKET_CAP_IP_CSUM: ibv_raw_packet_caps = 4;
pub const IBV_RAW_PACKET_CAP_DELAY_DROP: ibv_raw_packet_caps = 8;
pub type ibv_raw_packet_caps = ::std::os::raw::c_uint;
pub const IBV_TM_CAP_RC: ibv_tm_cap_flags = 1;
pub type ibv_tm_cap_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_tm_caps {
    pub max_rndv_hdr_size: u32,
    pub max_num_tags: u32,
    pub flags: u32,
    pub max_ops: u32,
    pub max_sge: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_tm_caps"][::std::mem::size_of::<ibv_tm_caps>() - 20usize];
    ["Alignment of ibv_tm_caps"][::std::mem::align_of::<ibv_tm_caps>() - 4usize];
    ["Offset of field: ibv_tm_caps::max_rndv_hdr_size"]
        [::std::mem::offset_of!(ibv_tm_caps, max_rndv_hdr_size) - 0usize];
    ["Offset of field: ibv_tm_caps::max_num_tags"]
        [::std::mem::offset_of!(ibv_tm_caps, max_num_tags) - 4usize];
    ["Offset of field: ibv_tm_caps::flags"][::std::mem::offset_of!(ibv_tm_caps, flags) - 8usize];
    ["Offset of field: ibv_tm_caps::max_ops"]
        [::std::mem::offset_of!(ibv_tm_caps, max_ops) - 12usize];
    ["Offset of field: ibv_tm_caps::max_sge"]
        [::std::mem::offset_of!(ibv_tm_caps, max_sge) - 16usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_cq_moderation_caps {
    pub max_cq_count: u16,
    pub max_cq_period: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_cq_moderation_caps"][::std::mem::size_of::<ibv_cq_moderation_caps>() - 4usize];
    ["Alignment of ibv_cq_moderation_caps"]
        [::std::mem::align_of::<ibv_cq_moderation_caps>() - 2usize];
    ["Offset of field: ibv_cq_moderation_caps::max_cq_count"]
        [::std::mem::offset_of!(ibv_cq_moderation_caps, max_cq_count) - 0usize];
    ["Offset of field: ibv_cq_moderation_caps::max_cq_period"]
        [::std::mem::offset_of!(ibv_cq_moderation_caps, max_cq_period) - 2usize];
};
pub const IBV_PCI_ATOMIC_OPERATION_4_BYTE_SIZE_SUP: ibv_pci_atomic_op_size = 1;
pub const IBV_PCI_ATOMIC_OPERATION_8_BYTE_SIZE_SUP: ibv_pci_atomic_op_size = 2;
pub const IBV_PCI_ATOMIC_OPERATION_16_BYTE_SIZE_SUP: ibv_pci_atomic_op_size = 4;
pub type ibv_pci_atomic_op_size = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_pci_atomic_caps {
    pub fetch_add: u16,
    pub swap: u16,
    pub compare_swap: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_pci_atomic_caps"][::std::mem::size_of::<ibv_pci_atomic_caps>() - 6usize];
    ["Alignment of ibv_pci_atomic_caps"][::std::mem::align_of::<ibv_pci_atomic_caps>() - 2usize];
    ["Offset of field: ibv_pci_atomic_caps::fetch_add"]
        [::std::mem::offset_of!(ibv_pci_atomic_caps, fetch_add) - 0usize];
    ["Offset of field: ibv_pci_atomic_caps::swap"]
        [::std::mem::offset_of!(ibv_pci_atomic_caps, swap) - 2usize];
    ["Offset of field: ibv_pci_atomic_caps::compare_swap"]
        [::std::mem::offset_of!(ibv_pci_atomic_caps, compare_swap) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_device_attr_ex {
    pub orig_attr: ibv_device_attr,
    pub comp_mask: u32,
    pub odp_caps: ibv_odp_caps,
    pub completion_timestamp_mask: u64,
    pub hca_core_clock: u64,
    pub device_cap_flags_ex: u64,
    pub tso_caps: ibv_tso_caps,
    pub rss_caps: ibv_rss_caps,
    pub max_wq_type_rq: u32,
    pub packet_pacing_caps: ibv_packet_pacing_caps,
    pub raw_packet_caps: u32,
    pub tm_caps: ibv_tm_caps,
    pub cq_mod_caps: ibv_cq_moderation_caps,
    pub max_dm_size: u64,
    pub pci_atomic_caps: ibv_pci_atomic_caps,
    pub xrc_odp_caps: u32,
    pub phys_port_cnt_ex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_device_attr_ex"][::std::mem::size_of::<ibv_device_attr_ex>() - 400usize];
    ["Alignment of ibv_device_attr_ex"][::std::mem::align_of::<ibv_device_attr_ex>() - 8usize];
    ["Offset of field: ibv_device_attr_ex::orig_attr"]
        [::std::mem::offset_of!(ibv_device_attr_ex, orig_attr) - 0usize];
    ["Offset of field: ibv_device_attr_ex::comp_mask"]
        [::std::mem::offset_of!(ibv_device_attr_ex, comp_mask) - 232usize];
    ["Offset of field: ibv_device_attr_ex::odp_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, odp_caps) - 240usize];
    ["Offset of field: ibv_device_attr_ex::completion_timestamp_mask"]
        [::std::mem::offset_of!(ibv_device_attr_ex, completion_timestamp_mask) - 264usize];
    ["Offset of field: ibv_device_attr_ex::hca_core_clock"]
        [::std::mem::offset_of!(ibv_device_attr_ex, hca_core_clock) - 272usize];
    ["Offset of field: ibv_device_attr_ex::device_cap_flags_ex"]
        [::std::mem::offset_of!(ibv_device_attr_ex, device_cap_flags_ex) - 280usize];
    ["Offset of field: ibv_device_attr_ex::tso_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, tso_caps) - 288usize];
    ["Offset of field: ibv_device_attr_ex::rss_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, rss_caps) - 296usize];
    ["Offset of field: ibv_device_attr_ex::max_wq_type_rq"]
        [::std::mem::offset_of!(ibv_device_attr_ex, max_wq_type_rq) - 328usize];
    ["Offset of field: ibv_device_attr_ex::packet_pacing_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, packet_pacing_caps) - 332usize];
    ["Offset of field: ibv_device_attr_ex::raw_packet_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, raw_packet_caps) - 344usize];
    ["Offset of field: ibv_device_attr_ex::tm_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, tm_caps) - 348usize];
    ["Offset of field: ibv_device_attr_ex::cq_mod_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, cq_mod_caps) - 368usize];
    ["Offset of field: ibv_device_attr_ex::max_dm_size"]
        [::std::mem::offset_of!(ibv_device_attr_ex, max_dm_size) - 376usize];
    ["Offset of field: ibv_device_attr_ex::pci_atomic_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, pci_atomic_caps) - 384usize];
    ["Offset of field: ibv_device_attr_ex::xrc_odp_caps"]
        [::std::mem::offset_of!(ibv_device_attr_ex, xrc_odp_caps) - 392usize];
    ["Offset of field: ibv_device_attr_ex::phys_port_cnt_ex"]
        [::std::mem::offset_of!(ibv_device_attr_ex, phys_port_cnt_ex) - 396usize];
};
impl Default for ibv_device_attr_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_MTU_256: ibv_mtu = 1;
pub const IBV_MTU_512: ibv_mtu = 2;
pub const IBV_MTU_1024: ibv_mtu = 3;
pub const IBV_MTU_2048: ibv_mtu = 4;
pub const IBV_MTU_4096: ibv_mtu = 5;
pub type ibv_mtu = ::std::os::raw::c_uint;
pub mod ibv_port_state {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_PORT_NOP: Type = 0;
    pub const IBV_PORT_DOWN: Type = 1;
    pub const IBV_PORT_INIT: Type = 2;
    pub const IBV_PORT_ARMED: Type = 3;
    pub const IBV_PORT_ACTIVE: Type = 4;
    pub const IBV_PORT_ACTIVE_DEFER: Type = 5;
}
pub const IBV_LINK_LAYER_UNSPECIFIED: _bindgen_ty_13 = 0;
pub const IBV_LINK_LAYER_INFINIBAND: _bindgen_ty_13 = 1;
pub const IBV_LINK_LAYER_ETHERNET: _bindgen_ty_13 = 2;
pub type _bindgen_ty_13 = ::std::os::raw::c_uint;
impl ibv_port_cap_flags {
    pub const IBV_PORT_SM: ibv_port_cap_flags = ibv_port_cap_flags(2);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_NOTICE_SUP: ibv_port_cap_flags = ibv_port_cap_flags(4);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_TRAP_SUP: ibv_port_cap_flags = ibv_port_cap_flags(8);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_OPT_IPD_SUP: ibv_port_cap_flags = ibv_port_cap_flags(16);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_AUTO_MIGR_SUP: ibv_port_cap_flags = ibv_port_cap_flags(32);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_SL_MAP_SUP: ibv_port_cap_flags = ibv_port_cap_flags(64);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_MKEY_NVRAM: ibv_port_cap_flags = ibv_port_cap_flags(128);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_PKEY_NVRAM: ibv_port_cap_flags = ibv_port_cap_flags(256);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_LED_INFO_SUP: ibv_port_cap_flags = ibv_port_cap_flags(512);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_SYS_IMAGE_GUID_SUP: ibv_port_cap_flags = ibv_port_cap_flags(2048);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_PKEY_SW_EXT_PORT_TRAP_SUP: ibv_port_cap_flags = ibv_port_cap_flags(4096);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_EXTENDED_SPEEDS_SUP: ibv_port_cap_flags = ibv_port_cap_flags(16384);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_CAP_MASK2_SUP: ibv_port_cap_flags = ibv_port_cap_flags(32768);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_CM_SUP: ibv_port_cap_flags = ibv_port_cap_flags(65536);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_SNMP_TUNNEL_SUP: ibv_port_cap_flags = ibv_port_cap_flags(131072);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_REINIT_SUP: ibv_port_cap_flags = ibv_port_cap_flags(262144);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_DEVICE_MGMT_SUP: ibv_port_cap_flags = ibv_port_cap_flags(524288);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_VENDOR_CLASS_SUP: ibv_port_cap_flags = ibv_port_cap_flags(1048576);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_DR_NOTICE_SUP: ibv_port_cap_flags = ibv_port_cap_flags(2097152);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_CAP_MASK_NOTICE_SUP: ibv_port_cap_flags = ibv_port_cap_flags(4194304);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_BOOT_MGMT_SUP: ibv_port_cap_flags = ibv_port_cap_flags(8388608);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_LINK_LATENCY_SUP: ibv_port_cap_flags = ibv_port_cap_flags(16777216);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_CLIENT_REG_SUP: ibv_port_cap_flags = ibv_port_cap_flags(33554432);
}
impl ibv_port_cap_flags {
    pub const IBV_PORT_IP_BASED_GIDS: ibv_port_cap_flags = ibv_port_cap_flags(67108864);
}
impl ::std::ops::BitOr<ibv_port_cap_flags> for ibv_port_cap_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_port_cap_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_port_cap_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_port_cap_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_port_cap_flags> for ibv_port_cap_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_port_cap_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_port_cap_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_port_cap_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_port_cap_flags(pub ::std::os::raw::c_uint);
pub const IBV_PORT_SET_NODE_DESC_SUP: ibv_port_cap_flags2 = 1;
pub const IBV_PORT_INFO_EXT_SUP: ibv_port_cap_flags2 = 2;
pub const IBV_PORT_VIRT_SUP: ibv_port_cap_flags2 = 4;
pub const IBV_PORT_SWITCH_PORT_STATE_TABLE_SUP: ibv_port_cap_flags2 = 8;
pub const IBV_PORT_LINK_WIDTH_2X_SUP: ibv_port_cap_flags2 = 16;
pub const IBV_PORT_LINK_SPEED_HDR_SUP: ibv_port_cap_flags2 = 32;
pub const IBV_PORT_LINK_SPEED_NDR_SUP: ibv_port_cap_flags2 = 1024;
pub const IBV_PORT_LINK_SPEED_XDR_SUP: ibv_port_cap_flags2 = 4096;
pub type ibv_port_cap_flags2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_port_attr {
    pub state: ibv_port_state::Type,
    pub max_mtu: ibv_mtu,
    pub active_mtu: ibv_mtu,
    pub gid_tbl_len: ::std::os::raw::c_int,
    pub port_cap_flags: u32,
    pub max_msg_sz: u32,
    pub bad_pkey_cntr: u32,
    pub qkey_viol_cntr: u32,
    pub pkey_tbl_len: u16,
    pub lid: u16,
    pub sm_lid: u16,
    pub lmc: u8,
    pub max_vl_num: u8,
    pub sm_sl: u8,
    pub subnet_timeout: u8,
    pub init_type_reply: u8,
    pub active_width: u8,
    pub active_speed: u8,
    pub phys_state: u8,
    pub link_layer: u8,
    pub flags: u8,
    pub port_cap_flags2: u16,
    pub active_speed_ex: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_port_attr"][::std::mem::size_of::<ibv_port_attr>() - 56usize];
    ["Alignment of ibv_port_attr"][::std::mem::align_of::<ibv_port_attr>() - 4usize];
    ["Offset of field: ibv_port_attr::state"]
        [::std::mem::offset_of!(ibv_port_attr, state) - 0usize];
    ["Offset of field: ibv_port_attr::max_mtu"]
        [::std::mem::offset_of!(ibv_port_attr, max_mtu) - 4usize];
    ["Offset of field: ibv_port_attr::active_mtu"]
        [::std::mem::offset_of!(ibv_port_attr, active_mtu) - 8usize];
    ["Offset of field: ibv_port_attr::gid_tbl_len"]
        [::std::mem::offset_of!(ibv_port_attr, gid_tbl_len) - 12usize];
    ["Offset of field: ibv_port_attr::port_cap_flags"]
        [::std::mem::offset_of!(ibv_port_attr, port_cap_flags) - 16usize];
    ["Offset of field: ibv_port_attr::max_msg_sz"]
        [::std::mem::offset_of!(ibv_port_attr, max_msg_sz) - 20usize];
    ["Offset of field: ibv_port_attr::bad_pkey_cntr"]
        [::std::mem::offset_of!(ibv_port_attr, bad_pkey_cntr) - 24usize];
    ["Offset of field: ibv_port_attr::qkey_viol_cntr"]
        [::std::mem::offset_of!(ibv_port_attr, qkey_viol_cntr) - 28usize];
    ["Offset of field: ibv_port_attr::pkey_tbl_len"]
        [::std::mem::offset_of!(ibv_port_attr, pkey_tbl_len) - 32usize];
    ["Offset of field: ibv_port_attr::lid"][::std::mem::offset_of!(ibv_port_attr, lid) - 34usize];
    ["Offset of field: ibv_port_attr::sm_lid"]
        [::std::mem::offset_of!(ibv_port_attr, sm_lid) - 36usize];
    ["Offset of field: ibv_port_attr::lmc"][::std::mem::offset_of!(ibv_port_attr, lmc) - 38usize];
    ["Offset of field: ibv_port_attr::max_vl_num"]
        [::std::mem::offset_of!(ibv_port_attr, max_vl_num) - 39usize];
    ["Offset of field: ibv_port_attr::sm_sl"]
        [::std::mem::offset_of!(ibv_port_attr, sm_sl) - 40usize];
    ["Offset of field: ibv_port_attr::subnet_timeout"]
        [::std::mem::offset_of!(ibv_port_attr, subnet_timeout) - 41usize];
    ["Offset of field: ibv_port_attr::init_type_reply"]
        [::std::mem::offset_of!(ibv_port_attr, init_type_reply) - 42usize];
    ["Offset of field: ibv_port_attr::active_width"]
        [::std::mem::offset_of!(ibv_port_attr, active_width) - 43usize];
    ["Offset of field: ibv_port_attr::active_speed"]
        [::std::mem::offset_of!(ibv_port_attr, active_speed) - 44usize];
    ["Offset of field: ibv_port_attr::phys_state"]
        [::std::mem::offset_of!(ibv_port_attr, phys_state) - 45usize];
    ["Offset of field: ibv_port_attr::link_layer"]
        [::std::mem::offset_of!(ibv_port_attr, link_layer) - 46usize];
    ["Offset of field: ibv_port_attr::flags"]
        [::std::mem::offset_of!(ibv_port_attr, flags) - 47usize];
    ["Offset of field: ibv_port_attr::port_cap_flags2"]
        [::std::mem::offset_of!(ibv_port_attr, port_cap_flags2) - 48usize];
    ["Offset of field: ibv_port_attr::active_speed_ex"]
        [::std::mem::offset_of!(ibv_port_attr, active_speed_ex) - 52usize];
};
impl Default for ibv_port_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_EVENT_CQ_ERR: ibv_event_type = 0;
pub const IBV_EVENT_QP_FATAL: ibv_event_type = 1;
pub const IBV_EVENT_QP_REQ_ERR: ibv_event_type = 2;
pub const IBV_EVENT_QP_ACCESS_ERR: ibv_event_type = 3;
pub const IBV_EVENT_COMM_EST: ibv_event_type = 4;
pub const IBV_EVENT_SQ_DRAINED: ibv_event_type = 5;
pub const IBV_EVENT_PATH_MIG: ibv_event_type = 6;
pub const IBV_EVENT_PATH_MIG_ERR: ibv_event_type = 7;
pub const IBV_EVENT_DEVICE_FATAL: ibv_event_type = 8;
pub const IBV_EVENT_PORT_ACTIVE: ibv_event_type = 9;
pub const IBV_EVENT_PORT_ERR: ibv_event_type = 10;
pub const IBV_EVENT_LID_CHANGE: ibv_event_type = 11;
pub const IBV_EVENT_PKEY_CHANGE: ibv_event_type = 12;
pub const IBV_EVENT_SM_CHANGE: ibv_event_type = 13;
pub const IBV_EVENT_SRQ_ERR: ibv_event_type = 14;
pub const IBV_EVENT_SRQ_LIMIT_REACHED: ibv_event_type = 15;
pub const IBV_EVENT_QP_LAST_WQE_REACHED: ibv_event_type = 16;
pub const IBV_EVENT_CLIENT_REREGISTER: ibv_event_type = 17;
pub const IBV_EVENT_GID_CHANGE: ibv_event_type = 18;
pub const IBV_EVENT_WQ_FATAL: ibv_event_type = 19;
pub type ibv_event_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_async_event {
    pub element: ibv_async_event__bindgen_ty_1,
    pub event_type: ibv_event_type,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_async_event__bindgen_ty_1 {
    pub cq: *mut ibv_cq,
    pub qp: *mut ibv_qp,
    pub srq: *mut ibv_srq,
    pub wq: *mut ibv_wq,
    pub port_num: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_async_event__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_async_event__bindgen_ty_1>() - 8usize];
    ["Alignment of ibv_async_event__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_async_event__bindgen_ty_1>() - 8usize];
    ["Offset of field: ibv_async_event__bindgen_ty_1::cq"]
        [::std::mem::offset_of!(ibv_async_event__bindgen_ty_1, cq) - 0usize];
    ["Offset of field: ibv_async_event__bindgen_ty_1::qp"]
        [::std::mem::offset_of!(ibv_async_event__bindgen_ty_1, qp) - 0usize];
    ["Offset of field: ibv_async_event__bindgen_ty_1::srq"]
        [::std::mem::offset_of!(ibv_async_event__bindgen_ty_1, srq) - 0usize];
    ["Offset of field: ibv_async_event__bindgen_ty_1::wq"]
        [::std::mem::offset_of!(ibv_async_event__bindgen_ty_1, wq) - 0usize];
    ["Offset of field: ibv_async_event__bindgen_ty_1::port_num"]
        [::std::mem::offset_of!(ibv_async_event__bindgen_ty_1, port_num) - 0usize];
};
impl Default for ibv_async_event__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_async_event"][::std::mem::size_of::<ibv_async_event>() - 16usize];
    ["Alignment of ibv_async_event"][::std::mem::align_of::<ibv_async_event>() - 8usize];
    ["Offset of field: ibv_async_event::element"]
        [::std::mem::offset_of!(ibv_async_event, element) - 0usize];
    ["Offset of field: ibv_async_event::event_type"]
        [::std::mem::offset_of!(ibv_async_event, event_type) - 8usize];
};
impl Default for ibv_async_event {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod ibv_wc_status {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_WC_SUCCESS: Type = 0;
    pub const IBV_WC_LOC_LEN_ERR: Type = 1;
    pub const IBV_WC_LOC_QP_OP_ERR: Type = 2;
    pub const IBV_WC_LOC_EEC_OP_ERR: Type = 3;
    pub const IBV_WC_LOC_PROT_ERR: Type = 4;
    pub const IBV_WC_WR_FLUSH_ERR: Type = 5;
    pub const IBV_WC_MW_BIND_ERR: Type = 6;
    pub const IBV_WC_BAD_RESP_ERR: Type = 7;
    pub const IBV_WC_LOC_ACCESS_ERR: Type = 8;
    pub const IBV_WC_REM_INV_REQ_ERR: Type = 9;
    pub const IBV_WC_REM_ACCESS_ERR: Type = 10;
    pub const IBV_WC_REM_OP_ERR: Type = 11;
    pub const IBV_WC_RETRY_EXC_ERR: Type = 12;
    pub const IBV_WC_RNR_RETRY_EXC_ERR: Type = 13;
    pub const IBV_WC_LOC_RDD_VIOL_ERR: Type = 14;
    pub const IBV_WC_REM_INV_RD_REQ_ERR: Type = 15;
    pub const IBV_WC_REM_ABORT_ERR: Type = 16;
    pub const IBV_WC_INV_EECN_ERR: Type = 17;
    pub const IBV_WC_INV_EEC_STATE_ERR: Type = 18;
    pub const IBV_WC_FATAL_ERR: Type = 19;
    pub const IBV_WC_RESP_TIMEOUT_ERR: Type = 20;
    pub const IBV_WC_GENERAL_ERR: Type = 21;
    pub const IBV_WC_TM_ERR: Type = 22;
    pub const IBV_WC_TM_RNDV_INCOMPLETE: Type = 23;
}
extern "C" {
    pub fn ibv_wc_status_str(status: ibv_wc_status::Type) -> *const ::std::os::raw::c_char;
}
pub mod ibv_wc_opcode {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_WC_SEND: Type = 0;
    pub const IBV_WC_RDMA_WRITE: Type = 1;
    pub const IBV_WC_RDMA_READ: Type = 2;
    pub const IBV_WC_COMP_SWAP: Type = 3;
    pub const IBV_WC_FETCH_ADD: Type = 4;
    pub const IBV_WC_BIND_MW: Type = 5;
    pub const IBV_WC_LOCAL_INV: Type = 6;
    pub const IBV_WC_TSO: Type = 7;
    pub const IBV_WC_FLUSH: Type = 8;
    pub const IBV_WC_ATOMIC_WRITE: Type = 9;
    pub const IBV_WC_RECV: Type = 128;
    pub const IBV_WC_RECV_RDMA_WITH_IMM: Type = 129;
    pub const IBV_WC_TM_ADD: Type = 130;
    pub const IBV_WC_TM_DEL: Type = 131;
    pub const IBV_WC_TM_SYNC: Type = 132;
    pub const IBV_WC_TM_RECV: Type = 133;
    pub const IBV_WC_TM_NO_TAG: Type = 134;
    pub const IBV_WC_DRIVER1: Type = 135;
    pub const IBV_WC_DRIVER2: Type = 136;
    pub const IBV_WC_DRIVER3: Type = 137;
}
pub const IBV_WC_IP_CSUM_OK_SHIFT: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = ::std::os::raw::c_uint;
pub const IBV_WC_EX_WITH_BYTE_LEN: ibv_create_cq_wc_flags = 1;
pub const IBV_WC_EX_WITH_IMM: ibv_create_cq_wc_flags = 2;
pub const IBV_WC_EX_WITH_QP_NUM: ibv_create_cq_wc_flags = 4;
pub const IBV_WC_EX_WITH_SRC_QP: ibv_create_cq_wc_flags = 8;
pub const IBV_WC_EX_WITH_SLID: ibv_create_cq_wc_flags = 16;
pub const IBV_WC_EX_WITH_SL: ibv_create_cq_wc_flags = 32;
pub const IBV_WC_EX_WITH_DLID_PATH_BITS: ibv_create_cq_wc_flags = 64;
pub const IBV_WC_EX_WITH_COMPLETION_TIMESTAMP: ibv_create_cq_wc_flags = 128;
pub const IBV_WC_EX_WITH_CVLAN: ibv_create_cq_wc_flags = 256;
pub const IBV_WC_EX_WITH_FLOW_TAG: ibv_create_cq_wc_flags = 512;
pub const IBV_WC_EX_WITH_TM_INFO: ibv_create_cq_wc_flags = 1024;
pub const IBV_WC_EX_WITH_COMPLETION_TIMESTAMP_WALLCLOCK: ibv_create_cq_wc_flags = 2048;
pub type ibv_create_cq_wc_flags = ::std::os::raw::c_uint;
pub const IBV_WC_STANDARD_FLAGS: _bindgen_ty_15 = 127;
pub type _bindgen_ty_15 = ::std::os::raw::c_uint;
pub const IBV_CREATE_CQ_SUP_WC_FLAGS: _bindgen_ty_16 = 4095;
pub type _bindgen_ty_16 = ::std::os::raw::c_uint;
impl ibv_wc_flags {
    pub const IBV_WC_GRH: ibv_wc_flags = ibv_wc_flags(1);
}
impl ibv_wc_flags {
    pub const IBV_WC_WITH_IMM: ibv_wc_flags = ibv_wc_flags(2);
}
impl ibv_wc_flags {
    pub const IBV_WC_IP_CSUM_OK: ibv_wc_flags = ibv_wc_flags(4);
}
impl ibv_wc_flags {
    pub const IBV_WC_WITH_INV: ibv_wc_flags = ibv_wc_flags(8);
}
impl ibv_wc_flags {
    pub const IBV_WC_TM_SYNC_REQ: ibv_wc_flags = ibv_wc_flags(16);
}
impl ibv_wc_flags {
    pub const IBV_WC_TM_MATCH: ibv_wc_flags = ibv_wc_flags(32);
}
impl ibv_wc_flags {
    pub const IBV_WC_TM_DATA_VALID: ibv_wc_flags = ibv_wc_flags(64);
}
impl ::std::ops::BitOr<ibv_wc_flags> for ibv_wc_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_wc_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_wc_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_wc_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_wc_flags> for ibv_wc_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_wc_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_wc_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_wc_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_wc_flags(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_wc {
    pub wr_id: u64,
    pub status: ibv_wc_status::Type,
    pub opcode: ibv_wc_opcode::Type,
    pub vendor_err: u32,
    pub byte_len: u32,
    pub __bindgen_anon_1: ibv_wc__bindgen_ty_1,
    pub qp_num: u32,
    pub src_qp: u32,
    pub wc_flags: ::std::os::raw::c_uint,
    pub pkey_index: u16,
    pub slid: u16,
    pub sl: u8,
    pub dlid_path_bits: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_wc__bindgen_ty_1 {
    pub imm_data: __be32,
    pub invalidated_rkey: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_wc__bindgen_ty_1"][::std::mem::size_of::<ibv_wc__bindgen_ty_1>() - 4usize];
    ["Alignment of ibv_wc__bindgen_ty_1"][::std::mem::align_of::<ibv_wc__bindgen_ty_1>() - 4usize];
    ["Offset of field: ibv_wc__bindgen_ty_1::imm_data"]
        [::std::mem::offset_of!(ibv_wc__bindgen_ty_1, imm_data) - 0usize];
    ["Offset of field: ibv_wc__bindgen_ty_1::invalidated_rkey"]
        [::std::mem::offset_of!(ibv_wc__bindgen_ty_1, invalidated_rkey) - 0usize];
};
impl Default for ibv_wc__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_wc"][::std::mem::size_of::<ibv_wc>() - 48usize];
    ["Alignment of ibv_wc"][::std::mem::align_of::<ibv_wc>() - 8usize];
    ["Offset of field: ibv_wc::wr_id"][::std::mem::offset_of!(ibv_wc, wr_id) - 0usize];
    ["Offset of field: ibv_wc::status"][::std::mem::offset_of!(ibv_wc, status) - 8usize];
    ["Offset of field: ibv_wc::opcode"][::std::mem::offset_of!(ibv_wc, opcode) - 12usize];
    ["Offset of field: ibv_wc::vendor_err"][::std::mem::offset_of!(ibv_wc, vendor_err) - 16usize];
    ["Offset of field: ibv_wc::byte_len"][::std::mem::offset_of!(ibv_wc, byte_len) - 20usize];
    ["Offset of field: ibv_wc::qp_num"][::std::mem::offset_of!(ibv_wc, qp_num) - 28usize];
    ["Offset of field: ibv_wc::src_qp"][::std::mem::offset_of!(ibv_wc, src_qp) - 32usize];
    ["Offset of field: ibv_wc::wc_flags"][::std::mem::offset_of!(ibv_wc, wc_flags) - 36usize];
    ["Offset of field: ibv_wc::pkey_index"][::std::mem::offset_of!(ibv_wc, pkey_index) - 40usize];
    ["Offset of field: ibv_wc::slid"][::std::mem::offset_of!(ibv_wc, slid) - 42usize];
    ["Offset of field: ibv_wc::sl"][::std::mem::offset_of!(ibv_wc, sl) - 44usize];
    ["Offset of field: ibv_wc::dlid_path_bits"]
        [::std::mem::offset_of!(ibv_wc, dlid_path_bits) - 45usize];
};
impl Default for ibv_wc {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ibv_access_flags {
    pub const IBV_ACCESS_LOCAL_WRITE: ibv_access_flags = ibv_access_flags(1);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_REMOTE_WRITE: ibv_access_flags = ibv_access_flags(2);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_REMOTE_READ: ibv_access_flags = ibv_access_flags(4);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_REMOTE_ATOMIC: ibv_access_flags = ibv_access_flags(8);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_MW_BIND: ibv_access_flags = ibv_access_flags(16);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_ZERO_BASED: ibv_access_flags = ibv_access_flags(32);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_ON_DEMAND: ibv_access_flags = ibv_access_flags(64);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_HUGETLB: ibv_access_flags = ibv_access_flags(128);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_FLUSH_GLOBAL: ibv_access_flags = ibv_access_flags(256);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_FLUSH_PERSISTENT: ibv_access_flags = ibv_access_flags(512);
}
impl ibv_access_flags {
    pub const IBV_ACCESS_RELAXED_ORDERING: ibv_access_flags = ibv_access_flags(1048576);
}
impl ::std::ops::BitOr<ibv_access_flags> for ibv_access_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_access_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_access_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_access_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_access_flags> for ibv_access_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_access_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_access_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_access_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_access_flags(pub ::std::os::raw::c_uint);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mw_bind_info {
    pub mr: *mut ibv_mr,
    pub addr: u64,
    pub length: u64,
    pub mw_access_flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_mw_bind_info"][::std::mem::size_of::<ibv_mw_bind_info>() - 32usize];
    ["Alignment of ibv_mw_bind_info"][::std::mem::align_of::<ibv_mw_bind_info>() - 8usize];
    ["Offset of field: ibv_mw_bind_info::mr"]
        [::std::mem::offset_of!(ibv_mw_bind_info, mr) - 0usize];
    ["Offset of field: ibv_mw_bind_info::addr"]
        [::std::mem::offset_of!(ibv_mw_bind_info, addr) - 8usize];
    ["Offset of field: ibv_mw_bind_info::length"]
        [::std::mem::offset_of!(ibv_mw_bind_info, length) - 16usize];
    ["Offset of field: ibv_mw_bind_info::mw_access_flags"]
        [::std::mem::offset_of!(ibv_mw_bind_info, mw_access_flags) - 24usize];
};
impl Default for ibv_mw_bind_info {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_pd {
    pub context: *mut ibv_context,
    pub handle: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_pd"][::std::mem::size_of::<ibv_pd>() - 16usize];
    ["Alignment of ibv_pd"][::std::mem::align_of::<ibv_pd>() - 8usize];
    ["Offset of field: ibv_pd::context"][::std::mem::offset_of!(ibv_pd, context) - 0usize];
    ["Offset of field: ibv_pd::handle"][::std::mem::offset_of!(ibv_pd, handle) - 8usize];
};
impl Default for ibv_pd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_td_init_attr {
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_td_init_attr"][::std::mem::size_of::<ibv_td_init_attr>() - 4usize];
    ["Alignment of ibv_td_init_attr"][::std::mem::align_of::<ibv_td_init_attr>() - 4usize];
    ["Offset of field: ibv_td_init_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_td_init_attr, comp_mask) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_td {
    pub context: *mut ibv_context,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_td"][::std::mem::size_of::<ibv_td>() - 8usize];
    ["Alignment of ibv_td"][::std::mem::align_of::<ibv_td>() - 8usize];
    ["Offset of field: ibv_td::context"][::std::mem::offset_of!(ibv_td, context) - 0usize];
};
impl Default for ibv_td {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_XRCD_INIT_ATTR_FD: ibv_xrcd_init_attr_mask = 1;
pub const IBV_XRCD_INIT_ATTR_OFLAGS: ibv_xrcd_init_attr_mask = 2;
pub const IBV_XRCD_INIT_ATTR_RESERVED: ibv_xrcd_init_attr_mask = 4;
pub type ibv_xrcd_init_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_xrcd_init_attr {
    pub comp_mask: u32,
    pub fd: ::std::os::raw::c_int,
    pub oflags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_xrcd_init_attr"][::std::mem::size_of::<ibv_xrcd_init_attr>() - 12usize];
    ["Alignment of ibv_xrcd_init_attr"][::std::mem::align_of::<ibv_xrcd_init_attr>() - 4usize];
    ["Offset of field: ibv_xrcd_init_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_xrcd_init_attr, comp_mask) - 0usize];
    ["Offset of field: ibv_xrcd_init_attr::fd"]
        [::std::mem::offset_of!(ibv_xrcd_init_attr, fd) - 4usize];
    ["Offset of field: ibv_xrcd_init_attr::oflags"]
        [::std::mem::offset_of!(ibv_xrcd_init_attr, oflags) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_xrcd {
    pub context: *mut ibv_context,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_xrcd"][::std::mem::size_of::<ibv_xrcd>() - 8usize];
    ["Alignment of ibv_xrcd"][::std::mem::align_of::<ibv_xrcd>() - 8usize];
    ["Offset of field: ibv_xrcd::context"][::std::mem::offset_of!(ibv_xrcd, context) - 0usize];
};
impl Default for ibv_xrcd {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_REREG_MR_CHANGE_TRANSLATION: ibv_rereg_mr_flags = 1;
pub const IBV_REREG_MR_CHANGE_PD: ibv_rereg_mr_flags = 2;
pub const IBV_REREG_MR_CHANGE_ACCESS: ibv_rereg_mr_flags = 4;
pub const IBV_REREG_MR_FLAGS_SUPPORTED: ibv_rereg_mr_flags = 7;
pub type ibv_rereg_mr_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mr {
    pub context: *mut ibv_context,
    pub pd: *mut ibv_pd,
    pub addr: *mut ::std::os::raw::c_void,
    pub length: usize,
    pub handle: u32,
    pub lkey: u32,
    pub rkey: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_mr"][::std::mem::size_of::<ibv_mr>() - 48usize];
    ["Alignment of ibv_mr"][::std::mem::align_of::<ibv_mr>() - 8usize];
    ["Offset of field: ibv_mr::context"][::std::mem::offset_of!(ibv_mr, context) - 0usize];
    ["Offset of field: ibv_mr::pd"][::std::mem::offset_of!(ibv_mr, pd) - 8usize];
    ["Offset of field: ibv_mr::addr"][::std::mem::offset_of!(ibv_mr, addr) - 16usize];
    ["Offset of field: ibv_mr::length"][::std::mem::offset_of!(ibv_mr, length) - 24usize];
    ["Offset of field: ibv_mr::handle"][::std::mem::offset_of!(ibv_mr, handle) - 32usize];
    ["Offset of field: ibv_mr::lkey"][::std::mem::offset_of!(ibv_mr, lkey) - 36usize];
    ["Offset of field: ibv_mr::rkey"][::std::mem::offset_of!(ibv_mr, rkey) - 40usize];
};
impl Default for ibv_mr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_MW_TYPE_1: ibv_mw_type = 1;
pub const IBV_MW_TYPE_2: ibv_mw_type = 2;
pub type ibv_mw_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mw {
    pub context: *mut ibv_context,
    pub pd: *mut ibv_pd,
    pub rkey: u32,
    pub handle: u32,
    pub type_: ibv_mw_type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_mw"][::std::mem::size_of::<ibv_mw>() - 32usize];
    ["Alignment of ibv_mw"][::std::mem::align_of::<ibv_mw>() - 8usize];
    ["Offset of field: ibv_mw::context"][::std::mem::offset_of!(ibv_mw, context) - 0usize];
    ["Offset of field: ibv_mw::pd"][::std::mem::offset_of!(ibv_mw, pd) - 8usize];
    ["Offset of field: ibv_mw::rkey"][::std::mem::offset_of!(ibv_mw, rkey) - 16usize];
    ["Offset of field: ibv_mw::handle"][::std::mem::offset_of!(ibv_mw, handle) - 20usize];
    ["Offset of field: ibv_mw::type_"][::std::mem::offset_of!(ibv_mw, type_) - 24usize];
};
impl Default for ibv_mw {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_global_route {
    pub dgid: ibv_gid,
    pub flow_label: u32,
    pub sgid_index: u8,
    pub hop_limit: u8,
    pub traffic_class: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_global_route"][::std::mem::size_of::<ibv_global_route>() - 24usize];
    ["Alignment of ibv_global_route"][::std::mem::align_of::<ibv_global_route>() - 8usize];
    ["Offset of field: ibv_global_route::dgid"]
        [::std::mem::offset_of!(ibv_global_route, dgid) - 0usize];
    ["Offset of field: ibv_global_route::flow_label"]
        [::std::mem::offset_of!(ibv_global_route, flow_label) - 16usize];
    ["Offset of field: ibv_global_route::sgid_index"]
        [::std::mem::offset_of!(ibv_global_route, sgid_index) - 20usize];
    ["Offset of field: ibv_global_route::hop_limit"]
        [::std::mem::offset_of!(ibv_global_route, hop_limit) - 21usize];
    ["Offset of field: ibv_global_route::traffic_class"]
        [::std::mem::offset_of!(ibv_global_route, traffic_class) - 22usize];
};
impl Default for ibv_global_route {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_grh {
    pub version_tclass_flow: __be32,
    pub paylen: __be16,
    pub next_hdr: u8,
    pub hop_limit: u8,
    pub sgid: ibv_gid,
    pub dgid: ibv_gid,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_grh"][::std::mem::size_of::<ibv_grh>() - 40usize];
    ["Alignment of ibv_grh"][::std::mem::align_of::<ibv_grh>() - 8usize];
    ["Offset of field: ibv_grh::version_tclass_flow"]
        [::std::mem::offset_of!(ibv_grh, version_tclass_flow) - 0usize];
    ["Offset of field: ibv_grh::paylen"][::std::mem::offset_of!(ibv_grh, paylen) - 4usize];
    ["Offset of field: ibv_grh::next_hdr"][::std::mem::offset_of!(ibv_grh, next_hdr) - 6usize];
    ["Offset of field: ibv_grh::hop_limit"][::std::mem::offset_of!(ibv_grh, hop_limit) - 7usize];
    ["Offset of field: ibv_grh::sgid"][::std::mem::offset_of!(ibv_grh, sgid) - 8usize];
    ["Offset of field: ibv_grh::dgid"][::std::mem::offset_of!(ibv_grh, dgid) - 24usize];
};
impl Default for ibv_grh {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_RATE_MAX: ibv_rate = 0;
pub const IBV_RATE_2_5_GBPS: ibv_rate = 2;
pub const IBV_RATE_5_GBPS: ibv_rate = 5;
pub const IBV_RATE_10_GBPS: ibv_rate = 3;
pub const IBV_RATE_20_GBPS: ibv_rate = 6;
pub const IBV_RATE_30_GBPS: ibv_rate = 4;
pub const IBV_RATE_40_GBPS: ibv_rate = 7;
pub const IBV_RATE_60_GBPS: ibv_rate = 8;
pub const IBV_RATE_80_GBPS: ibv_rate = 9;
pub const IBV_RATE_120_GBPS: ibv_rate = 10;
pub const IBV_RATE_14_GBPS: ibv_rate = 11;
pub const IBV_RATE_56_GBPS: ibv_rate = 12;
pub const IBV_RATE_112_GBPS: ibv_rate = 13;
pub const IBV_RATE_168_GBPS: ibv_rate = 14;
pub const IBV_RATE_25_GBPS: ibv_rate = 15;
pub const IBV_RATE_100_GBPS: ibv_rate = 16;
pub const IBV_RATE_200_GBPS: ibv_rate = 17;
pub const IBV_RATE_300_GBPS: ibv_rate = 18;
pub const IBV_RATE_28_GBPS: ibv_rate = 19;
pub const IBV_RATE_50_GBPS: ibv_rate = 20;
pub const IBV_RATE_400_GBPS: ibv_rate = 21;
pub const IBV_RATE_600_GBPS: ibv_rate = 22;
pub const IBV_RATE_800_GBPS: ibv_rate = 23;
pub const IBV_RATE_1200_GBPS: ibv_rate = 24;
pub type ibv_rate = ::std::os::raw::c_uint;
extern "C" {
    pub fn ibv_rate_to_mult(rate: ibv_rate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mult_to_ibv_rate(mult: ::std::os::raw::c_int) -> ibv_rate;
}
extern "C" {
    pub fn ibv_rate_to_mbps(rate: ibv_rate) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbps_to_ibv_rate(mbps: ::std::os::raw::c_int) -> ibv_rate;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_ah_attr {
    pub grh: ibv_global_route,
    pub dlid: u16,
    pub sl: u8,
    pub src_path_bits: u8,
    pub static_rate: u8,
    pub is_global: u8,
    pub port_num: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_ah_attr"][::std::mem::size_of::<ibv_ah_attr>() - 32usize];
    ["Alignment of ibv_ah_attr"][::std::mem::align_of::<ibv_ah_attr>() - 8usize];
    ["Offset of field: ibv_ah_attr::grh"][::std::mem::offset_of!(ibv_ah_attr, grh) - 0usize];
    ["Offset of field: ibv_ah_attr::dlid"][::std::mem::offset_of!(ibv_ah_attr, dlid) - 24usize];
    ["Offset of field: ibv_ah_attr::sl"][::std::mem::offset_of!(ibv_ah_attr, sl) - 26usize];
    ["Offset of field: ibv_ah_attr::src_path_bits"]
        [::std::mem::offset_of!(ibv_ah_attr, src_path_bits) - 27usize];
    ["Offset of field: ibv_ah_attr::static_rate"]
        [::std::mem::offset_of!(ibv_ah_attr, static_rate) - 28usize];
    ["Offset of field: ibv_ah_attr::is_global"]
        [::std::mem::offset_of!(ibv_ah_attr, is_global) - 29usize];
    ["Offset of field: ibv_ah_attr::port_num"]
        [::std::mem::offset_of!(ibv_ah_attr, port_num) - 30usize];
};
impl Default for ibv_ah_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_SRQ_MAX_WR: ibv_srq_attr_mask = 1;
pub const IBV_SRQ_LIMIT: ibv_srq_attr_mask = 2;
pub type ibv_srq_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_srq_attr {
    pub max_wr: u32,
    pub max_sge: u32,
    pub srq_limit: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_srq_attr"][::std::mem::size_of::<ibv_srq_attr>() - 12usize];
    ["Alignment of ibv_srq_attr"][::std::mem::align_of::<ibv_srq_attr>() - 4usize];
    ["Offset of field: ibv_srq_attr::max_wr"]
        [::std::mem::offset_of!(ibv_srq_attr, max_wr) - 0usize];
    ["Offset of field: ibv_srq_attr::max_sge"]
        [::std::mem::offset_of!(ibv_srq_attr, max_sge) - 4usize];
    ["Offset of field: ibv_srq_attr::srq_limit"]
        [::std::mem::offset_of!(ibv_srq_attr, srq_limit) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_srq_init_attr {
    pub srq_context: *mut ::std::os::raw::c_void,
    pub attr: ibv_srq_attr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_srq_init_attr"][::std::mem::size_of::<ibv_srq_init_attr>() - 24usize];
    ["Alignment of ibv_srq_init_attr"][::std::mem::align_of::<ibv_srq_init_attr>() - 8usize];
    ["Offset of field: ibv_srq_init_attr::srq_context"]
        [::std::mem::offset_of!(ibv_srq_init_attr, srq_context) - 0usize];
    ["Offset of field: ibv_srq_init_attr::attr"]
        [::std::mem::offset_of!(ibv_srq_init_attr, attr) - 8usize];
};
impl Default for ibv_srq_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_SRQT_BASIC: ibv_srq_type = 0;
pub const IBV_SRQT_XRC: ibv_srq_type = 1;
pub const IBV_SRQT_TM: ibv_srq_type = 2;
pub type ibv_srq_type = ::std::os::raw::c_uint;
pub const IBV_SRQ_INIT_ATTR_TYPE: ibv_srq_init_attr_mask = 1;
pub const IBV_SRQ_INIT_ATTR_PD: ibv_srq_init_attr_mask = 2;
pub const IBV_SRQ_INIT_ATTR_XRCD: ibv_srq_init_attr_mask = 4;
pub const IBV_SRQ_INIT_ATTR_CQ: ibv_srq_init_attr_mask = 8;
pub const IBV_SRQ_INIT_ATTR_TM: ibv_srq_init_attr_mask = 16;
pub const IBV_SRQ_INIT_ATTR_RESERVED: ibv_srq_init_attr_mask = 32;
pub type ibv_srq_init_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_tm_cap {
    pub max_num_tags: u32,
    pub max_ops: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_tm_cap"][::std::mem::size_of::<ibv_tm_cap>() - 8usize];
    ["Alignment of ibv_tm_cap"][::std::mem::align_of::<ibv_tm_cap>() - 4usize];
    ["Offset of field: ibv_tm_cap::max_num_tags"]
        [::std::mem::offset_of!(ibv_tm_cap, max_num_tags) - 0usize];
    ["Offset of field: ibv_tm_cap::max_ops"][::std::mem::offset_of!(ibv_tm_cap, max_ops) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_srq_init_attr_ex {
    pub srq_context: *mut ::std::os::raw::c_void,
    pub attr: ibv_srq_attr,
    pub comp_mask: u32,
    pub srq_type: ibv_srq_type,
    pub pd: *mut ibv_pd,
    pub xrcd: *mut ibv_xrcd,
    pub cq: *mut ibv_cq,
    pub tm_cap: ibv_tm_cap,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_srq_init_attr_ex"][::std::mem::size_of::<ibv_srq_init_attr_ex>() - 64usize];
    ["Alignment of ibv_srq_init_attr_ex"][::std::mem::align_of::<ibv_srq_init_attr_ex>() - 8usize];
    ["Offset of field: ibv_srq_init_attr_ex::srq_context"]
        [::std::mem::offset_of!(ibv_srq_init_attr_ex, srq_context) - 0usize];
    ["Offset of field: ibv_srq_init_attr_ex::attr"]
        [::std::mem::offset_of!(ibv_srq_init_attr_ex, attr) - 8usize];
    ["Offset of field: ibv_srq_init_attr_ex::comp_mask"]
        [::std::mem::offset_of!(ibv_srq_init_attr_ex, comp_mask) - 20usize];
    ["Offset of field: ibv_srq_init_attr_ex::srq_type"]
        [::std::mem::offset_of!(ibv_srq_init_attr_ex, srq_type) - 24usize];
    ["Offset of field: ibv_srq_init_attr_ex::pd"]
        [::std::mem::offset_of!(ibv_srq_init_attr_ex, pd) - 32usize];
    ["Offset of field: ibv_srq_init_attr_ex::xrcd"]
        [::std::mem::offset_of!(ibv_srq_init_attr_ex, xrcd) - 40usize];
    ["Offset of field: ibv_srq_init_attr_ex::cq"]
        [::std::mem::offset_of!(ibv_srq_init_attr_ex, cq) - 48usize];
    ["Offset of field: ibv_srq_init_attr_ex::tm_cap"]
        [::std::mem::offset_of!(ibv_srq_init_attr_ex, tm_cap) - 56usize];
};
impl Default for ibv_srq_init_attr_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_WQT_RQ: ibv_wq_type = 0;
pub type ibv_wq_type = ::std::os::raw::c_uint;
pub const IBV_WQ_INIT_ATTR_FLAGS: ibv_wq_init_attr_mask = 1;
pub const IBV_WQ_INIT_ATTR_RESERVED: ibv_wq_init_attr_mask = 2;
pub type ibv_wq_init_attr_mask = ::std::os::raw::c_uint;
pub const IBV_WQ_FLAGS_CVLAN_STRIPPING: ibv_wq_flags = 1;
pub const IBV_WQ_FLAGS_SCATTER_FCS: ibv_wq_flags = 2;
pub const IBV_WQ_FLAGS_DELAY_DROP: ibv_wq_flags = 4;
pub const IBV_WQ_FLAGS_PCI_WRITE_END_PADDING: ibv_wq_flags = 8;
pub const IBV_WQ_FLAGS_RESERVED: ibv_wq_flags = 16;
pub type ibv_wq_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_wq_init_attr {
    pub wq_context: *mut ::std::os::raw::c_void,
    pub wq_type: ibv_wq_type,
    pub max_wr: u32,
    pub max_sge: u32,
    pub pd: *mut ibv_pd,
    pub cq: *mut ibv_cq,
    pub comp_mask: u32,
    pub create_flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_wq_init_attr"][::std::mem::size_of::<ibv_wq_init_attr>() - 48usize];
    ["Alignment of ibv_wq_init_attr"][::std::mem::align_of::<ibv_wq_init_attr>() - 8usize];
    ["Offset of field: ibv_wq_init_attr::wq_context"]
        [::std::mem::offset_of!(ibv_wq_init_attr, wq_context) - 0usize];
    ["Offset of field: ibv_wq_init_attr::wq_type"]
        [::std::mem::offset_of!(ibv_wq_init_attr, wq_type) - 8usize];
    ["Offset of field: ibv_wq_init_attr::max_wr"]
        [::std::mem::offset_of!(ibv_wq_init_attr, max_wr) - 12usize];
    ["Offset of field: ibv_wq_init_attr::max_sge"]
        [::std::mem::offset_of!(ibv_wq_init_attr, max_sge) - 16usize];
    ["Offset of field: ibv_wq_init_attr::pd"]
        [::std::mem::offset_of!(ibv_wq_init_attr, pd) - 24usize];
    ["Offset of field: ibv_wq_init_attr::cq"]
        [::std::mem::offset_of!(ibv_wq_init_attr, cq) - 32usize];
    ["Offset of field: ibv_wq_init_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_wq_init_attr, comp_mask) - 40usize];
    ["Offset of field: ibv_wq_init_attr::create_flags"]
        [::std::mem::offset_of!(ibv_wq_init_attr, create_flags) - 44usize];
};
impl Default for ibv_wq_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_WQS_RESET: ibv_wq_state = 0;
pub const IBV_WQS_RDY: ibv_wq_state = 1;
pub const IBV_WQS_ERR: ibv_wq_state = 2;
pub const IBV_WQS_UNKNOWN: ibv_wq_state = 3;
pub type ibv_wq_state = ::std::os::raw::c_uint;
pub const IBV_WQ_ATTR_STATE: ibv_wq_attr_mask = 1;
pub const IBV_WQ_ATTR_CURR_STATE: ibv_wq_attr_mask = 2;
pub const IBV_WQ_ATTR_FLAGS: ibv_wq_attr_mask = 4;
pub const IBV_WQ_ATTR_RESERVED: ibv_wq_attr_mask = 8;
pub type ibv_wq_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_wq_attr {
    pub attr_mask: u32,
    pub wq_state: ibv_wq_state,
    pub curr_wq_state: ibv_wq_state,
    pub flags: u32,
    pub flags_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_wq_attr"][::std::mem::size_of::<ibv_wq_attr>() - 20usize];
    ["Alignment of ibv_wq_attr"][::std::mem::align_of::<ibv_wq_attr>() - 4usize];
    ["Offset of field: ibv_wq_attr::attr_mask"]
        [::std::mem::offset_of!(ibv_wq_attr, attr_mask) - 0usize];
    ["Offset of field: ibv_wq_attr::wq_state"]
        [::std::mem::offset_of!(ibv_wq_attr, wq_state) - 4usize];
    ["Offset of field: ibv_wq_attr::curr_wq_state"]
        [::std::mem::offset_of!(ibv_wq_attr, curr_wq_state) - 8usize];
    ["Offset of field: ibv_wq_attr::flags"][::std::mem::offset_of!(ibv_wq_attr, flags) - 12usize];
    ["Offset of field: ibv_wq_attr::flags_mask"]
        [::std::mem::offset_of!(ibv_wq_attr, flags_mask) - 16usize];
};
impl Default for ibv_wq_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_rwq_ind_table {
    pub context: *mut ibv_context,
    pub ind_tbl_handle: ::std::os::raw::c_int,
    pub ind_tbl_num: ::std::os::raw::c_int,
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_rwq_ind_table"][::std::mem::size_of::<ibv_rwq_ind_table>() - 24usize];
    ["Alignment of ibv_rwq_ind_table"][::std::mem::align_of::<ibv_rwq_ind_table>() - 8usize];
    ["Offset of field: ibv_rwq_ind_table::context"]
        [::std::mem::offset_of!(ibv_rwq_ind_table, context) - 0usize];
    ["Offset of field: ibv_rwq_ind_table::ind_tbl_handle"]
        [::std::mem::offset_of!(ibv_rwq_ind_table, ind_tbl_handle) - 8usize];
    ["Offset of field: ibv_rwq_ind_table::ind_tbl_num"]
        [::std::mem::offset_of!(ibv_rwq_ind_table, ind_tbl_num) - 12usize];
    ["Offset of field: ibv_rwq_ind_table::comp_mask"]
        [::std::mem::offset_of!(ibv_rwq_ind_table, comp_mask) - 16usize];
};
impl Default for ibv_rwq_ind_table {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_CREATE_IND_TABLE_RESERVED: ibv_ind_table_init_attr_mask = 1;
pub type ibv_ind_table_init_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_rwq_ind_table_init_attr {
    pub log_ind_tbl_size: u32,
    pub ind_tbl: *mut *mut ibv_wq,
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_rwq_ind_table_init_attr"]
        [::std::mem::size_of::<ibv_rwq_ind_table_init_attr>() - 24usize];
    ["Alignment of ibv_rwq_ind_table_init_attr"]
        [::std::mem::align_of::<ibv_rwq_ind_table_init_attr>() - 8usize];
    ["Offset of field: ibv_rwq_ind_table_init_attr::log_ind_tbl_size"]
        [::std::mem::offset_of!(ibv_rwq_ind_table_init_attr, log_ind_tbl_size) - 0usize];
    ["Offset of field: ibv_rwq_ind_table_init_attr::ind_tbl"]
        [::std::mem::offset_of!(ibv_rwq_ind_table_init_attr, ind_tbl) - 8usize];
    ["Offset of field: ibv_rwq_ind_table_init_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_rwq_ind_table_init_attr, comp_mask) - 16usize];
};
impl Default for ibv_rwq_ind_table_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub mod ibv_qp_type {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_QPT_RC: Type = 2;
    pub const IBV_QPT_UC: Type = 3;
    pub const IBV_QPT_UD: Type = 4;
    pub const IBV_QPT_RAW_PACKET: Type = 8;
    pub const IBV_QPT_XRC_SEND: Type = 9;
    pub const IBV_QPT_XRC_RECV: Type = 10;
    pub const IBV_QPT_DRIVER: Type = 255;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_qp_cap {
    pub max_send_wr: u32,
    pub max_recv_wr: u32,
    pub max_send_sge: u32,
    pub max_recv_sge: u32,
    pub max_inline_data: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_qp_cap"][::std::mem::size_of::<ibv_qp_cap>() - 20usize];
    ["Alignment of ibv_qp_cap"][::std::mem::align_of::<ibv_qp_cap>() - 4usize];
    ["Offset of field: ibv_qp_cap::max_send_wr"]
        [::std::mem::offset_of!(ibv_qp_cap, max_send_wr) - 0usize];
    ["Offset of field: ibv_qp_cap::max_recv_wr"]
        [::std::mem::offset_of!(ibv_qp_cap, max_recv_wr) - 4usize];
    ["Offset of field: ibv_qp_cap::max_send_sge"]
        [::std::mem::offset_of!(ibv_qp_cap, max_send_sge) - 8usize];
    ["Offset of field: ibv_qp_cap::max_recv_sge"]
        [::std::mem::offset_of!(ibv_qp_cap, max_recv_sge) - 12usize];
    ["Offset of field: ibv_qp_cap::max_inline_data"]
        [::std::mem::offset_of!(ibv_qp_cap, max_inline_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_qp_init_attr {
    pub qp_context: *mut ::std::os::raw::c_void,
    pub send_cq: *mut ibv_cq,
    pub recv_cq: *mut ibv_cq,
    pub srq: *mut ibv_srq,
    pub cap: ibv_qp_cap,
    pub qp_type: ibv_qp_type::Type,
    pub sq_sig_all: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_qp_init_attr"][::std::mem::size_of::<ibv_qp_init_attr>() - 64usize];
    ["Alignment of ibv_qp_init_attr"][::std::mem::align_of::<ibv_qp_init_attr>() - 8usize];
    ["Offset of field: ibv_qp_init_attr::qp_context"]
        [::std::mem::offset_of!(ibv_qp_init_attr, qp_context) - 0usize];
    ["Offset of field: ibv_qp_init_attr::send_cq"]
        [::std::mem::offset_of!(ibv_qp_init_attr, send_cq) - 8usize];
    ["Offset of field: ibv_qp_init_attr::recv_cq"]
        [::std::mem::offset_of!(ibv_qp_init_attr, recv_cq) - 16usize];
    ["Offset of field: ibv_qp_init_attr::srq"]
        [::std::mem::offset_of!(ibv_qp_init_attr, srq) - 24usize];
    ["Offset of field: ibv_qp_init_attr::cap"]
        [::std::mem::offset_of!(ibv_qp_init_attr, cap) - 32usize];
    ["Offset of field: ibv_qp_init_attr::qp_type"]
        [::std::mem::offset_of!(ibv_qp_init_attr, qp_type) - 52usize];
    ["Offset of field: ibv_qp_init_attr::sq_sig_all"]
        [::std::mem::offset_of!(ibv_qp_init_attr, sq_sig_all) - 56usize];
};
impl Default for ibv_qp_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_QP_INIT_ATTR_PD: ibv_qp_init_attr_mask = 1;
pub const IBV_QP_INIT_ATTR_XRCD: ibv_qp_init_attr_mask = 2;
pub const IBV_QP_INIT_ATTR_CREATE_FLAGS: ibv_qp_init_attr_mask = 4;
pub const IBV_QP_INIT_ATTR_MAX_TSO_HEADER: ibv_qp_init_attr_mask = 8;
pub const IBV_QP_INIT_ATTR_IND_TABLE: ibv_qp_init_attr_mask = 16;
pub const IBV_QP_INIT_ATTR_RX_HASH: ibv_qp_init_attr_mask = 32;
pub const IBV_QP_INIT_ATTR_SEND_OPS_FLAGS: ibv_qp_init_attr_mask = 64;
pub type ibv_qp_init_attr_mask = ::std::os::raw::c_uint;
pub const IBV_QP_CREATE_BLOCK_SELF_MCAST_LB: ibv_qp_create_flags = 2;
pub const IBV_QP_CREATE_SCATTER_FCS: ibv_qp_create_flags = 256;
pub const IBV_QP_CREATE_CVLAN_STRIPPING: ibv_qp_create_flags = 512;
pub const IBV_QP_CREATE_SOURCE_QPN: ibv_qp_create_flags = 1024;
pub const IBV_QP_CREATE_PCI_WRITE_END_PADDING: ibv_qp_create_flags = 2048;
pub type ibv_qp_create_flags = ::std::os::raw::c_uint;
pub const IBV_QP_EX_WITH_RDMA_WRITE: ibv_qp_create_send_ops_flags = 1;
pub const IBV_QP_EX_WITH_RDMA_WRITE_WITH_IMM: ibv_qp_create_send_ops_flags = 2;
pub const IBV_QP_EX_WITH_SEND: ibv_qp_create_send_ops_flags = 4;
pub const IBV_QP_EX_WITH_SEND_WITH_IMM: ibv_qp_create_send_ops_flags = 8;
pub const IBV_QP_EX_WITH_RDMA_READ: ibv_qp_create_send_ops_flags = 16;
pub const IBV_QP_EX_WITH_ATOMIC_CMP_AND_SWP: ibv_qp_create_send_ops_flags = 32;
pub const IBV_QP_EX_WITH_ATOMIC_FETCH_AND_ADD: ibv_qp_create_send_ops_flags = 64;
pub const IBV_QP_EX_WITH_LOCAL_INV: ibv_qp_create_send_ops_flags = 128;
pub const IBV_QP_EX_WITH_BIND_MW: ibv_qp_create_send_ops_flags = 256;
pub const IBV_QP_EX_WITH_SEND_WITH_INV: ibv_qp_create_send_ops_flags = 512;
pub const IBV_QP_EX_WITH_TSO: ibv_qp_create_send_ops_flags = 1024;
pub const IBV_QP_EX_WITH_FLUSH: ibv_qp_create_send_ops_flags = 2048;
pub const IBV_QP_EX_WITH_ATOMIC_WRITE: ibv_qp_create_send_ops_flags = 4096;
pub type ibv_qp_create_send_ops_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_rx_hash_conf {
    pub rx_hash_function: u8,
    pub rx_hash_key_len: u8,
    pub rx_hash_key: *mut u8,
    pub rx_hash_fields_mask: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_rx_hash_conf"][::std::mem::size_of::<ibv_rx_hash_conf>() - 24usize];
    ["Alignment of ibv_rx_hash_conf"][::std::mem::align_of::<ibv_rx_hash_conf>() - 8usize];
    ["Offset of field: ibv_rx_hash_conf::rx_hash_function"]
        [::std::mem::offset_of!(ibv_rx_hash_conf, rx_hash_function) - 0usize];
    ["Offset of field: ibv_rx_hash_conf::rx_hash_key_len"]
        [::std::mem::offset_of!(ibv_rx_hash_conf, rx_hash_key_len) - 1usize];
    ["Offset of field: ibv_rx_hash_conf::rx_hash_key"]
        [::std::mem::offset_of!(ibv_rx_hash_conf, rx_hash_key) - 8usize];
    ["Offset of field: ibv_rx_hash_conf::rx_hash_fields_mask"]
        [::std::mem::offset_of!(ibv_rx_hash_conf, rx_hash_fields_mask) - 16usize];
};
impl Default for ibv_rx_hash_conf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_qp_init_attr_ex {
    pub qp_context: *mut ::std::os::raw::c_void,
    pub send_cq: *mut ibv_cq,
    pub recv_cq: *mut ibv_cq,
    pub srq: *mut ibv_srq,
    pub cap: ibv_qp_cap,
    pub qp_type: ibv_qp_type::Type,
    pub sq_sig_all: ::std::os::raw::c_int,
    pub comp_mask: u32,
    pub pd: *mut ibv_pd,
    pub xrcd: *mut ibv_xrcd,
    pub create_flags: u32,
    pub max_tso_header: u16,
    pub rwq_ind_tbl: *mut ibv_rwq_ind_table,
    pub rx_hash_conf: ibv_rx_hash_conf,
    pub source_qpn: u32,
    pub send_ops_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_qp_init_attr_ex"][::std::mem::size_of::<ibv_qp_init_attr_ex>() - 136usize];
    ["Alignment of ibv_qp_init_attr_ex"][::std::mem::align_of::<ibv_qp_init_attr_ex>() - 8usize];
    ["Offset of field: ibv_qp_init_attr_ex::qp_context"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, qp_context) - 0usize];
    ["Offset of field: ibv_qp_init_attr_ex::send_cq"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, send_cq) - 8usize];
    ["Offset of field: ibv_qp_init_attr_ex::recv_cq"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, recv_cq) - 16usize];
    ["Offset of field: ibv_qp_init_attr_ex::srq"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, srq) - 24usize];
    ["Offset of field: ibv_qp_init_attr_ex::cap"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, cap) - 32usize];
    ["Offset of field: ibv_qp_init_attr_ex::qp_type"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, qp_type) - 52usize];
    ["Offset of field: ibv_qp_init_attr_ex::sq_sig_all"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, sq_sig_all) - 56usize];
    ["Offset of field: ibv_qp_init_attr_ex::comp_mask"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, comp_mask) - 60usize];
    ["Offset of field: ibv_qp_init_attr_ex::pd"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, pd) - 64usize];
    ["Offset of field: ibv_qp_init_attr_ex::xrcd"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, xrcd) - 72usize];
    ["Offset of field: ibv_qp_init_attr_ex::create_flags"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, create_flags) - 80usize];
    ["Offset of field: ibv_qp_init_attr_ex::max_tso_header"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, max_tso_header) - 84usize];
    ["Offset of field: ibv_qp_init_attr_ex::rwq_ind_tbl"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, rwq_ind_tbl) - 88usize];
    ["Offset of field: ibv_qp_init_attr_ex::rx_hash_conf"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, rx_hash_conf) - 96usize];
    ["Offset of field: ibv_qp_init_attr_ex::source_qpn"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, source_qpn) - 120usize];
    ["Offset of field: ibv_qp_init_attr_ex::send_ops_flags"]
        [::std::mem::offset_of!(ibv_qp_init_attr_ex, send_ops_flags) - 128usize];
};
impl Default for ibv_qp_init_attr_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_QP_OPEN_ATTR_NUM: ibv_qp_open_attr_mask = 1;
pub const IBV_QP_OPEN_ATTR_XRCD: ibv_qp_open_attr_mask = 2;
pub const IBV_QP_OPEN_ATTR_CONTEXT: ibv_qp_open_attr_mask = 4;
pub const IBV_QP_OPEN_ATTR_TYPE: ibv_qp_open_attr_mask = 8;
pub const IBV_QP_OPEN_ATTR_RESERVED: ibv_qp_open_attr_mask = 16;
pub type ibv_qp_open_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_qp_open_attr {
    pub comp_mask: u32,
    pub qp_num: u32,
    pub xrcd: *mut ibv_xrcd,
    pub qp_context: *mut ::std::os::raw::c_void,
    pub qp_type: ibv_qp_type::Type,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_qp_open_attr"][::std::mem::size_of::<ibv_qp_open_attr>() - 32usize];
    ["Alignment of ibv_qp_open_attr"][::std::mem::align_of::<ibv_qp_open_attr>() - 8usize];
    ["Offset of field: ibv_qp_open_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_qp_open_attr, comp_mask) - 0usize];
    ["Offset of field: ibv_qp_open_attr::qp_num"]
        [::std::mem::offset_of!(ibv_qp_open_attr, qp_num) - 4usize];
    ["Offset of field: ibv_qp_open_attr::xrcd"]
        [::std::mem::offset_of!(ibv_qp_open_attr, xrcd) - 8usize];
    ["Offset of field: ibv_qp_open_attr::qp_context"]
        [::std::mem::offset_of!(ibv_qp_open_attr, qp_context) - 16usize];
    ["Offset of field: ibv_qp_open_attr::qp_type"]
        [::std::mem::offset_of!(ibv_qp_open_attr, qp_type) - 24usize];
};
impl Default for ibv_qp_open_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_STATE: ibv_qp_attr_mask = ibv_qp_attr_mask(1);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_CUR_STATE: ibv_qp_attr_mask = ibv_qp_attr_mask(2);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_EN_SQD_ASYNC_NOTIFY: ibv_qp_attr_mask = ibv_qp_attr_mask(4);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_ACCESS_FLAGS: ibv_qp_attr_mask = ibv_qp_attr_mask(8);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_PKEY_INDEX: ibv_qp_attr_mask = ibv_qp_attr_mask(16);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_PORT: ibv_qp_attr_mask = ibv_qp_attr_mask(32);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_QKEY: ibv_qp_attr_mask = ibv_qp_attr_mask(64);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_AV: ibv_qp_attr_mask = ibv_qp_attr_mask(128);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_PATH_MTU: ibv_qp_attr_mask = ibv_qp_attr_mask(256);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_TIMEOUT: ibv_qp_attr_mask = ibv_qp_attr_mask(512);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_RETRY_CNT: ibv_qp_attr_mask = ibv_qp_attr_mask(1024);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_RNR_RETRY: ibv_qp_attr_mask = ibv_qp_attr_mask(2048);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_RQ_PSN: ibv_qp_attr_mask = ibv_qp_attr_mask(4096);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_MAX_QP_RD_ATOMIC: ibv_qp_attr_mask = ibv_qp_attr_mask(8192);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_ALT_PATH: ibv_qp_attr_mask = ibv_qp_attr_mask(16384);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_MIN_RNR_TIMER: ibv_qp_attr_mask = ibv_qp_attr_mask(32768);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_SQ_PSN: ibv_qp_attr_mask = ibv_qp_attr_mask(65536);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_MAX_DEST_RD_ATOMIC: ibv_qp_attr_mask = ibv_qp_attr_mask(131072);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_PATH_MIG_STATE: ibv_qp_attr_mask = ibv_qp_attr_mask(262144);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_CAP: ibv_qp_attr_mask = ibv_qp_attr_mask(524288);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_DEST_QPN: ibv_qp_attr_mask = ibv_qp_attr_mask(1048576);
}
impl ibv_qp_attr_mask {
    pub const IBV_QP_RATE_LIMIT: ibv_qp_attr_mask = ibv_qp_attr_mask(33554432);
}
impl ::std::ops::BitOr<ibv_qp_attr_mask> for ibv_qp_attr_mask {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_qp_attr_mask(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_qp_attr_mask {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_qp_attr_mask) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_qp_attr_mask> for ibv_qp_attr_mask {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_qp_attr_mask(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_qp_attr_mask {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_qp_attr_mask) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_qp_attr_mask(pub ::std::os::raw::c_uint);
pub const IBV_QUERY_QP_DATA_IN_ORDER_RETURN_CAPS: ibv_query_qp_data_in_order_flags = 1;
pub type ibv_query_qp_data_in_order_flags = ::std::os::raw::c_uint;
pub const IBV_QUERY_QP_DATA_IN_ORDER_WHOLE_MSG: ibv_query_qp_data_in_order_caps = 1;
pub const IBV_QUERY_QP_DATA_IN_ORDER_ALIGNED_128_BYTES: ibv_query_qp_data_in_order_caps = 2;
pub type ibv_query_qp_data_in_order_caps = ::std::os::raw::c_uint;
pub mod ibv_qp_state {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_QPS_RESET: Type = 0;
    pub const IBV_QPS_INIT: Type = 1;
    pub const IBV_QPS_RTR: Type = 2;
    pub const IBV_QPS_RTS: Type = 3;
    pub const IBV_QPS_SQD: Type = 4;
    pub const IBV_QPS_SQE: Type = 5;
    pub const IBV_QPS_ERR: Type = 6;
    pub const IBV_QPS_UNKNOWN: Type = 7;
}
pub const IBV_MIG_MIGRATED: ibv_mig_state = 0;
pub const IBV_MIG_REARM: ibv_mig_state = 1;
pub const IBV_MIG_ARMED: ibv_mig_state = 2;
pub type ibv_mig_state = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_qp_attr {
    pub qp_state: ibv_qp_state::Type,
    pub cur_qp_state: ibv_qp_state::Type,
    pub path_mtu: ibv_mtu,
    pub path_mig_state: ibv_mig_state,
    pub qkey: u32,
    pub rq_psn: u32,
    pub sq_psn: u32,
    pub dest_qp_num: u32,
    pub qp_access_flags: ::std::os::raw::c_uint,
    pub cap: ibv_qp_cap,
    pub ah_attr: ibv_ah_attr,
    pub alt_ah_attr: ibv_ah_attr,
    pub pkey_index: u16,
    pub alt_pkey_index: u16,
    pub en_sqd_async_notify: u8,
    pub sq_draining: u8,
    pub max_rd_atomic: u8,
    pub max_dest_rd_atomic: u8,
    pub min_rnr_timer: u8,
    pub port_num: u8,
    pub timeout: u8,
    pub retry_cnt: u8,
    pub rnr_retry: u8,
    pub alt_port_num: u8,
    pub alt_timeout: u8,
    pub rate_limit: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_qp_attr"][::std::mem::size_of::<ibv_qp_attr>() - 144usize];
    ["Alignment of ibv_qp_attr"][::std::mem::align_of::<ibv_qp_attr>() - 8usize];
    ["Offset of field: ibv_qp_attr::qp_state"]
        [::std::mem::offset_of!(ibv_qp_attr, qp_state) - 0usize];
    ["Offset of field: ibv_qp_attr::cur_qp_state"]
        [::std::mem::offset_of!(ibv_qp_attr, cur_qp_state) - 4usize];
    ["Offset of field: ibv_qp_attr::path_mtu"]
        [::std::mem::offset_of!(ibv_qp_attr, path_mtu) - 8usize];
    ["Offset of field: ibv_qp_attr::path_mig_state"]
        [::std::mem::offset_of!(ibv_qp_attr, path_mig_state) - 12usize];
    ["Offset of field: ibv_qp_attr::qkey"][::std::mem::offset_of!(ibv_qp_attr, qkey) - 16usize];
    ["Offset of field: ibv_qp_attr::rq_psn"][::std::mem::offset_of!(ibv_qp_attr, rq_psn) - 20usize];
    ["Offset of field: ibv_qp_attr::sq_psn"][::std::mem::offset_of!(ibv_qp_attr, sq_psn) - 24usize];
    ["Offset of field: ibv_qp_attr::dest_qp_num"]
        [::std::mem::offset_of!(ibv_qp_attr, dest_qp_num) - 28usize];
    ["Offset of field: ibv_qp_attr::qp_access_flags"]
        [::std::mem::offset_of!(ibv_qp_attr, qp_access_flags) - 32usize];
    ["Offset of field: ibv_qp_attr::cap"][::std::mem::offset_of!(ibv_qp_attr, cap) - 36usize];
    ["Offset of field: ibv_qp_attr::ah_attr"]
        [::std::mem::offset_of!(ibv_qp_attr, ah_attr) - 56usize];
    ["Offset of field: ibv_qp_attr::alt_ah_attr"]
        [::std::mem::offset_of!(ibv_qp_attr, alt_ah_attr) - 88usize];
    ["Offset of field: ibv_qp_attr::pkey_index"]
        [::std::mem::offset_of!(ibv_qp_attr, pkey_index) - 120usize];
    ["Offset of field: ibv_qp_attr::alt_pkey_index"]
        [::std::mem::offset_of!(ibv_qp_attr, alt_pkey_index) - 122usize];
    ["Offset of field: ibv_qp_attr::en_sqd_async_notify"]
        [::std::mem::offset_of!(ibv_qp_attr, en_sqd_async_notify) - 124usize];
    ["Offset of field: ibv_qp_attr::sq_draining"]
        [::std::mem::offset_of!(ibv_qp_attr, sq_draining) - 125usize];
    ["Offset of field: ibv_qp_attr::max_rd_atomic"]
        [::std::mem::offset_of!(ibv_qp_attr, max_rd_atomic) - 126usize];
    ["Offset of field: ibv_qp_attr::max_dest_rd_atomic"]
        [::std::mem::offset_of!(ibv_qp_attr, max_dest_rd_atomic) - 127usize];
    ["Offset of field: ibv_qp_attr::min_rnr_timer"]
        [::std::mem::offset_of!(ibv_qp_attr, min_rnr_timer) - 128usize];
    ["Offset of field: ibv_qp_attr::port_num"]
        [::std::mem::offset_of!(ibv_qp_attr, port_num) - 129usize];
    ["Offset of field: ibv_qp_attr::timeout"]
        [::std::mem::offset_of!(ibv_qp_attr, timeout) - 130usize];
    ["Offset of field: ibv_qp_attr::retry_cnt"]
        [::std::mem::offset_of!(ibv_qp_attr, retry_cnt) - 131usize];
    ["Offset of field: ibv_qp_attr::rnr_retry"]
        [::std::mem::offset_of!(ibv_qp_attr, rnr_retry) - 132usize];
    ["Offset of field: ibv_qp_attr::alt_port_num"]
        [::std::mem::offset_of!(ibv_qp_attr, alt_port_num) - 133usize];
    ["Offset of field: ibv_qp_attr::alt_timeout"]
        [::std::mem::offset_of!(ibv_qp_attr, alt_timeout) - 134usize];
    ["Offset of field: ibv_qp_attr::rate_limit"]
        [::std::mem::offset_of!(ibv_qp_attr, rate_limit) - 136usize];
};
impl Default for ibv_qp_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_qp_rate_limit_attr {
    pub rate_limit: u32,
    pub max_burst_sz: u32,
    pub typical_pkt_sz: u16,
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_qp_rate_limit_attr"][::std::mem::size_of::<ibv_qp_rate_limit_attr>() - 16usize];
    ["Alignment of ibv_qp_rate_limit_attr"]
        [::std::mem::align_of::<ibv_qp_rate_limit_attr>() - 4usize];
    ["Offset of field: ibv_qp_rate_limit_attr::rate_limit"]
        [::std::mem::offset_of!(ibv_qp_rate_limit_attr, rate_limit) - 0usize];
    ["Offset of field: ibv_qp_rate_limit_attr::max_burst_sz"]
        [::std::mem::offset_of!(ibv_qp_rate_limit_attr, max_burst_sz) - 4usize];
    ["Offset of field: ibv_qp_rate_limit_attr::typical_pkt_sz"]
        [::std::mem::offset_of!(ibv_qp_rate_limit_attr, typical_pkt_sz) - 8usize];
    ["Offset of field: ibv_qp_rate_limit_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_qp_rate_limit_attr, comp_mask) - 12usize];
};
pub mod ibv_wr_opcode {
    pub type Type = ::std::os::raw::c_uint;
    pub const IBV_WR_RDMA_WRITE: Type = 0;
    pub const IBV_WR_RDMA_WRITE_WITH_IMM: Type = 1;
    pub const IBV_WR_SEND: Type = 2;
    pub const IBV_WR_SEND_WITH_IMM: Type = 3;
    pub const IBV_WR_RDMA_READ: Type = 4;
    pub const IBV_WR_ATOMIC_CMP_AND_SWP: Type = 5;
    pub const IBV_WR_ATOMIC_FETCH_AND_ADD: Type = 6;
    pub const IBV_WR_LOCAL_INV: Type = 7;
    pub const IBV_WR_BIND_MW: Type = 8;
    pub const IBV_WR_SEND_WITH_INV: Type = 9;
    pub const IBV_WR_TSO: Type = 10;
    pub const IBV_WR_DRIVER1: Type = 11;
    pub const IBV_WR_FLUSH: Type = 14;
    pub const IBV_WR_ATOMIC_WRITE: Type = 15;
}
extern "C" {
    pub fn ibv_wr_opcode_str(opcode: ibv_wr_opcode::Type) -> *const ::std::os::raw::c_char;
}
impl ibv_send_flags {
    pub const IBV_SEND_FENCE: ibv_send_flags = ibv_send_flags(1);
}
impl ibv_send_flags {
    pub const IBV_SEND_SIGNALED: ibv_send_flags = ibv_send_flags(2);
}
impl ibv_send_flags {
    pub const IBV_SEND_SOLICITED: ibv_send_flags = ibv_send_flags(4);
}
impl ibv_send_flags {
    pub const IBV_SEND_INLINE: ibv_send_flags = ibv_send_flags(8);
}
impl ibv_send_flags {
    pub const IBV_SEND_IP_CSUM: ibv_send_flags = ibv_send_flags(16);
}
impl ::std::ops::BitOr<ibv_send_flags> for ibv_send_flags {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ibv_send_flags(self.0 | other.0)
    }
}
impl ::std::ops::BitOrAssign for ibv_send_flags {
    #[inline]
    fn bitor_assign(&mut self, rhs: ibv_send_flags) {
        self.0 |= rhs.0;
    }
}
impl ::std::ops::BitAnd<ibv_send_flags> for ibv_send_flags {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ibv_send_flags(self.0 & other.0)
    }
}
impl ::std::ops::BitAndAssign for ibv_send_flags {
    #[inline]
    fn bitand_assign(&mut self, rhs: ibv_send_flags) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ibv_send_flags(pub ::std::os::raw::c_uint);
pub const IBV_FLUSH_GLOBAL: ibv_placement_type = 1;
pub const IBV_FLUSH_PERSISTENT: ibv_placement_type = 2;
pub type ibv_placement_type = ::std::os::raw::c_uint;
pub const IBV_FLUSH_RANGE: ibv_selectivity_level = 0;
pub const IBV_FLUSH_MR: ibv_selectivity_level = 1;
pub type ibv_selectivity_level = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_data_buf {
    pub addr: *mut ::std::os::raw::c_void,
    pub length: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_data_buf"][::std::mem::size_of::<ibv_data_buf>() - 16usize];
    ["Alignment of ibv_data_buf"][::std::mem::align_of::<ibv_data_buf>() - 8usize];
    ["Offset of field: ibv_data_buf::addr"][::std::mem::offset_of!(ibv_data_buf, addr) - 0usize];
    ["Offset of field: ibv_data_buf::length"]
        [::std::mem::offset_of!(ibv_data_buf, length) - 8usize];
};
impl Default for ibv_data_buf {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_sge {
    pub addr: u64,
    pub length: u32,
    pub lkey: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_sge"][::std::mem::size_of::<ibv_sge>() - 16usize];
    ["Alignment of ibv_sge"][::std::mem::align_of::<ibv_sge>() - 8usize];
    ["Offset of field: ibv_sge::addr"][::std::mem::offset_of!(ibv_sge, addr) - 0usize];
    ["Offset of field: ibv_sge::length"][::std::mem::offset_of!(ibv_sge, length) - 8usize];
    ["Offset of field: ibv_sge::lkey"][::std::mem::offset_of!(ibv_sge, lkey) - 12usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_send_wr {
    pub wr_id: u64,
    pub next: *mut ibv_send_wr,
    pub sg_list: *mut ibv_sge,
    pub num_sge: ::std::os::raw::c_int,
    pub opcode: ibv_wr_opcode::Type,
    pub send_flags: ::std::os::raw::c_uint,
    pub __bindgen_anon_1: ibv_send_wr__bindgen_ty_1,
    pub wr: ibv_send_wr__bindgen_ty_2,
    pub qp_type: ibv_send_wr__bindgen_ty_3,
    pub __bindgen_anon_2: ibv_send_wr__bindgen_ty_4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_send_wr__bindgen_ty_1 {
    pub imm_data: __be32,
    pub invalidate_rkey: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_1>() - 4usize];
    ["Alignment of ibv_send_wr__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_1>() - 4usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_1::imm_data"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_1, imm_data) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_1::invalidate_rkey"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_1, invalidate_rkey) - 0usize];
};
impl Default for ibv_send_wr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_send_wr__bindgen_ty_2 {
    pub rdma: ibv_send_wr__bindgen_ty_2__bindgen_ty_1,
    pub atomic: ibv_send_wr__bindgen_ty_2__bindgen_ty_2,
    pub ud: ibv_send_wr__bindgen_ty_2__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_2__bindgen_ty_1 {
    pub remote_addr: u64,
    pub rkey: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_1>() - 16usize];
    ["Alignment of ibv_send_wr__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_1>() - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_1::remote_addr"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_1, remote_addr) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_1::rkey"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_1, rkey) - 8usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_2__bindgen_ty_2 {
    pub remote_addr: u64,
    pub compare_add: u64,
    pub swap: u64,
    pub rkey: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_2>() - 32usize];
    ["Alignment of ibv_send_wr__bindgen_ty_2__bindgen_ty_2"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_2>() - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_2::remote_addr"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2, remote_addr) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_2::compare_add"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2, compare_add) - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_2::swap"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2, swap) - 16usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_2::rkey"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_2, rkey) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_2__bindgen_ty_3 {
    pub ah: *mut ibv_ah,
    pub remote_qpn: u32,
    pub remote_qkey: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_3>() - 16usize];
    ["Alignment of ibv_send_wr__bindgen_ty_2__bindgen_ty_3"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_2__bindgen_ty_3>() - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_3::ah"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_3, ah) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_3::remote_qpn"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_3, remote_qpn) - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2__bindgen_ty_3::remote_qkey"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2__bindgen_ty_3, remote_qkey) - 12usize];
};
impl Default for ibv_send_wr__bindgen_ty_2__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_2"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_2>() - 32usize];
    ["Alignment of ibv_send_wr__bindgen_ty_2"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_2>() - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2::rdma"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2, rdma) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2::atomic"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2, atomic) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_2::ud"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_2, ud) - 0usize];
};
impl Default for ibv_send_wr__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_send_wr__bindgen_ty_3 {
    pub xrc: ibv_send_wr__bindgen_ty_3__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_3__bindgen_ty_1 {
    pub remote_srqn: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_3__bindgen_ty_1>() - 4usize];
    ["Alignment of ibv_send_wr__bindgen_ty_3__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_3__bindgen_ty_1>() - 4usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_3__bindgen_ty_1::remote_srqn"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_3__bindgen_ty_1, remote_srqn) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_3"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_3>() - 4usize];
    ["Alignment of ibv_send_wr__bindgen_ty_3"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_3>() - 4usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_3::xrc"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_3, xrc) - 0usize];
};
impl Default for ibv_send_wr__bindgen_ty_3 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_send_wr__bindgen_ty_4 {
    pub bind_mw: ibv_send_wr__bindgen_ty_4__bindgen_ty_1,
    pub tso: ibv_send_wr__bindgen_ty_4__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_4__bindgen_ty_1 {
    pub mw: *mut ibv_mw,
    pub rkey: u32,
    pub bind_info: ibv_mw_bind_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_4__bindgen_ty_1>() - 48usize];
    ["Alignment of ibv_send_wr__bindgen_ty_4__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_4__bindgen_ty_1>() - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_4__bindgen_ty_1::mw"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_4__bindgen_ty_1, mw) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_4__bindgen_ty_1::rkey"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_4__bindgen_ty_1, rkey) - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_4__bindgen_ty_1::bind_info"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_4__bindgen_ty_1, bind_info) - 16usize];
};
impl Default for ibv_send_wr__bindgen_ty_4__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_send_wr__bindgen_ty_4__bindgen_ty_2 {
    pub hdr: *mut ::std::os::raw::c_void,
    pub hdr_sz: u16,
    pub mss: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_4__bindgen_ty_2"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_4__bindgen_ty_2>() - 16usize];
    ["Alignment of ibv_send_wr__bindgen_ty_4__bindgen_ty_2"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_4__bindgen_ty_2>() - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_4__bindgen_ty_2::hdr"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_4__bindgen_ty_2, hdr) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_4__bindgen_ty_2::hdr_sz"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_4__bindgen_ty_2, hdr_sz) - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_4__bindgen_ty_2::mss"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_4__bindgen_ty_2, mss) - 10usize];
};
impl Default for ibv_send_wr__bindgen_ty_4__bindgen_ty_2 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr__bindgen_ty_4"]
        [::std::mem::size_of::<ibv_send_wr__bindgen_ty_4>() - 48usize];
    ["Alignment of ibv_send_wr__bindgen_ty_4"]
        [::std::mem::align_of::<ibv_send_wr__bindgen_ty_4>() - 8usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_4::bind_mw"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_4, bind_mw) - 0usize];
    ["Offset of field: ibv_send_wr__bindgen_ty_4::tso"]
        [::std::mem::offset_of!(ibv_send_wr__bindgen_ty_4, tso) - 0usize];
};
impl Default for ibv_send_wr__bindgen_ty_4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_send_wr"][::std::mem::size_of::<ibv_send_wr>() - 128usize];
    ["Alignment of ibv_send_wr"][::std::mem::align_of::<ibv_send_wr>() - 8usize];
    ["Offset of field: ibv_send_wr::wr_id"][::std::mem::offset_of!(ibv_send_wr, wr_id) - 0usize];
    ["Offset of field: ibv_send_wr::next"][::std::mem::offset_of!(ibv_send_wr, next) - 8usize];
    ["Offset of field: ibv_send_wr::sg_list"]
        [::std::mem::offset_of!(ibv_send_wr, sg_list) - 16usize];
    ["Offset of field: ibv_send_wr::num_sge"]
        [::std::mem::offset_of!(ibv_send_wr, num_sge) - 24usize];
    ["Offset of field: ibv_send_wr::opcode"][::std::mem::offset_of!(ibv_send_wr, opcode) - 28usize];
    ["Offset of field: ibv_send_wr::send_flags"]
        [::std::mem::offset_of!(ibv_send_wr, send_flags) - 32usize];
    ["Offset of field: ibv_send_wr::wr"][::std::mem::offset_of!(ibv_send_wr, wr) - 40usize];
    ["Offset of field: ibv_send_wr::qp_type"]
        [::std::mem::offset_of!(ibv_send_wr, qp_type) - 72usize];
};
impl Default for ibv_send_wr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_recv_wr {
    pub wr_id: u64,
    pub next: *mut ibv_recv_wr,
    pub sg_list: *mut ibv_sge,
    pub num_sge: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_recv_wr"][::std::mem::size_of::<ibv_recv_wr>() - 32usize];
    ["Alignment of ibv_recv_wr"][::std::mem::align_of::<ibv_recv_wr>() - 8usize];
    ["Offset of field: ibv_recv_wr::wr_id"][::std::mem::offset_of!(ibv_recv_wr, wr_id) - 0usize];
    ["Offset of field: ibv_recv_wr::next"][::std::mem::offset_of!(ibv_recv_wr, next) - 8usize];
    ["Offset of field: ibv_recv_wr::sg_list"]
        [::std::mem::offset_of!(ibv_recv_wr, sg_list) - 16usize];
    ["Offset of field: ibv_recv_wr::num_sge"]
        [::std::mem::offset_of!(ibv_recv_wr, num_sge) - 24usize];
};
impl Default for ibv_recv_wr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_WR_TAG_ADD: ibv_ops_wr_opcode = 0;
pub const IBV_WR_TAG_DEL: ibv_ops_wr_opcode = 1;
pub const IBV_WR_TAG_SYNC: ibv_ops_wr_opcode = 2;
pub type ibv_ops_wr_opcode = ::std::os::raw::c_uint;
pub const IBV_OPS_SIGNALED: ibv_ops_flags = 1;
pub const IBV_OPS_TM_SYNC: ibv_ops_flags = 2;
pub type ibv_ops_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_ops_wr {
    pub wr_id: u64,
    pub next: *mut ibv_ops_wr,
    pub opcode: ibv_ops_wr_opcode,
    pub flags: ::std::os::raw::c_int,
    pub tm: ibv_ops_wr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_ops_wr__bindgen_ty_1 {
    pub unexpected_cnt: u32,
    pub handle: u32,
    pub add: ibv_ops_wr__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_ops_wr__bindgen_ty_1__bindgen_ty_1 {
    pub recv_wr_id: u64,
    pub sg_list: *mut ibv_sge,
    pub num_sge: ::std::os::raw::c_int,
    pub tag: u64,
    pub mask: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_ops_wr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_ops_wr__bindgen_ty_1__bindgen_ty_1>() - 40usize];
    ["Alignment of ibv_ops_wr__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_ops_wr__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Offset of field: ibv_ops_wr__bindgen_ty_1__bindgen_ty_1::recv_wr_id"]
        [::std::mem::offset_of!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1, recv_wr_id) - 0usize];
    ["Offset of field: ibv_ops_wr__bindgen_ty_1__bindgen_ty_1::sg_list"]
        [::std::mem::offset_of!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1, sg_list) - 8usize];
    ["Offset of field: ibv_ops_wr__bindgen_ty_1__bindgen_ty_1::num_sge"]
        [::std::mem::offset_of!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1, num_sge) - 16usize];
    ["Offset of field: ibv_ops_wr__bindgen_ty_1__bindgen_ty_1::tag"]
        [::std::mem::offset_of!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1, tag) - 24usize];
    ["Offset of field: ibv_ops_wr__bindgen_ty_1__bindgen_ty_1::mask"]
        [::std::mem::offset_of!(ibv_ops_wr__bindgen_ty_1__bindgen_ty_1, mask) - 32usize];
};
impl Default for ibv_ops_wr__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_ops_wr__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_ops_wr__bindgen_ty_1>() - 48usize];
    ["Alignment of ibv_ops_wr__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_ops_wr__bindgen_ty_1>() - 8usize];
    ["Offset of field: ibv_ops_wr__bindgen_ty_1::unexpected_cnt"]
        [::std::mem::offset_of!(ibv_ops_wr__bindgen_ty_1, unexpected_cnt) - 0usize];
    ["Offset of field: ibv_ops_wr__bindgen_ty_1::handle"]
        [::std::mem::offset_of!(ibv_ops_wr__bindgen_ty_1, handle) - 4usize];
    ["Offset of field: ibv_ops_wr__bindgen_ty_1::add"]
        [::std::mem::offset_of!(ibv_ops_wr__bindgen_ty_1, add) - 8usize];
};
impl Default for ibv_ops_wr__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_ops_wr"][::std::mem::size_of::<ibv_ops_wr>() - 72usize];
    ["Alignment of ibv_ops_wr"][::std::mem::align_of::<ibv_ops_wr>() - 8usize];
    ["Offset of field: ibv_ops_wr::wr_id"][::std::mem::offset_of!(ibv_ops_wr, wr_id) - 0usize];
    ["Offset of field: ibv_ops_wr::next"][::std::mem::offset_of!(ibv_ops_wr, next) - 8usize];
    ["Offset of field: ibv_ops_wr::opcode"][::std::mem::offset_of!(ibv_ops_wr, opcode) - 16usize];
    ["Offset of field: ibv_ops_wr::flags"][::std::mem::offset_of!(ibv_ops_wr, flags) - 20usize];
    ["Offset of field: ibv_ops_wr::tm"][::std::mem::offset_of!(ibv_ops_wr, tm) - 24usize];
};
impl Default for ibv_ops_wr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_mw_bind {
    pub wr_id: u64,
    pub send_flags: ::std::os::raw::c_uint,
    pub bind_info: ibv_mw_bind_info,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_mw_bind"][::std::mem::size_of::<ibv_mw_bind>() - 48usize];
    ["Alignment of ibv_mw_bind"][::std::mem::align_of::<ibv_mw_bind>() - 8usize];
    ["Offset of field: ibv_mw_bind::wr_id"][::std::mem::offset_of!(ibv_mw_bind, wr_id) - 0usize];
    ["Offset of field: ibv_mw_bind::send_flags"]
        [::std::mem::offset_of!(ibv_mw_bind, send_flags) - 8usize];
    ["Offset of field: ibv_mw_bind::bind_info"]
        [::std::mem::offset_of!(ibv_mw_bind, bind_info) - 16usize];
};
impl Default for ibv_mw_bind {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_srq {
    pub context: *mut ibv_context,
    pub srq_context: *mut ::std::os::raw::c_void,
    pub pd: *mut ibv_pd,
    pub handle: u32,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub events_completed: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_srq"][::std::mem::size_of::<ibv_srq>() - 128usize];
    ["Alignment of ibv_srq"][::std::mem::align_of::<ibv_srq>() - 8usize];
    ["Offset of field: ibv_srq::context"][::std::mem::offset_of!(ibv_srq, context) - 0usize];
    ["Offset of field: ibv_srq::srq_context"]
        [::std::mem::offset_of!(ibv_srq, srq_context) - 8usize];
    ["Offset of field: ibv_srq::pd"][::std::mem::offset_of!(ibv_srq, pd) - 16usize];
    ["Offset of field: ibv_srq::handle"][::std::mem::offset_of!(ibv_srq, handle) - 24usize];
    ["Offset of field: ibv_srq::mutex"][::std::mem::offset_of!(ibv_srq, mutex) - 32usize];
    ["Offset of field: ibv_srq::cond"][::std::mem::offset_of!(ibv_srq, cond) - 72usize];
    ["Offset of field: ibv_srq::events_completed"]
        [::std::mem::offset_of!(ibv_srq, events_completed) - 120usize];
};
impl Default for ibv_srq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_wq {
    pub context: *mut ibv_context,
    pub wq_context: *mut ::std::os::raw::c_void,
    pub pd: *mut ibv_pd,
    pub cq: *mut ibv_cq,
    pub wq_num: u32,
    pub handle: u32,
    pub state: ibv_wq_state,
    pub wq_type: ibv_wq_type,
    pub post_recv: ::std::option::Option<
        unsafe extern "C" fn(
            current: *mut ibv_wq,
            recv_wr: *mut ibv_recv_wr,
            bad_recv_wr: *mut *mut ibv_recv_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub events_completed: u32,
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_wq"][::std::mem::size_of::<ibv_wq>() - 152usize];
    ["Alignment of ibv_wq"][::std::mem::align_of::<ibv_wq>() - 8usize];
    ["Offset of field: ibv_wq::context"][::std::mem::offset_of!(ibv_wq, context) - 0usize];
    ["Offset of field: ibv_wq::wq_context"][::std::mem::offset_of!(ibv_wq, wq_context) - 8usize];
    ["Offset of field: ibv_wq::pd"][::std::mem::offset_of!(ibv_wq, pd) - 16usize];
    ["Offset of field: ibv_wq::cq"][::std::mem::offset_of!(ibv_wq, cq) - 24usize];
    ["Offset of field: ibv_wq::wq_num"][::std::mem::offset_of!(ibv_wq, wq_num) - 32usize];
    ["Offset of field: ibv_wq::handle"][::std::mem::offset_of!(ibv_wq, handle) - 36usize];
    ["Offset of field: ibv_wq::state"][::std::mem::offset_of!(ibv_wq, state) - 40usize];
    ["Offset of field: ibv_wq::wq_type"][::std::mem::offset_of!(ibv_wq, wq_type) - 44usize];
    ["Offset of field: ibv_wq::post_recv"][::std::mem::offset_of!(ibv_wq, post_recv) - 48usize];
    ["Offset of field: ibv_wq::mutex"][::std::mem::offset_of!(ibv_wq, mutex) - 56usize];
    ["Offset of field: ibv_wq::cond"][::std::mem::offset_of!(ibv_wq, cond) - 96usize];
    ["Offset of field: ibv_wq::events_completed"]
        [::std::mem::offset_of!(ibv_wq, events_completed) - 144usize];
    ["Offset of field: ibv_wq::comp_mask"][::std::mem::offset_of!(ibv_wq, comp_mask) - 148usize];
};
impl Default for ibv_wq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_qp {
    pub context: *mut ibv_context,
    pub qp_context: *mut ::std::os::raw::c_void,
    pub pd: *mut ibv_pd,
    pub send_cq: *mut ibv_cq,
    pub recv_cq: *mut ibv_cq,
    pub srq: *mut ibv_srq,
    pub handle: u32,
    pub qp_num: u32,
    pub state: ibv_qp_state::Type,
    pub qp_type: ibv_qp_type::Type,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub events_completed: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_qp"][::std::mem::size_of::<ibv_qp>() - 160usize];
    ["Alignment of ibv_qp"][::std::mem::align_of::<ibv_qp>() - 8usize];
    ["Offset of field: ibv_qp::context"][::std::mem::offset_of!(ibv_qp, context) - 0usize];
    ["Offset of field: ibv_qp::qp_context"][::std::mem::offset_of!(ibv_qp, qp_context) - 8usize];
    ["Offset of field: ibv_qp::pd"][::std::mem::offset_of!(ibv_qp, pd) - 16usize];
    ["Offset of field: ibv_qp::send_cq"][::std::mem::offset_of!(ibv_qp, send_cq) - 24usize];
    ["Offset of field: ibv_qp::recv_cq"][::std::mem::offset_of!(ibv_qp, recv_cq) - 32usize];
    ["Offset of field: ibv_qp::srq"][::std::mem::offset_of!(ibv_qp, srq) - 40usize];
    ["Offset of field: ibv_qp::handle"][::std::mem::offset_of!(ibv_qp, handle) - 48usize];
    ["Offset of field: ibv_qp::qp_num"][::std::mem::offset_of!(ibv_qp, qp_num) - 52usize];
    ["Offset of field: ibv_qp::state"][::std::mem::offset_of!(ibv_qp, state) - 56usize];
    ["Offset of field: ibv_qp::qp_type"][::std::mem::offset_of!(ibv_qp, qp_type) - 60usize];
    ["Offset of field: ibv_qp::mutex"][::std::mem::offset_of!(ibv_qp, mutex) - 64usize];
    ["Offset of field: ibv_qp::cond"][::std::mem::offset_of!(ibv_qp, cond) - 104usize];
    ["Offset of field: ibv_qp::events_completed"]
        [::std::mem::offset_of!(ibv_qp, events_completed) - 152usize];
};
impl Default for ibv_qp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_qp_ex {
    pub qp_base: ibv_qp,
    pub comp_mask: u64,
    pub wr_id: u64,
    pub wr_flags: ::std::os::raw::c_uint,
    pub wr_atomic_cmp_swp: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            rkey: u32,
            remote_addr: u64,
            compare: u64,
            swap: u64,
        ),
    >,
    pub wr_atomic_fetch_add: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, rkey: u32, remote_addr: u64, add: u64),
    >,
    pub wr_bind_mw: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            mw: *mut ibv_mw,
            rkey: u32,
            bind_info: *const ibv_mw_bind_info,
        ),
    >,
    pub wr_local_inv:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex, invalidate_rkey: u32)>,
    pub wr_rdma_read: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, rkey: u32, remote_addr: u64),
    >,
    pub wr_rdma_write: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, rkey: u32, remote_addr: u64),
    >,
    pub wr_rdma_write_imm: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, rkey: u32, remote_addr: u64, imm_data: __be32),
    >,
    pub wr_send: ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex)>,
    pub wr_send_imm:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex, imm_data: __be32)>,
    pub wr_send_inv:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex, invalidate_rkey: u32)>,
    pub wr_send_tso: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            hdr: *mut ::std::os::raw::c_void,
            hdr_sz: u16,
            mss: u16,
        ),
    >,
    pub wr_set_ud_addr: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            ah: *mut ibv_ah,
            remote_qpn: u32,
            remote_qkey: u32,
        ),
    >,
    pub wr_set_xrc_srqn:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex, remote_srqn: u32)>,
    pub wr_set_inline_data: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, addr: *mut ::std::os::raw::c_void, length: usize),
    >,
    pub wr_set_inline_data_list: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, num_buf: usize, buf_list: *const ibv_data_buf),
    >,
    pub wr_set_sge: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, lkey: u32, addr: u64, length: u32),
    >,
    pub wr_set_sge_list: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp_ex, num_sge: usize, sg_list: *const ibv_sge),
    >,
    pub wr_start: ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex)>,
    pub wr_complete:
        ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex) -> ::std::os::raw::c_int>,
    pub wr_abort: ::std::option::Option<unsafe extern "C" fn(qp: *mut ibv_qp_ex)>,
    pub wr_atomic_write: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            rkey: u32,
            remote_addr: u64,
            atomic_wr: *const ::std::os::raw::c_void,
        ),
    >,
    pub wr_flush: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp_ex,
            rkey: u32,
            remote_addr: u64,
            len: usize,
            type_: u8,
            level: u8,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_qp_ex"][::std::mem::size_of::<ibv_qp_ex>() - 360usize];
    ["Alignment of ibv_qp_ex"][::std::mem::align_of::<ibv_qp_ex>() - 8usize];
    ["Offset of field: ibv_qp_ex::qp_base"][::std::mem::offset_of!(ibv_qp_ex, qp_base) - 0usize];
    ["Offset of field: ibv_qp_ex::comp_mask"]
        [::std::mem::offset_of!(ibv_qp_ex, comp_mask) - 160usize];
    ["Offset of field: ibv_qp_ex::wr_id"][::std::mem::offset_of!(ibv_qp_ex, wr_id) - 168usize];
    ["Offset of field: ibv_qp_ex::wr_flags"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_flags) - 176usize];
    ["Offset of field: ibv_qp_ex::wr_atomic_cmp_swp"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_atomic_cmp_swp) - 184usize];
    ["Offset of field: ibv_qp_ex::wr_atomic_fetch_add"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_atomic_fetch_add) - 192usize];
    ["Offset of field: ibv_qp_ex::wr_bind_mw"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_bind_mw) - 200usize];
    ["Offset of field: ibv_qp_ex::wr_local_inv"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_local_inv) - 208usize];
    ["Offset of field: ibv_qp_ex::wr_rdma_read"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_rdma_read) - 216usize];
    ["Offset of field: ibv_qp_ex::wr_rdma_write"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_rdma_write) - 224usize];
    ["Offset of field: ibv_qp_ex::wr_rdma_write_imm"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_rdma_write_imm) - 232usize];
    ["Offset of field: ibv_qp_ex::wr_send"][::std::mem::offset_of!(ibv_qp_ex, wr_send) - 240usize];
    ["Offset of field: ibv_qp_ex::wr_send_imm"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_send_imm) - 248usize];
    ["Offset of field: ibv_qp_ex::wr_send_inv"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_send_inv) - 256usize];
    ["Offset of field: ibv_qp_ex::wr_send_tso"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_send_tso) - 264usize];
    ["Offset of field: ibv_qp_ex::wr_set_ud_addr"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_set_ud_addr) - 272usize];
    ["Offset of field: ibv_qp_ex::wr_set_xrc_srqn"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_set_xrc_srqn) - 280usize];
    ["Offset of field: ibv_qp_ex::wr_set_inline_data"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_set_inline_data) - 288usize];
    ["Offset of field: ibv_qp_ex::wr_set_inline_data_list"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_set_inline_data_list) - 296usize];
    ["Offset of field: ibv_qp_ex::wr_set_sge"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_set_sge) - 304usize];
    ["Offset of field: ibv_qp_ex::wr_set_sge_list"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_set_sge_list) - 312usize];
    ["Offset of field: ibv_qp_ex::wr_start"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_start) - 320usize];
    ["Offset of field: ibv_qp_ex::wr_complete"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_complete) - 328usize];
    ["Offset of field: ibv_qp_ex::wr_abort"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_abort) - 336usize];
    ["Offset of field: ibv_qp_ex::wr_atomic_write"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_atomic_write) - 344usize];
    ["Offset of field: ibv_qp_ex::wr_flush"]
        [::std::mem::offset_of!(ibv_qp_ex, wr_flush) - 352usize];
};
impl Default for ibv_qp_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ibv_qp_to_qp_ex(qp: *mut ibv_qp) -> *mut ibv_qp_ex;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_ece {
    pub vendor_id: u32,
    pub options: u32,
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_ece"][::std::mem::size_of::<ibv_ece>() - 12usize];
    ["Alignment of ibv_ece"][::std::mem::align_of::<ibv_ece>() - 4usize];
    ["Offset of field: ibv_ece::vendor_id"][::std::mem::offset_of!(ibv_ece, vendor_id) - 0usize];
    ["Offset of field: ibv_ece::options"][::std::mem::offset_of!(ibv_ece, options) - 4usize];
    ["Offset of field: ibv_ece::comp_mask"][::std::mem::offset_of!(ibv_ece, comp_mask) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_comp_channel {
    pub context: *mut ibv_context,
    pub fd: ::std::os::raw::c_int,
    pub refcnt: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_comp_channel"][::std::mem::size_of::<ibv_comp_channel>() - 16usize];
    ["Alignment of ibv_comp_channel"][::std::mem::align_of::<ibv_comp_channel>() - 8usize];
    ["Offset of field: ibv_comp_channel::context"]
        [::std::mem::offset_of!(ibv_comp_channel, context) - 0usize];
    ["Offset of field: ibv_comp_channel::fd"]
        [::std::mem::offset_of!(ibv_comp_channel, fd) - 8usize];
    ["Offset of field: ibv_comp_channel::refcnt"]
        [::std::mem::offset_of!(ibv_comp_channel, refcnt) - 12usize];
};
impl Default for ibv_comp_channel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_cq {
    pub context: *mut ibv_context,
    pub channel: *mut ibv_comp_channel,
    pub cq_context: *mut ::std::os::raw::c_void,
    pub handle: u32,
    pub cqe: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub comp_events_completed: u32,
    pub async_events_completed: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_cq"][::std::mem::size_of::<ibv_cq>() - 128usize];
    ["Alignment of ibv_cq"][::std::mem::align_of::<ibv_cq>() - 8usize];
    ["Offset of field: ibv_cq::context"][::std::mem::offset_of!(ibv_cq, context) - 0usize];
    ["Offset of field: ibv_cq::channel"][::std::mem::offset_of!(ibv_cq, channel) - 8usize];
    ["Offset of field: ibv_cq::cq_context"][::std::mem::offset_of!(ibv_cq, cq_context) - 16usize];
    ["Offset of field: ibv_cq::handle"][::std::mem::offset_of!(ibv_cq, handle) - 24usize];
    ["Offset of field: ibv_cq::cqe"][::std::mem::offset_of!(ibv_cq, cqe) - 28usize];
    ["Offset of field: ibv_cq::mutex"][::std::mem::offset_of!(ibv_cq, mutex) - 32usize];
    ["Offset of field: ibv_cq::cond"][::std::mem::offset_of!(ibv_cq, cond) - 72usize];
    ["Offset of field: ibv_cq::comp_events_completed"]
        [::std::mem::offset_of!(ibv_cq, comp_events_completed) - 120usize];
    ["Offset of field: ibv_cq::async_events_completed"]
        [::std::mem::offset_of!(ibv_cq, async_events_completed) - 124usize];
};
impl Default for ibv_cq {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_poll_cq_attr {
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_poll_cq_attr"][::std::mem::size_of::<ibv_poll_cq_attr>() - 4usize];
    ["Alignment of ibv_poll_cq_attr"][::std::mem::align_of::<ibv_poll_cq_attr>() - 4usize];
    ["Offset of field: ibv_poll_cq_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_poll_cq_attr, comp_mask) - 0usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_wc_tm_info {
    pub tag: u64,
    pub priv_: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_wc_tm_info"][::std::mem::size_of::<ibv_wc_tm_info>() - 16usize];
    ["Alignment of ibv_wc_tm_info"][::std::mem::align_of::<ibv_wc_tm_info>() - 8usize];
    ["Offset of field: ibv_wc_tm_info::tag"][::std::mem::offset_of!(ibv_wc_tm_info, tag) - 0usize];
    ["Offset of field: ibv_wc_tm_info::priv_"]
        [::std::mem::offset_of!(ibv_wc_tm_info, priv_) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_cq_ex {
    pub context: *mut ibv_context,
    pub channel: *mut ibv_comp_channel,
    pub cq_context: *mut ::std::os::raw::c_void,
    pub handle: u32,
    pub cqe: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
    pub cond: pthread_cond_t,
    pub comp_events_completed: u32,
    pub async_events_completed: u32,
    pub comp_mask: u32,
    pub status: ibv_wc_status::Type,
    pub wr_id: u64,
    pub start_poll: ::std::option::Option<
        unsafe extern "C" fn(
            current: *mut ibv_cq_ex,
            attr: *mut ibv_poll_cq_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub next_poll: ::std::option::Option<
        unsafe extern "C" fn(current: *mut ibv_cq_ex) -> ::std::os::raw::c_int,
    >,
    pub end_poll: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex)>,
    pub read_opcode:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> ibv_wc_opcode::Type>,
    pub read_vendor_err:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_byte_len: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_imm_data:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> __be32>,
    pub read_qp_num: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_src_qp: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_wc_flags: ::std::option::Option<
        unsafe extern "C" fn(current: *mut ibv_cq_ex) -> ::std::os::raw::c_uint,
    >,
    pub read_slid: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_sl: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u8>,
    pub read_dlid_path_bits:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u8>,
    pub read_completion_ts:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u64>,
    pub read_cvlan: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u16>,
    pub read_flow_tag: ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u32>,
    pub read_tm_info: ::std::option::Option<
        unsafe extern "C" fn(current: *mut ibv_cq_ex, tm_info: *mut ibv_wc_tm_info),
    >,
    pub read_completion_wallclock_ns:
        ::std::option::Option<unsafe extern "C" fn(current: *mut ibv_cq_ex) -> u64>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_cq_ex"][::std::mem::size_of::<ibv_cq_ex>() - 288usize];
    ["Alignment of ibv_cq_ex"][::std::mem::align_of::<ibv_cq_ex>() - 8usize];
    ["Offset of field: ibv_cq_ex::context"][::std::mem::offset_of!(ibv_cq_ex, context) - 0usize];
    ["Offset of field: ibv_cq_ex::channel"][::std::mem::offset_of!(ibv_cq_ex, channel) - 8usize];
    ["Offset of field: ibv_cq_ex::cq_context"]
        [::std::mem::offset_of!(ibv_cq_ex, cq_context) - 16usize];
    ["Offset of field: ibv_cq_ex::handle"][::std::mem::offset_of!(ibv_cq_ex, handle) - 24usize];
    ["Offset of field: ibv_cq_ex::cqe"][::std::mem::offset_of!(ibv_cq_ex, cqe) - 28usize];
    ["Offset of field: ibv_cq_ex::mutex"][::std::mem::offset_of!(ibv_cq_ex, mutex) - 32usize];
    ["Offset of field: ibv_cq_ex::cond"][::std::mem::offset_of!(ibv_cq_ex, cond) - 72usize];
    ["Offset of field: ibv_cq_ex::comp_events_completed"]
        [::std::mem::offset_of!(ibv_cq_ex, comp_events_completed) - 120usize];
    ["Offset of field: ibv_cq_ex::async_events_completed"]
        [::std::mem::offset_of!(ibv_cq_ex, async_events_completed) - 124usize];
    ["Offset of field: ibv_cq_ex::comp_mask"]
        [::std::mem::offset_of!(ibv_cq_ex, comp_mask) - 128usize];
    ["Offset of field: ibv_cq_ex::status"][::std::mem::offset_of!(ibv_cq_ex, status) - 132usize];
    ["Offset of field: ibv_cq_ex::wr_id"][::std::mem::offset_of!(ibv_cq_ex, wr_id) - 136usize];
    ["Offset of field: ibv_cq_ex::start_poll"]
        [::std::mem::offset_of!(ibv_cq_ex, start_poll) - 144usize];
    ["Offset of field: ibv_cq_ex::next_poll"]
        [::std::mem::offset_of!(ibv_cq_ex, next_poll) - 152usize];
    ["Offset of field: ibv_cq_ex::end_poll"]
        [::std::mem::offset_of!(ibv_cq_ex, end_poll) - 160usize];
    ["Offset of field: ibv_cq_ex::read_opcode"]
        [::std::mem::offset_of!(ibv_cq_ex, read_opcode) - 168usize];
    ["Offset of field: ibv_cq_ex::read_vendor_err"]
        [::std::mem::offset_of!(ibv_cq_ex, read_vendor_err) - 176usize];
    ["Offset of field: ibv_cq_ex::read_byte_len"]
        [::std::mem::offset_of!(ibv_cq_ex, read_byte_len) - 184usize];
    ["Offset of field: ibv_cq_ex::read_imm_data"]
        [::std::mem::offset_of!(ibv_cq_ex, read_imm_data) - 192usize];
    ["Offset of field: ibv_cq_ex::read_qp_num"]
        [::std::mem::offset_of!(ibv_cq_ex, read_qp_num) - 200usize];
    ["Offset of field: ibv_cq_ex::read_src_qp"]
        [::std::mem::offset_of!(ibv_cq_ex, read_src_qp) - 208usize];
    ["Offset of field: ibv_cq_ex::read_wc_flags"]
        [::std::mem::offset_of!(ibv_cq_ex, read_wc_flags) - 216usize];
    ["Offset of field: ibv_cq_ex::read_slid"]
        [::std::mem::offset_of!(ibv_cq_ex, read_slid) - 224usize];
    ["Offset of field: ibv_cq_ex::read_sl"][::std::mem::offset_of!(ibv_cq_ex, read_sl) - 232usize];
    ["Offset of field: ibv_cq_ex::read_dlid_path_bits"]
        [::std::mem::offset_of!(ibv_cq_ex, read_dlid_path_bits) - 240usize];
    ["Offset of field: ibv_cq_ex::read_completion_ts"]
        [::std::mem::offset_of!(ibv_cq_ex, read_completion_ts) - 248usize];
    ["Offset of field: ibv_cq_ex::read_cvlan"]
        [::std::mem::offset_of!(ibv_cq_ex, read_cvlan) - 256usize];
    ["Offset of field: ibv_cq_ex::read_flow_tag"]
        [::std::mem::offset_of!(ibv_cq_ex, read_flow_tag) - 264usize];
    ["Offset of field: ibv_cq_ex::read_tm_info"]
        [::std::mem::offset_of!(ibv_cq_ex, read_tm_info) - 272usize];
    ["Offset of field: ibv_cq_ex::read_completion_wallclock_ns"]
        [::std::mem::offset_of!(ibv_cq_ex, read_completion_wallclock_ns) - 280usize];
};
impl Default for ibv_cq_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_CQ_ATTR_MODERATE: ibv_cq_attr_mask = 1;
pub const IBV_CQ_ATTR_RESERVED: ibv_cq_attr_mask = 2;
pub type ibv_cq_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_moderate_cq {
    pub cq_count: u16,
    pub cq_period: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_moderate_cq"][::std::mem::size_of::<ibv_moderate_cq>() - 4usize];
    ["Alignment of ibv_moderate_cq"][::std::mem::align_of::<ibv_moderate_cq>() - 2usize];
    ["Offset of field: ibv_moderate_cq::cq_count"]
        [::std::mem::offset_of!(ibv_moderate_cq, cq_count) - 0usize];
    ["Offset of field: ibv_moderate_cq::cq_period"]
        [::std::mem::offset_of!(ibv_moderate_cq, cq_period) - 2usize];
};
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_modify_cq_attr {
    pub attr_mask: u32,
    pub moderate: ibv_moderate_cq,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_modify_cq_attr"][::std::mem::size_of::<ibv_modify_cq_attr>() - 8usize];
    ["Alignment of ibv_modify_cq_attr"][::std::mem::align_of::<ibv_modify_cq_attr>() - 4usize];
    ["Offset of field: ibv_modify_cq_attr::attr_mask"]
        [::std::mem::offset_of!(ibv_modify_cq_attr, attr_mask) - 0usize];
    ["Offset of field: ibv_modify_cq_attr::moderate"]
        [::std::mem::offset_of!(ibv_modify_cq_attr, moderate) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_ah {
    pub context: *mut ibv_context,
    pub pd: *mut ibv_pd,
    pub handle: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_ah"][::std::mem::size_of::<ibv_ah>() - 24usize];
    ["Alignment of ibv_ah"][::std::mem::align_of::<ibv_ah>() - 8usize];
    ["Offset of field: ibv_ah::context"][::std::mem::offset_of!(ibv_ah, context) - 0usize];
    ["Offset of field: ibv_ah::pd"][::std::mem::offset_of!(ibv_ah, pd) - 8usize];
    ["Offset of field: ibv_ah::handle"][::std::mem::offset_of!(ibv_ah, handle) - 16usize];
};
impl Default for ibv_ah {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_FLOW_ATTR_FLAGS_DONT_TRAP: ibv_flow_flags = 2;
pub const IBV_FLOW_ATTR_FLAGS_EGRESS: ibv_flow_flags = 4;
pub type ibv_flow_flags = ::std::os::raw::c_uint;
pub const IBV_FLOW_ATTR_NORMAL: ibv_flow_attr_type = 0;
pub const IBV_FLOW_ATTR_ALL_DEFAULT: ibv_flow_attr_type = 1;
pub const IBV_FLOW_ATTR_MC_DEFAULT: ibv_flow_attr_type = 2;
pub const IBV_FLOW_ATTR_SNIFFER: ibv_flow_attr_type = 3;
pub type ibv_flow_attr_type = ::std::os::raw::c_uint;
pub const IBV_FLOW_SPEC_ETH: ibv_flow_spec_type = 32;
pub const IBV_FLOW_SPEC_IPV4: ibv_flow_spec_type = 48;
pub const IBV_FLOW_SPEC_IPV6: ibv_flow_spec_type = 49;
pub const IBV_FLOW_SPEC_IPV4_EXT: ibv_flow_spec_type = 50;
pub const IBV_FLOW_SPEC_ESP: ibv_flow_spec_type = 52;
pub const IBV_FLOW_SPEC_TCP: ibv_flow_spec_type = 64;
pub const IBV_FLOW_SPEC_UDP: ibv_flow_spec_type = 65;
pub const IBV_FLOW_SPEC_VXLAN_TUNNEL: ibv_flow_spec_type = 80;
pub const IBV_FLOW_SPEC_GRE: ibv_flow_spec_type = 81;
pub const IBV_FLOW_SPEC_MPLS: ibv_flow_spec_type = 96;
pub const IBV_FLOW_SPEC_INNER: ibv_flow_spec_type = 256;
pub const IBV_FLOW_SPEC_ACTION_TAG: ibv_flow_spec_type = 4096;
pub const IBV_FLOW_SPEC_ACTION_DROP: ibv_flow_spec_type = 4097;
pub const IBV_FLOW_SPEC_ACTION_HANDLE: ibv_flow_spec_type = 4098;
pub const IBV_FLOW_SPEC_ACTION_COUNT: ibv_flow_spec_type = 4099;
pub type ibv_flow_spec_type = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_eth_filter {
    pub dst_mac: [u8; 6usize],
    pub src_mac: [u8; 6usize],
    pub ether_type: u16,
    pub vlan_tag: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_eth_filter"][::std::mem::size_of::<ibv_flow_eth_filter>() - 16usize];
    ["Alignment of ibv_flow_eth_filter"][::std::mem::align_of::<ibv_flow_eth_filter>() - 2usize];
    ["Offset of field: ibv_flow_eth_filter::dst_mac"]
        [::std::mem::offset_of!(ibv_flow_eth_filter, dst_mac) - 0usize];
    ["Offset of field: ibv_flow_eth_filter::src_mac"]
        [::std::mem::offset_of!(ibv_flow_eth_filter, src_mac) - 6usize];
    ["Offset of field: ibv_flow_eth_filter::ether_type"]
        [::std::mem::offset_of!(ibv_flow_eth_filter, ether_type) - 12usize];
    ["Offset of field: ibv_flow_eth_filter::vlan_tag"]
        [::std::mem::offset_of!(ibv_flow_eth_filter, vlan_tag) - 14usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_eth {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_eth_filter,
    pub mask: ibv_flow_eth_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_eth"][::std::mem::size_of::<ibv_flow_spec_eth>() - 40usize];
    ["Alignment of ibv_flow_spec_eth"][::std::mem::align_of::<ibv_flow_spec_eth>() - 4usize];
    ["Offset of field: ibv_flow_spec_eth::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_eth, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_eth::size"]
        [::std::mem::offset_of!(ibv_flow_spec_eth, size) - 4usize];
    ["Offset of field: ibv_flow_spec_eth::val"]
        [::std::mem::offset_of!(ibv_flow_spec_eth, val) - 6usize];
    ["Offset of field: ibv_flow_spec_eth::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_eth, mask) - 22usize];
};
impl Default for ibv_flow_spec_eth {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_ipv4_filter {
    pub src_ip: u32,
    pub dst_ip: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_ipv4_filter"][::std::mem::size_of::<ibv_flow_ipv4_filter>() - 8usize];
    ["Alignment of ibv_flow_ipv4_filter"][::std::mem::align_of::<ibv_flow_ipv4_filter>() - 4usize];
    ["Offset of field: ibv_flow_ipv4_filter::src_ip"]
        [::std::mem::offset_of!(ibv_flow_ipv4_filter, src_ip) - 0usize];
    ["Offset of field: ibv_flow_ipv4_filter::dst_ip"]
        [::std::mem::offset_of!(ibv_flow_ipv4_filter, dst_ip) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_ipv4 {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_ipv4_filter,
    pub mask: ibv_flow_ipv4_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_ipv4"][::std::mem::size_of::<ibv_flow_spec_ipv4>() - 24usize];
    ["Alignment of ibv_flow_spec_ipv4"][::std::mem::align_of::<ibv_flow_spec_ipv4>() - 4usize];
    ["Offset of field: ibv_flow_spec_ipv4::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv4, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_ipv4::size"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv4, size) - 4usize];
    ["Offset of field: ibv_flow_spec_ipv4::val"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv4, val) - 8usize];
    ["Offset of field: ibv_flow_spec_ipv4::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv4, mask) - 16usize];
};
impl Default for ibv_flow_spec_ipv4 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_ipv4_ext_filter {
    pub src_ip: u32,
    pub dst_ip: u32,
    pub proto: u8,
    pub tos: u8,
    pub ttl: u8,
    pub flags: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_ipv4_ext_filter"]
        [::std::mem::size_of::<ibv_flow_ipv4_ext_filter>() - 12usize];
    ["Alignment of ibv_flow_ipv4_ext_filter"]
        [::std::mem::align_of::<ibv_flow_ipv4_ext_filter>() - 4usize];
    ["Offset of field: ibv_flow_ipv4_ext_filter::src_ip"]
        [::std::mem::offset_of!(ibv_flow_ipv4_ext_filter, src_ip) - 0usize];
    ["Offset of field: ibv_flow_ipv4_ext_filter::dst_ip"]
        [::std::mem::offset_of!(ibv_flow_ipv4_ext_filter, dst_ip) - 4usize];
    ["Offset of field: ibv_flow_ipv4_ext_filter::proto"]
        [::std::mem::offset_of!(ibv_flow_ipv4_ext_filter, proto) - 8usize];
    ["Offset of field: ibv_flow_ipv4_ext_filter::tos"]
        [::std::mem::offset_of!(ibv_flow_ipv4_ext_filter, tos) - 9usize];
    ["Offset of field: ibv_flow_ipv4_ext_filter::ttl"]
        [::std::mem::offset_of!(ibv_flow_ipv4_ext_filter, ttl) - 10usize];
    ["Offset of field: ibv_flow_ipv4_ext_filter::flags"]
        [::std::mem::offset_of!(ibv_flow_ipv4_ext_filter, flags) - 11usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_ipv4_ext {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_ipv4_ext_filter,
    pub mask: ibv_flow_ipv4_ext_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_ipv4_ext"][::std::mem::size_of::<ibv_flow_spec_ipv4_ext>() - 32usize];
    ["Alignment of ibv_flow_spec_ipv4_ext"]
        [::std::mem::align_of::<ibv_flow_spec_ipv4_ext>() - 4usize];
    ["Offset of field: ibv_flow_spec_ipv4_ext::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv4_ext, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_ipv4_ext::size"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv4_ext, size) - 4usize];
    ["Offset of field: ibv_flow_spec_ipv4_ext::val"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv4_ext, val) - 8usize];
    ["Offset of field: ibv_flow_spec_ipv4_ext::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv4_ext, mask) - 20usize];
};
impl Default for ibv_flow_spec_ipv4_ext {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_ipv6_filter {
    pub src_ip: [u8; 16usize],
    pub dst_ip: [u8; 16usize],
    pub flow_label: u32,
    pub next_hdr: u8,
    pub traffic_class: u8,
    pub hop_limit: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_ipv6_filter"][::std::mem::size_of::<ibv_flow_ipv6_filter>() - 40usize];
    ["Alignment of ibv_flow_ipv6_filter"][::std::mem::align_of::<ibv_flow_ipv6_filter>() - 4usize];
    ["Offset of field: ibv_flow_ipv6_filter::src_ip"]
        [::std::mem::offset_of!(ibv_flow_ipv6_filter, src_ip) - 0usize];
    ["Offset of field: ibv_flow_ipv6_filter::dst_ip"]
        [::std::mem::offset_of!(ibv_flow_ipv6_filter, dst_ip) - 16usize];
    ["Offset of field: ibv_flow_ipv6_filter::flow_label"]
        [::std::mem::offset_of!(ibv_flow_ipv6_filter, flow_label) - 32usize];
    ["Offset of field: ibv_flow_ipv6_filter::next_hdr"]
        [::std::mem::offset_of!(ibv_flow_ipv6_filter, next_hdr) - 36usize];
    ["Offset of field: ibv_flow_ipv6_filter::traffic_class"]
        [::std::mem::offset_of!(ibv_flow_ipv6_filter, traffic_class) - 37usize];
    ["Offset of field: ibv_flow_ipv6_filter::hop_limit"]
        [::std::mem::offset_of!(ibv_flow_ipv6_filter, hop_limit) - 38usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_ipv6 {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_ipv6_filter,
    pub mask: ibv_flow_ipv6_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_ipv6"][::std::mem::size_of::<ibv_flow_spec_ipv6>() - 88usize];
    ["Alignment of ibv_flow_spec_ipv6"][::std::mem::align_of::<ibv_flow_spec_ipv6>() - 4usize];
    ["Offset of field: ibv_flow_spec_ipv6::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv6, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_ipv6::size"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv6, size) - 4usize];
    ["Offset of field: ibv_flow_spec_ipv6::val"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv6, val) - 8usize];
    ["Offset of field: ibv_flow_spec_ipv6::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_ipv6, mask) - 48usize];
};
impl Default for ibv_flow_spec_ipv6 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_esp_filter {
    pub spi: u32,
    pub seq: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_esp_filter"][::std::mem::size_of::<ibv_flow_esp_filter>() - 8usize];
    ["Alignment of ibv_flow_esp_filter"][::std::mem::align_of::<ibv_flow_esp_filter>() - 4usize];
    ["Offset of field: ibv_flow_esp_filter::spi"]
        [::std::mem::offset_of!(ibv_flow_esp_filter, spi) - 0usize];
    ["Offset of field: ibv_flow_esp_filter::seq"]
        [::std::mem::offset_of!(ibv_flow_esp_filter, seq) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_esp {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_esp_filter,
    pub mask: ibv_flow_esp_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_esp"][::std::mem::size_of::<ibv_flow_spec_esp>() - 24usize];
    ["Alignment of ibv_flow_spec_esp"][::std::mem::align_of::<ibv_flow_spec_esp>() - 4usize];
    ["Offset of field: ibv_flow_spec_esp::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_esp, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_esp::size"]
        [::std::mem::offset_of!(ibv_flow_spec_esp, size) - 4usize];
    ["Offset of field: ibv_flow_spec_esp::val"]
        [::std::mem::offset_of!(ibv_flow_spec_esp, val) - 8usize];
    ["Offset of field: ibv_flow_spec_esp::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_esp, mask) - 16usize];
};
impl Default for ibv_flow_spec_esp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_tcp_udp_filter {
    pub dst_port: u16,
    pub src_port: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_tcp_udp_filter"][::std::mem::size_of::<ibv_flow_tcp_udp_filter>() - 4usize];
    ["Alignment of ibv_flow_tcp_udp_filter"]
        [::std::mem::align_of::<ibv_flow_tcp_udp_filter>() - 2usize];
    ["Offset of field: ibv_flow_tcp_udp_filter::dst_port"]
        [::std::mem::offset_of!(ibv_flow_tcp_udp_filter, dst_port) - 0usize];
    ["Offset of field: ibv_flow_tcp_udp_filter::src_port"]
        [::std::mem::offset_of!(ibv_flow_tcp_udp_filter, src_port) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_tcp_udp {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_tcp_udp_filter,
    pub mask: ibv_flow_tcp_udp_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_tcp_udp"][::std::mem::size_of::<ibv_flow_spec_tcp_udp>() - 16usize];
    ["Alignment of ibv_flow_spec_tcp_udp"]
        [::std::mem::align_of::<ibv_flow_spec_tcp_udp>() - 4usize];
    ["Offset of field: ibv_flow_spec_tcp_udp::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_tcp_udp, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_tcp_udp::size"]
        [::std::mem::offset_of!(ibv_flow_spec_tcp_udp, size) - 4usize];
    ["Offset of field: ibv_flow_spec_tcp_udp::val"]
        [::std::mem::offset_of!(ibv_flow_spec_tcp_udp, val) - 6usize];
    ["Offset of field: ibv_flow_spec_tcp_udp::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_tcp_udp, mask) - 10usize];
};
impl Default for ibv_flow_spec_tcp_udp {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_gre_filter {
    pub c_ks_res0_ver: u16,
    pub protocol: u16,
    pub key: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_gre_filter"][::std::mem::size_of::<ibv_flow_gre_filter>() - 8usize];
    ["Alignment of ibv_flow_gre_filter"][::std::mem::align_of::<ibv_flow_gre_filter>() - 4usize];
    ["Offset of field: ibv_flow_gre_filter::c_ks_res0_ver"]
        [::std::mem::offset_of!(ibv_flow_gre_filter, c_ks_res0_ver) - 0usize];
    ["Offset of field: ibv_flow_gre_filter::protocol"]
        [::std::mem::offset_of!(ibv_flow_gre_filter, protocol) - 2usize];
    ["Offset of field: ibv_flow_gre_filter::key"]
        [::std::mem::offset_of!(ibv_flow_gre_filter, key) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_gre {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_gre_filter,
    pub mask: ibv_flow_gre_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_gre"][::std::mem::size_of::<ibv_flow_spec_gre>() - 24usize];
    ["Alignment of ibv_flow_spec_gre"][::std::mem::align_of::<ibv_flow_spec_gre>() - 4usize];
    ["Offset of field: ibv_flow_spec_gre::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_gre, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_gre::size"]
        [::std::mem::offset_of!(ibv_flow_spec_gre, size) - 4usize];
    ["Offset of field: ibv_flow_spec_gre::val"]
        [::std::mem::offset_of!(ibv_flow_spec_gre, val) - 8usize];
    ["Offset of field: ibv_flow_spec_gre::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_gre, mask) - 16usize];
};
impl Default for ibv_flow_spec_gre {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_mpls_filter {
    pub label: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_mpls_filter"][::std::mem::size_of::<ibv_flow_mpls_filter>() - 4usize];
    ["Alignment of ibv_flow_mpls_filter"][::std::mem::align_of::<ibv_flow_mpls_filter>() - 4usize];
    ["Offset of field: ibv_flow_mpls_filter::label"]
        [::std::mem::offset_of!(ibv_flow_mpls_filter, label) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_mpls {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_mpls_filter,
    pub mask: ibv_flow_mpls_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_mpls"][::std::mem::size_of::<ibv_flow_spec_mpls>() - 16usize];
    ["Alignment of ibv_flow_spec_mpls"][::std::mem::align_of::<ibv_flow_spec_mpls>() - 4usize];
    ["Offset of field: ibv_flow_spec_mpls::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_mpls, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_mpls::size"]
        [::std::mem::offset_of!(ibv_flow_spec_mpls, size) - 4usize];
    ["Offset of field: ibv_flow_spec_mpls::val"]
        [::std::mem::offset_of!(ibv_flow_spec_mpls, val) - 8usize];
    ["Offset of field: ibv_flow_spec_mpls::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_mpls, mask) - 12usize];
};
impl Default for ibv_flow_spec_mpls {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_flow_tunnel_filter {
    pub tunnel_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_tunnel_filter"][::std::mem::size_of::<ibv_flow_tunnel_filter>() - 4usize];
    ["Alignment of ibv_flow_tunnel_filter"]
        [::std::mem::align_of::<ibv_flow_tunnel_filter>() - 4usize];
    ["Offset of field: ibv_flow_tunnel_filter::tunnel_id"]
        [::std::mem::offset_of!(ibv_flow_tunnel_filter, tunnel_id) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_tunnel {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub val: ibv_flow_tunnel_filter,
    pub mask: ibv_flow_tunnel_filter,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_tunnel"][::std::mem::size_of::<ibv_flow_spec_tunnel>() - 16usize];
    ["Alignment of ibv_flow_spec_tunnel"][::std::mem::align_of::<ibv_flow_spec_tunnel>() - 4usize];
    ["Offset of field: ibv_flow_spec_tunnel::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_tunnel, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_tunnel::size"]
        [::std::mem::offset_of!(ibv_flow_spec_tunnel, size) - 4usize];
    ["Offset of field: ibv_flow_spec_tunnel::val"]
        [::std::mem::offset_of!(ibv_flow_spec_tunnel, val) - 8usize];
    ["Offset of field: ibv_flow_spec_tunnel::mask"]
        [::std::mem::offset_of!(ibv_flow_spec_tunnel, mask) - 12usize];
};
impl Default for ibv_flow_spec_tunnel {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_action_tag {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub tag_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_action_tag"]
        [::std::mem::size_of::<ibv_flow_spec_action_tag>() - 12usize];
    ["Alignment of ibv_flow_spec_action_tag"]
        [::std::mem::align_of::<ibv_flow_spec_action_tag>() - 4usize];
    ["Offset of field: ibv_flow_spec_action_tag::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_action_tag, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_action_tag::size"]
        [::std::mem::offset_of!(ibv_flow_spec_action_tag, size) - 4usize];
    ["Offset of field: ibv_flow_spec_action_tag::tag_id"]
        [::std::mem::offset_of!(ibv_flow_spec_action_tag, tag_id) - 8usize];
};
impl Default for ibv_flow_spec_action_tag {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_action_drop {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_action_drop"]
        [::std::mem::size_of::<ibv_flow_spec_action_drop>() - 8usize];
    ["Alignment of ibv_flow_spec_action_drop"]
        [::std::mem::align_of::<ibv_flow_spec_action_drop>() - 4usize];
    ["Offset of field: ibv_flow_spec_action_drop::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_action_drop, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_action_drop::size"]
        [::std::mem::offset_of!(ibv_flow_spec_action_drop, size) - 4usize];
};
impl Default for ibv_flow_spec_action_drop {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_action_handle {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub action: *const ibv_flow_action,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_action_handle"]
        [::std::mem::size_of::<ibv_flow_spec_action_handle>() - 16usize];
    ["Alignment of ibv_flow_spec_action_handle"]
        [::std::mem::align_of::<ibv_flow_spec_action_handle>() - 8usize];
    ["Offset of field: ibv_flow_spec_action_handle::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_action_handle, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_action_handle::size"]
        [::std::mem::offset_of!(ibv_flow_spec_action_handle, size) - 4usize];
    ["Offset of field: ibv_flow_spec_action_handle::action"]
        [::std::mem::offset_of!(ibv_flow_spec_action_handle, action) - 8usize];
};
impl Default for ibv_flow_spec_action_handle {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec_counter_action {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
    pub counters: *mut ibv_counters,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec_counter_action"]
        [::std::mem::size_of::<ibv_flow_spec_counter_action>() - 16usize];
    ["Alignment of ibv_flow_spec_counter_action"]
        [::std::mem::align_of::<ibv_flow_spec_counter_action>() - 8usize];
    ["Offset of field: ibv_flow_spec_counter_action::type_"]
        [::std::mem::offset_of!(ibv_flow_spec_counter_action, type_) - 0usize];
    ["Offset of field: ibv_flow_spec_counter_action::size"]
        [::std::mem::offset_of!(ibv_flow_spec_counter_action, size) - 4usize];
    ["Offset of field: ibv_flow_spec_counter_action::counters"]
        [::std::mem::offset_of!(ibv_flow_spec_counter_action, counters) - 8usize];
};
impl Default for ibv_flow_spec_counter_action {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_flow_spec {
    pub __bindgen_anon_1: ibv_flow_spec__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ibv_flow_spec__bindgen_ty_1 {
    pub hdr: ibv_flow_spec__bindgen_ty_1__bindgen_ty_1,
    pub eth: ibv_flow_spec_eth,
    pub ipv4: ibv_flow_spec_ipv4,
    pub tcp_udp: ibv_flow_spec_tcp_udp,
    pub ipv4_ext: ibv_flow_spec_ipv4_ext,
    pub ipv6: ibv_flow_spec_ipv6,
    pub esp: ibv_flow_spec_esp,
    pub tunnel: ibv_flow_spec_tunnel,
    pub gre: ibv_flow_spec_gre,
    pub mpls: ibv_flow_spec_mpls,
    pub flow_tag: ibv_flow_spec_action_tag,
    pub drop: ibv_flow_spec_action_drop,
    pub handle: ibv_flow_spec_action_handle,
    pub flow_count: ibv_flow_spec_counter_action,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_spec__bindgen_ty_1__bindgen_ty_1 {
    pub type_: ibv_flow_spec_type,
    pub size: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_flow_spec__bindgen_ty_1__bindgen_ty_1>() - 8usize];
    ["Alignment of ibv_flow_spec__bindgen_ty_1__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_flow_spec__bindgen_ty_1__bindgen_ty_1>() - 4usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1__bindgen_ty_1::type_"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1__bindgen_ty_1, type_) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1__bindgen_ty_1, size) - 4usize];
};
impl Default for ibv_flow_spec__bindgen_ty_1__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec__bindgen_ty_1"]
        [::std::mem::size_of::<ibv_flow_spec__bindgen_ty_1>() - 88usize];
    ["Alignment of ibv_flow_spec__bindgen_ty_1"]
        [::std::mem::align_of::<ibv_flow_spec__bindgen_ty_1>() - 8usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::hdr"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, hdr) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::eth"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, eth) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::ipv4"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, ipv4) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::tcp_udp"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, tcp_udp) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::ipv4_ext"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, ipv4_ext) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::ipv6"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, ipv6) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::esp"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, esp) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::tunnel"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, tunnel) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::gre"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, gre) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::mpls"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, mpls) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::flow_tag"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, flow_tag) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::drop"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, drop) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::handle"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, handle) - 0usize];
    ["Offset of field: ibv_flow_spec__bindgen_ty_1::flow_count"]
        [::std::mem::offset_of!(ibv_flow_spec__bindgen_ty_1, flow_count) - 0usize];
};
impl Default for ibv_flow_spec__bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_spec"][::std::mem::size_of::<ibv_flow_spec>() - 88usize];
    ["Alignment of ibv_flow_spec"][::std::mem::align_of::<ibv_flow_spec>() - 8usize];
};
impl Default for ibv_flow_spec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_attr {
    pub comp_mask: u32,
    pub type_: ibv_flow_attr_type,
    pub size: u16,
    pub priority: u16,
    pub num_of_specs: u8,
    pub port: u8,
    pub flags: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_attr"][::std::mem::size_of::<ibv_flow_attr>() - 20usize];
    ["Alignment of ibv_flow_attr"][::std::mem::align_of::<ibv_flow_attr>() - 4usize];
    ["Offset of field: ibv_flow_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_flow_attr, comp_mask) - 0usize];
    ["Offset of field: ibv_flow_attr::type_"]
        [::std::mem::offset_of!(ibv_flow_attr, type_) - 4usize];
    ["Offset of field: ibv_flow_attr::size"][::std::mem::offset_of!(ibv_flow_attr, size) - 8usize];
    ["Offset of field: ibv_flow_attr::priority"]
        [::std::mem::offset_of!(ibv_flow_attr, priority) - 10usize];
    ["Offset of field: ibv_flow_attr::num_of_specs"]
        [::std::mem::offset_of!(ibv_flow_attr, num_of_specs) - 12usize];
    ["Offset of field: ibv_flow_attr::port"][::std::mem::offset_of!(ibv_flow_attr, port) - 13usize];
    ["Offset of field: ibv_flow_attr::flags"]
        [::std::mem::offset_of!(ibv_flow_attr, flags) - 16usize];
};
impl Default for ibv_flow_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow {
    pub comp_mask: u32,
    pub context: *mut ibv_context,
    pub handle: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow"][::std::mem::size_of::<ibv_flow>() - 24usize];
    ["Alignment of ibv_flow"][::std::mem::align_of::<ibv_flow>() - 8usize];
    ["Offset of field: ibv_flow::comp_mask"][::std::mem::offset_of!(ibv_flow, comp_mask) - 0usize];
    ["Offset of field: ibv_flow::context"][::std::mem::offset_of!(ibv_flow, context) - 8usize];
    ["Offset of field: ibv_flow::handle"][::std::mem::offset_of!(ibv_flow, handle) - 16usize];
};
impl Default for ibv_flow {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_action {
    pub context: *mut ibv_context,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_action"][::std::mem::size_of::<ibv_flow_action>() - 8usize];
    ["Alignment of ibv_flow_action"][::std::mem::align_of::<ibv_flow_action>() - 8usize];
    ["Offset of field: ibv_flow_action::context"]
        [::std::mem::offset_of!(ibv_flow_action, context) - 0usize];
};
impl Default for ibv_flow_action {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_FLOW_ACTION_ESP_MASK_ESN: ibv_flow_action_esp_mask = 1;
pub type ibv_flow_action_esp_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_flow_action_esp_attr {
    pub esp_attr: *mut ib_uverbs_flow_action_esp,
    pub keymat_proto: ib_uverbs_flow_action_esp_keymat,
    pub keymat_len: u16,
    pub keymat_ptr: *mut ::std::os::raw::c_void,
    pub replay_proto: ib_uverbs_flow_action_esp_replay,
    pub replay_len: u16,
    pub replay_ptr: *mut ::std::os::raw::c_void,
    pub esp_encap: *mut ib_uverbs_flow_action_esp_encap,
    pub comp_mask: u32,
    pub esn: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_flow_action_esp_attr"]
        [::std::mem::size_of::<ibv_flow_action_esp_attr>() - 56usize];
    ["Alignment of ibv_flow_action_esp_attr"]
        [::std::mem::align_of::<ibv_flow_action_esp_attr>() - 8usize];
    ["Offset of field: ibv_flow_action_esp_attr::esp_attr"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, esp_attr) - 0usize];
    ["Offset of field: ibv_flow_action_esp_attr::keymat_proto"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, keymat_proto) - 8usize];
    ["Offset of field: ibv_flow_action_esp_attr::keymat_len"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, keymat_len) - 12usize];
    ["Offset of field: ibv_flow_action_esp_attr::keymat_ptr"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, keymat_ptr) - 16usize];
    ["Offset of field: ibv_flow_action_esp_attr::replay_proto"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, replay_proto) - 24usize];
    ["Offset of field: ibv_flow_action_esp_attr::replay_len"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, replay_len) - 28usize];
    ["Offset of field: ibv_flow_action_esp_attr::replay_ptr"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, replay_ptr) - 32usize];
    ["Offset of field: ibv_flow_action_esp_attr::esp_encap"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, esp_encap) - 40usize];
    ["Offset of field: ibv_flow_action_esp_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, comp_mask) - 48usize];
    ["Offset of field: ibv_flow_action_esp_attr::esn"]
        [::std::mem::offset_of!(ibv_flow_action_esp_attr, esn) - 52usize];
};
impl Default for ibv_flow_action_esp_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _ibv_device_ops {
    pub _dummy1: ::std::option::Option<
        unsafe extern "C" fn(
            device: *mut ibv_device,
            cmd_fd: ::std::os::raw::c_int,
        ) -> *mut ibv_context,
    >,
    pub _dummy2: ::std::option::Option<unsafe extern "C" fn(context: *mut ibv_context)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _ibv_device_ops"][::std::mem::size_of::<_ibv_device_ops>() - 16usize];
    ["Alignment of _ibv_device_ops"][::std::mem::align_of::<_ibv_device_ops>() - 8usize];
    ["Offset of field: _ibv_device_ops::_dummy1"]
        [::std::mem::offset_of!(_ibv_device_ops, _dummy1) - 0usize];
    ["Offset of field: _ibv_device_ops::_dummy2"]
        [::std::mem::offset_of!(_ibv_device_ops, _dummy2) - 8usize];
};
pub const IBV_SYSFS_NAME_MAX: _bindgen_ty_17 = 64;
pub const IBV_SYSFS_PATH_MAX: _bindgen_ty_17 = 256;
pub type _bindgen_ty_17 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_device {
    pub _ops: _ibv_device_ops,
    pub node_type: ibv_node_type,
    pub transport_type: ibv_transport_type,
    pub name: [::std::os::raw::c_char; 64usize],
    pub dev_name: [::std::os::raw::c_char; 64usize],
    pub dev_path: [::std::os::raw::c_char; 256usize],
    pub ibdev_path: [::std::os::raw::c_char; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_device"][::std::mem::size_of::<ibv_device>() - 664usize];
    ["Alignment of ibv_device"][::std::mem::align_of::<ibv_device>() - 8usize];
    ["Offset of field: ibv_device::_ops"][::std::mem::offset_of!(ibv_device, _ops) - 0usize];
    ["Offset of field: ibv_device::node_type"]
        [::std::mem::offset_of!(ibv_device, node_type) - 16usize];
    ["Offset of field: ibv_device::transport_type"]
        [::std::mem::offset_of!(ibv_device, transport_type) - 20usize];
    ["Offset of field: ibv_device::name"][::std::mem::offset_of!(ibv_device, name) - 24usize];
    ["Offset of field: ibv_device::dev_name"]
        [::std::mem::offset_of!(ibv_device, dev_name) - 88usize];
    ["Offset of field: ibv_device::dev_path"]
        [::std::mem::offset_of!(ibv_device, dev_path) - 152usize];
    ["Offset of field: ibv_device::ibdev_path"]
        [::std::mem::offset_of!(ibv_device, ibdev_path) - 408usize];
};
impl Default for ibv_device {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _compat_ibv_port_attr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_context_ops {
    pub _compat_query_device: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            device_attr: *mut ibv_device_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_query_port: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            port_num: u8,
            port_attr: *mut _compat_ibv_port_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_alloc_pd:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_dealloc_pd:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_reg_mr:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_rereg_mr:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_dereg_mr:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub alloc_mw: ::std::option::Option<
        unsafe extern "C" fn(pd: *mut ibv_pd, type_: ibv_mw_type) -> *mut ibv_mw,
    >,
    pub bind_mw: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp,
            mw: *mut ibv_mw,
            mw_bind: *mut ibv_mw_bind,
        ) -> ::std::os::raw::c_int,
    >,
    pub dealloc_mw:
        ::std::option::Option<unsafe extern "C" fn(mw: *mut ibv_mw) -> ::std::os::raw::c_int>,
    pub _compat_create_cq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub poll_cq: ::std::option::Option<
        unsafe extern "C" fn(
            cq: *mut ibv_cq,
            num_entries: ::std::os::raw::c_int,
            wc: *mut ibv_wc,
        ) -> ::std::os::raw::c_int,
    >,
    pub req_notify_cq: ::std::option::Option<
        unsafe extern "C" fn(
            cq: *mut ibv_cq,
            solicited_only: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_cq_event:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_resize_cq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_destroy_cq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_create_srq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_modify_srq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_query_srq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_destroy_srq:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub post_srq_recv: ::std::option::Option<
        unsafe extern "C" fn(
            srq: *mut ibv_srq,
            recv_wr: *mut ibv_recv_wr,
            bad_recv_wr: *mut *mut ibv_recv_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_create_qp:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_query_qp:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_modify_qp:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_destroy_qp:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub post_send: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp,
            wr: *mut ibv_send_wr,
            bad_wr: *mut *mut ibv_send_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_recv: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp,
            wr: *mut ibv_recv_wr,
            bad_wr: *mut *mut ibv_recv_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub _compat_create_ah:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_destroy_ah:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_attach_mcast:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_detach_mcast:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
    pub _compat_async_event:
        ::std::option::Option<unsafe extern "C" fn() -> *mut ::std::os::raw::c_void>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_context_ops"][::std::mem::size_of::<ibv_context_ops>() - 256usize];
    ["Alignment of ibv_context_ops"][::std::mem::align_of::<ibv_context_ops>() - 8usize];
    ["Offset of field: ibv_context_ops::_compat_query_device"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_query_device) - 0usize];
    ["Offset of field: ibv_context_ops::_compat_query_port"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_query_port) - 8usize];
    ["Offset of field: ibv_context_ops::_compat_alloc_pd"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_alloc_pd) - 16usize];
    ["Offset of field: ibv_context_ops::_compat_dealloc_pd"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_dealloc_pd) - 24usize];
    ["Offset of field: ibv_context_ops::_compat_reg_mr"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_reg_mr) - 32usize];
    ["Offset of field: ibv_context_ops::_compat_rereg_mr"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_rereg_mr) - 40usize];
    ["Offset of field: ibv_context_ops::_compat_dereg_mr"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_dereg_mr) - 48usize];
    ["Offset of field: ibv_context_ops::alloc_mw"]
        [::std::mem::offset_of!(ibv_context_ops, alloc_mw) - 56usize];
    ["Offset of field: ibv_context_ops::bind_mw"]
        [::std::mem::offset_of!(ibv_context_ops, bind_mw) - 64usize];
    ["Offset of field: ibv_context_ops::dealloc_mw"]
        [::std::mem::offset_of!(ibv_context_ops, dealloc_mw) - 72usize];
    ["Offset of field: ibv_context_ops::_compat_create_cq"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_create_cq) - 80usize];
    ["Offset of field: ibv_context_ops::poll_cq"]
        [::std::mem::offset_of!(ibv_context_ops, poll_cq) - 88usize];
    ["Offset of field: ibv_context_ops::req_notify_cq"]
        [::std::mem::offset_of!(ibv_context_ops, req_notify_cq) - 96usize];
    ["Offset of field: ibv_context_ops::_compat_cq_event"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_cq_event) - 104usize];
    ["Offset of field: ibv_context_ops::_compat_resize_cq"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_resize_cq) - 112usize];
    ["Offset of field: ibv_context_ops::_compat_destroy_cq"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_destroy_cq) - 120usize];
    ["Offset of field: ibv_context_ops::_compat_create_srq"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_create_srq) - 128usize];
    ["Offset of field: ibv_context_ops::_compat_modify_srq"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_modify_srq) - 136usize];
    ["Offset of field: ibv_context_ops::_compat_query_srq"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_query_srq) - 144usize];
    ["Offset of field: ibv_context_ops::_compat_destroy_srq"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_destroy_srq) - 152usize];
    ["Offset of field: ibv_context_ops::post_srq_recv"]
        [::std::mem::offset_of!(ibv_context_ops, post_srq_recv) - 160usize];
    ["Offset of field: ibv_context_ops::_compat_create_qp"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_create_qp) - 168usize];
    ["Offset of field: ibv_context_ops::_compat_query_qp"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_query_qp) - 176usize];
    ["Offset of field: ibv_context_ops::_compat_modify_qp"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_modify_qp) - 184usize];
    ["Offset of field: ibv_context_ops::_compat_destroy_qp"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_destroy_qp) - 192usize];
    ["Offset of field: ibv_context_ops::post_send"]
        [::std::mem::offset_of!(ibv_context_ops, post_send) - 200usize];
    ["Offset of field: ibv_context_ops::post_recv"]
        [::std::mem::offset_of!(ibv_context_ops, post_recv) - 208usize];
    ["Offset of field: ibv_context_ops::_compat_create_ah"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_create_ah) - 216usize];
    ["Offset of field: ibv_context_ops::_compat_destroy_ah"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_destroy_ah) - 224usize];
    ["Offset of field: ibv_context_ops::_compat_attach_mcast"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_attach_mcast) - 232usize];
    ["Offset of field: ibv_context_ops::_compat_detach_mcast"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_detach_mcast) - 240usize];
    ["Offset of field: ibv_context_ops::_compat_async_event"]
        [::std::mem::offset_of!(ibv_context_ops, _compat_async_event) - 248usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_context {
    pub device: *mut ibv_device,
    pub ops: ibv_context_ops,
    pub cmd_fd: ::std::os::raw::c_int,
    pub async_fd: ::std::os::raw::c_int,
    pub num_comp_vectors: ::std::os::raw::c_int,
    pub mutex: pthread_mutex_t,
    pub abi_compat: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_context"][::std::mem::size_of::<ibv_context>() - 328usize];
    ["Alignment of ibv_context"][::std::mem::align_of::<ibv_context>() - 8usize];
    ["Offset of field: ibv_context::device"][::std::mem::offset_of!(ibv_context, device) - 0usize];
    ["Offset of field: ibv_context::ops"][::std::mem::offset_of!(ibv_context, ops) - 8usize];
    ["Offset of field: ibv_context::cmd_fd"]
        [::std::mem::offset_of!(ibv_context, cmd_fd) - 264usize];
    ["Offset of field: ibv_context::async_fd"]
        [::std::mem::offset_of!(ibv_context, async_fd) - 268usize];
    ["Offset of field: ibv_context::num_comp_vectors"]
        [::std::mem::offset_of!(ibv_context, num_comp_vectors) - 272usize];
    ["Offset of field: ibv_context::mutex"][::std::mem::offset_of!(ibv_context, mutex) - 280usize];
    ["Offset of field: ibv_context::abi_compat"]
        [::std::mem::offset_of!(ibv_context, abi_compat) - 320usize];
};
impl Default for ibv_context {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_CQ_INIT_ATTR_MASK_FLAGS: ibv_cq_init_attr_mask = 1;
pub const IBV_CQ_INIT_ATTR_MASK_PD: ibv_cq_init_attr_mask = 2;
pub type ibv_cq_init_attr_mask = ::std::os::raw::c_uint;
pub const IBV_CREATE_CQ_ATTR_SINGLE_THREADED: ibv_create_cq_attr_flags = 1;
pub const IBV_CREATE_CQ_ATTR_IGNORE_OVERRUN: ibv_create_cq_attr_flags = 2;
pub type ibv_create_cq_attr_flags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_cq_init_attr_ex {
    pub cqe: u32,
    pub cq_context: *mut ::std::os::raw::c_void,
    pub channel: *mut ibv_comp_channel,
    pub comp_vector: u32,
    pub wc_flags: u64,
    pub comp_mask: u32,
    pub flags: u32,
    pub parent_domain: *mut ibv_pd,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_cq_init_attr_ex"][::std::mem::size_of::<ibv_cq_init_attr_ex>() - 56usize];
    ["Alignment of ibv_cq_init_attr_ex"][::std::mem::align_of::<ibv_cq_init_attr_ex>() - 8usize];
    ["Offset of field: ibv_cq_init_attr_ex::cqe"]
        [::std::mem::offset_of!(ibv_cq_init_attr_ex, cqe) - 0usize];
    ["Offset of field: ibv_cq_init_attr_ex::cq_context"]
        [::std::mem::offset_of!(ibv_cq_init_attr_ex, cq_context) - 8usize];
    ["Offset of field: ibv_cq_init_attr_ex::channel"]
        [::std::mem::offset_of!(ibv_cq_init_attr_ex, channel) - 16usize];
    ["Offset of field: ibv_cq_init_attr_ex::comp_vector"]
        [::std::mem::offset_of!(ibv_cq_init_attr_ex, comp_vector) - 24usize];
    ["Offset of field: ibv_cq_init_attr_ex::wc_flags"]
        [::std::mem::offset_of!(ibv_cq_init_attr_ex, wc_flags) - 32usize];
    ["Offset of field: ibv_cq_init_attr_ex::comp_mask"]
        [::std::mem::offset_of!(ibv_cq_init_attr_ex, comp_mask) - 40usize];
    ["Offset of field: ibv_cq_init_attr_ex::flags"]
        [::std::mem::offset_of!(ibv_cq_init_attr_ex, flags) - 44usize];
    ["Offset of field: ibv_cq_init_attr_ex::parent_domain"]
        [::std::mem::offset_of!(ibv_cq_init_attr_ex, parent_domain) - 48usize];
};
impl Default for ibv_cq_init_attr_ex {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_PARENT_DOMAIN_INIT_ATTR_ALLOCATORS: ibv_parent_domain_init_attr_mask = 1;
pub const IBV_PARENT_DOMAIN_INIT_ATTR_PD_CONTEXT: ibv_parent_domain_init_attr_mask = 2;
pub type ibv_parent_domain_init_attr_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_parent_domain_init_attr {
    pub pd: *mut ibv_pd,
    pub td: *mut ibv_td,
    pub comp_mask: u32,
    pub alloc: ::std::option::Option<
        unsafe extern "C" fn(
            pd: *mut ibv_pd,
            pd_context: *mut ::std::os::raw::c_void,
            size: usize,
            alignment: usize,
            resource_type: u64,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<
        unsafe extern "C" fn(
            pd: *mut ibv_pd,
            pd_context: *mut ::std::os::raw::c_void,
            ptr: *mut ::std::os::raw::c_void,
            resource_type: u64,
        ),
    >,
    pub pd_context: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_parent_domain_init_attr"]
        [::std::mem::size_of::<ibv_parent_domain_init_attr>() - 48usize];
    ["Alignment of ibv_parent_domain_init_attr"]
        [::std::mem::align_of::<ibv_parent_domain_init_attr>() - 8usize];
    ["Offset of field: ibv_parent_domain_init_attr::pd"]
        [::std::mem::offset_of!(ibv_parent_domain_init_attr, pd) - 0usize];
    ["Offset of field: ibv_parent_domain_init_attr::td"]
        [::std::mem::offset_of!(ibv_parent_domain_init_attr, td) - 8usize];
    ["Offset of field: ibv_parent_domain_init_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_parent_domain_init_attr, comp_mask) - 16usize];
    ["Offset of field: ibv_parent_domain_init_attr::alloc"]
        [::std::mem::offset_of!(ibv_parent_domain_init_attr, alloc) - 24usize];
    ["Offset of field: ibv_parent_domain_init_attr::free"]
        [::std::mem::offset_of!(ibv_parent_domain_init_attr, free) - 32usize];
    ["Offset of field: ibv_parent_domain_init_attr::pd_context"]
        [::std::mem::offset_of!(ibv_parent_domain_init_attr, pd_context) - 40usize];
};
impl Default for ibv_parent_domain_init_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_counters_init_attr {
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_counters_init_attr"][::std::mem::size_of::<ibv_counters_init_attr>() - 4usize];
    ["Alignment of ibv_counters_init_attr"]
        [::std::mem::align_of::<ibv_counters_init_attr>() - 4usize];
    ["Offset of field: ibv_counters_init_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_counters_init_attr, comp_mask) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_counters {
    pub context: *mut ibv_context,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_counters"][::std::mem::size_of::<ibv_counters>() - 8usize];
    ["Alignment of ibv_counters"][::std::mem::align_of::<ibv_counters>() - 8usize];
    ["Offset of field: ibv_counters::context"]
        [::std::mem::offset_of!(ibv_counters, context) - 0usize];
};
impl Default for ibv_counters {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_COUNTER_PACKETS: ibv_counter_description = 0;
pub const IBV_COUNTER_BYTES: ibv_counter_description = 1;
pub type ibv_counter_description = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibv_counter_attach_attr {
    pub counter_desc: ibv_counter_description,
    pub index: u32,
    pub comp_mask: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_counter_attach_attr"][::std::mem::size_of::<ibv_counter_attach_attr>() - 12usize];
    ["Alignment of ibv_counter_attach_attr"]
        [::std::mem::align_of::<ibv_counter_attach_attr>() - 4usize];
    ["Offset of field: ibv_counter_attach_attr::counter_desc"]
        [::std::mem::offset_of!(ibv_counter_attach_attr, counter_desc) - 0usize];
    ["Offset of field: ibv_counter_attach_attr::index"]
        [::std::mem::offset_of!(ibv_counter_attach_attr, index) - 4usize];
    ["Offset of field: ibv_counter_attach_attr::comp_mask"]
        [::std::mem::offset_of!(ibv_counter_attach_attr, comp_mask) - 8usize];
};
impl Default for ibv_counter_attach_attr {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub const IBV_READ_COUNTERS_ATTR_PREFER_CACHED: ibv_read_counters_flags = 1;
pub type ibv_read_counters_flags = ::std::os::raw::c_uint;
pub const IBV_VALUES_MASK_RAW_CLOCK: ibv_values_mask = 1;
pub const IBV_VALUES_MASK_RESERVED: ibv_values_mask = 2;
pub type ibv_values_mask = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ibv_values_ex {
    pub comp_mask: u32,
    pub raw_clock: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_values_ex"][::std::mem::size_of::<ibv_values_ex>() - 24usize];
    ["Alignment of ibv_values_ex"][::std::mem::align_of::<ibv_values_ex>() - 8usize];
    ["Offset of field: ibv_values_ex::comp_mask"]
        [::std::mem::offset_of!(ibv_values_ex, comp_mask) - 0usize];
    ["Offset of field: ibv_values_ex::raw_clock"]
        [::std::mem::offset_of!(ibv_values_ex, raw_clock) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct verbs_context {
    pub query_port: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            port_num: u8,
            port_attr: *mut ibv_port_attr,
            port_attr_len: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub advise_mr: ::std::option::Option<
        unsafe extern "C" fn(
            pd: *mut ibv_pd,
            advice: ib_uverbs_advise_mr_advice,
            flags: u32,
            sg_list: *mut ibv_sge,
            num_sges: u32,
        ) -> ::std::os::raw::c_int,
    >,
    pub alloc_null_mr: ::std::option::Option<unsafe extern "C" fn(pd: *mut ibv_pd) -> *mut ibv_mr>,
    pub read_counters: ::std::option::Option<
        unsafe extern "C" fn(
            counters: *mut ibv_counters,
            counters_value: *mut u64,
            ncounters: u32,
            flags: u32,
        ) -> ::std::os::raw::c_int,
    >,
    pub attach_counters_point_flow: ::std::option::Option<
        unsafe extern "C" fn(
            counters: *mut ibv_counters,
            attr: *mut ibv_counter_attach_attr,
            flow: *mut ibv_flow,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_counters: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            init_attr: *mut ibv_counters_init_attr,
        ) -> *mut ibv_counters,
    >,
    pub destroy_counters: ::std::option::Option<
        unsafe extern "C" fn(counters: *mut ibv_counters) -> ::std::os::raw::c_int,
    >,
    pub reg_dm_mr: ::std::option::Option<
        unsafe extern "C" fn(
            pd: *mut ibv_pd,
            dm: *mut ibv_dm,
            dm_offset: u64,
            length: usize,
            access: ::std::os::raw::c_uint,
        ) -> *mut ibv_mr,
    >,
    pub alloc_dm: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            attr: *mut ibv_alloc_dm_attr,
        ) -> *mut ibv_dm,
    >,
    pub free_dm:
        ::std::option::Option<unsafe extern "C" fn(dm: *mut ibv_dm) -> ::std::os::raw::c_int>,
    pub modify_flow_action_esp: ::std::option::Option<
        unsafe extern "C" fn(
            action: *mut ibv_flow_action,
            attr: *mut ibv_flow_action_esp_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub destroy_flow_action: ::std::option::Option<
        unsafe extern "C" fn(action: *mut ibv_flow_action) -> ::std::os::raw::c_int,
    >,
    pub create_flow_action_esp: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            attr: *mut ibv_flow_action_esp_attr,
        ) -> *mut ibv_flow_action,
    >,
    pub modify_qp_rate_limit: ::std::option::Option<
        unsafe extern "C" fn(
            qp: *mut ibv_qp,
            attr: *mut ibv_qp_rate_limit_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub alloc_parent_domain: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            attr: *mut ibv_parent_domain_init_attr,
        ) -> *mut ibv_pd,
    >,
    pub dealloc_td:
        ::std::option::Option<unsafe extern "C" fn(td: *mut ibv_td) -> ::std::os::raw::c_int>,
    pub alloc_td: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            init_attr: *mut ibv_td_init_attr,
        ) -> *mut ibv_td,
    >,
    pub modify_cq: ::std::option::Option<
        unsafe extern "C" fn(
            cq: *mut ibv_cq,
            attr: *mut ibv_modify_cq_attr,
        ) -> ::std::os::raw::c_int,
    >,
    pub post_srq_ops: ::std::option::Option<
        unsafe extern "C" fn(
            srq: *mut ibv_srq,
            op: *mut ibv_ops_wr,
            bad_op: *mut *mut ibv_ops_wr,
        ) -> ::std::os::raw::c_int,
    >,
    pub destroy_rwq_ind_table: ::std::option::Option<
        unsafe extern "C" fn(rwq_ind_table: *mut ibv_rwq_ind_table) -> ::std::os::raw::c_int,
    >,
    pub create_rwq_ind_table: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            init_attr: *mut ibv_rwq_ind_table_init_attr,
        ) -> *mut ibv_rwq_ind_table,
    >,
    pub destroy_wq:
        ::std::option::Option<unsafe extern "C" fn(wq: *mut ibv_wq) -> ::std::os::raw::c_int>,
    pub modify_wq: ::std::option::Option<
        unsafe extern "C" fn(wq: *mut ibv_wq, wq_attr: *mut ibv_wq_attr) -> ::std::os::raw::c_int,
    >,
    pub create_wq: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            wq_init_attr: *mut ibv_wq_init_attr,
        ) -> *mut ibv_wq,
    >,
    pub query_rt_values: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            values: *mut ibv_values_ex,
        ) -> ::std::os::raw::c_int,
    >,
    pub create_cq_ex: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            init_attr: *mut ibv_cq_init_attr_ex,
        ) -> *mut ibv_cq_ex,
    >,
    pub priv_: *mut verbs_ex_private,
    pub query_device_ex: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            input: *const ibv_query_device_ex_input,
            attr: *mut ibv_device_attr_ex,
            attr_size: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub ibv_destroy_flow:
        ::std::option::Option<unsafe extern "C" fn(flow: *mut ibv_flow) -> ::std::os::raw::c_int>,
    pub ABI_placeholder2: ::std::option::Option<unsafe extern "C" fn()>,
    pub ibv_create_flow: ::std::option::Option<
        unsafe extern "C" fn(qp: *mut ibv_qp, flow_attr: *mut ibv_flow_attr) -> *mut ibv_flow,
    >,
    pub ABI_placeholder1: ::std::option::Option<unsafe extern "C" fn()>,
    pub open_qp: ::std::option::Option<
        unsafe extern "C" fn(context: *mut ibv_context, attr: *mut ibv_qp_open_attr) -> *mut ibv_qp,
    >,
    pub create_qp_ex: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            qp_init_attr_ex: *mut ibv_qp_init_attr_ex,
        ) -> *mut ibv_qp,
    >,
    pub get_srq_num: ::std::option::Option<
        unsafe extern "C" fn(srq: *mut ibv_srq, srq_num: *mut u32) -> ::std::os::raw::c_int,
    >,
    pub create_srq_ex: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            srq_init_attr_ex: *mut ibv_srq_init_attr_ex,
        ) -> *mut ibv_srq,
    >,
    pub open_xrcd: ::std::option::Option<
        unsafe extern "C" fn(
            context: *mut ibv_context,
            xrcd_init_attr: *mut ibv_xrcd_init_attr,
        ) -> *mut ibv_xrcd,
    >,
    pub close_xrcd:
        ::std::option::Option<unsafe extern "C" fn(xrcd: *mut ibv_xrcd) -> ::std::os::raw::c_int>,
    pub _ABI_placeholder3: u64,
    pub sz: usize,
    pub context: ibv_context,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of verbs_context"][::std::mem::size_of::<verbs_context>() - 648usize];
    ["Alignment of verbs_context"][::std::mem::align_of::<verbs_context>() - 8usize];
    ["Offset of field: verbs_context::query_port"]
        [::std::mem::offset_of!(verbs_context, query_port) - 0usize];
    ["Offset of field: verbs_context::advise_mr"]
        [::std::mem::offset_of!(verbs_context, advise_mr) - 8usize];
    ["Offset of field: verbs_context::alloc_null_mr"]
        [::std::mem::offset_of!(verbs_context, alloc_null_mr) - 16usize];
    ["Offset of field: verbs_context::read_counters"]
        [::std::mem::offset_of!(verbs_context, read_counters) - 24usize];
    ["Offset of field: verbs_context::attach_counters_point_flow"]
        [::std::mem::offset_of!(verbs_context, attach_counters_point_flow) - 32usize];
    ["Offset of field: verbs_context::create_counters"]
        [::std::mem::offset_of!(verbs_context, create_counters) - 40usize];
    ["Offset of field: verbs_context::destroy_counters"]
        [::std::mem::offset_of!(verbs_context, destroy_counters) - 48usize];
    ["Offset of field: verbs_context::reg_dm_mr"]
        [::std::mem::offset_of!(verbs_context, reg_dm_mr) - 56usize];
    ["Offset of field: verbs_context::alloc_dm"]
        [::std::mem::offset_of!(verbs_context, alloc_dm) - 64usize];
    ["Offset of field: verbs_context::free_dm"]
        [::std::mem::offset_of!(verbs_context, free_dm) - 72usize];
    ["Offset of field: verbs_context::modify_flow_action_esp"]
        [::std::mem::offset_of!(verbs_context, modify_flow_action_esp) - 80usize];
    ["Offset of field: verbs_context::destroy_flow_action"]
        [::std::mem::offset_of!(verbs_context, destroy_flow_action) - 88usize];
    ["Offset of field: verbs_context::create_flow_action_esp"]
        [::std::mem::offset_of!(verbs_context, create_flow_action_esp) - 96usize];
    ["Offset of field: verbs_context::modify_qp_rate_limit"]
        [::std::mem::offset_of!(verbs_context, modify_qp_rate_limit) - 104usize];
    ["Offset of field: verbs_context::alloc_parent_domain"]
        [::std::mem::offset_of!(verbs_context, alloc_parent_domain) - 112usize];
    ["Offset of field: verbs_context::dealloc_td"]
        [::std::mem::offset_of!(verbs_context, dealloc_td) - 120usize];
    ["Offset of field: verbs_context::alloc_td"]
        [::std::mem::offset_of!(verbs_context, alloc_td) - 128usize];
    ["Offset of field: verbs_context::modify_cq"]
        [::std::mem::offset_of!(verbs_context, modify_cq) - 136usize];
    ["Offset of field: verbs_context::post_srq_ops"]
        [::std::mem::offset_of!(verbs_context, post_srq_ops) - 144usize];
    ["Offset of field: verbs_context::destroy_rwq_ind_table"]
        [::std::mem::offset_of!(verbs_context, destroy_rwq_ind_table) - 152usize];
    ["Offset of field: verbs_context::create_rwq_ind_table"]
        [::std::mem::offset_of!(verbs_context, create_rwq_ind_table) - 160usize];
    ["Offset of field: verbs_context::destroy_wq"]
        [::std::mem::offset_of!(verbs_context, destroy_wq) - 168usize];
    ["Offset of field: verbs_context::modify_wq"]
        [::std::mem::offset_of!(verbs_context, modify_wq) - 176usize];
    ["Offset of field: verbs_context::create_wq"]
        [::std::mem::offset_of!(verbs_context, create_wq) - 184usize];
    ["Offset of field: verbs_context::query_rt_values"]
        [::std::mem::offset_of!(verbs_context, query_rt_values) - 192usize];
    ["Offset of field: verbs_context::create_cq_ex"]
        [::std::mem::offset_of!(verbs_context, create_cq_ex) - 200usize];
    ["Offset of field: verbs_context::priv_"]
        [::std::mem::offset_of!(verbs_context, priv_) - 208usize];
    ["Offset of field: verbs_context::query_device_ex"]
        [::std::mem::offset_of!(verbs_context, query_device_ex) - 216usize];
    ["Offset of field: verbs_context::ibv_destroy_flow"]
        [::std::mem::offset_of!(verbs_context, ibv_destroy_flow) - 224usize];
    ["Offset of field: verbs_context::ABI_placeholder2"]
        [::std::mem::offset_of!(verbs_context, ABI_placeholder2) - 232usize];
    ["Offset of field: verbs_context::ibv_create_flow"]
        [::std::mem::offset_of!(verbs_context, ibv_create_flow) - 240usize];
    ["Offset of field: verbs_context::ABI_placeholder1"]
        [::std::mem::offset_of!(verbs_context, ABI_placeholder1) - 248usize];
    ["Offset of field: verbs_context::open_qp"]
        [::std::mem::offset_of!(verbs_context, open_qp) - 256usize];
    ["Offset of field: verbs_context::create_qp_ex"]
        [::std::mem::offset_of!(verbs_context, create_qp_ex) - 264usize];
    ["Offset of field: verbs_context::get_srq_num"]
        [::std::mem::offset_of!(verbs_context, get_srq_num) - 272usize];
    ["Offset of field: verbs_context::create_srq_ex"]
        [::std::mem::offset_of!(verbs_context, create_srq_ex) - 280usize];
    ["Offset of field: verbs_context::open_xrcd"]
        [::std::mem::offset_of!(verbs_context, open_xrcd) - 288usize];
    ["Offset of field: verbs_context::close_xrcd"]
        [::std::mem::offset_of!(verbs_context, close_xrcd) - 296usize];
    ["Offset of field: verbs_context::_ABI_placeholder3"]
        [::std::mem::offset_of!(verbs_context, _ABI_placeholder3) - 304usize];
    ["Offset of field: verbs_context::sz"][::std::mem::offset_of!(verbs_context, sz) - 312usize];
    ["Offset of field: verbs_context::context"]
        [::std::mem::offset_of!(verbs_context, context) - 320usize];
};
impl Default for verbs_context {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
extern "C" {
    pub fn ibv_get_device_list(num_devices: *mut ::std::os::raw::c_int) -> *mut *mut ibv_device;
}
extern "C" {
    pub fn ibv_free_device_list(list: *mut *mut ibv_device);
}
extern "C" {
    pub fn ibv_get_device_name(device: *mut ibv_device) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ibv_get_device_index(device: *mut ibv_device) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_get_device_guid(device: *mut ibv_device) -> __be64;
}
extern "C" {
    pub fn ibv_open_device(device: *mut ibv_device) -> *mut ibv_context;
}
extern "C" {
    pub fn ibv_close_device(context: *mut ibv_context) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_import_device(cmd_fd: ::std::os::raw::c_int) -> *mut ibv_context;
}
extern "C" {
    pub fn ibv_import_pd(context: *mut ibv_context, pd_handle: u32) -> *mut ibv_pd;
}
extern "C" {
    pub fn ibv_unimport_pd(pd: *mut ibv_pd);
}
extern "C" {
    pub fn ibv_import_mr(pd: *mut ibv_pd, mr_handle: u32) -> *mut ibv_mr;
}
extern "C" {
    pub fn ibv_unimport_mr(mr: *mut ibv_mr);
}
extern "C" {
    pub fn ibv_import_dm(context: *mut ibv_context, dm_handle: u32) -> *mut ibv_dm;
}
extern "C" {
    pub fn ibv_unimport_dm(dm: *mut ibv_dm);
}
extern "C" {
    pub fn ibv_get_async_event(
        context: *mut ibv_context,
        event: *mut ibv_async_event,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_ack_async_event(event: *mut ibv_async_event);
}
extern "C" {
    pub fn ibv_query_device(
        context: *mut ibv_context,
        device_attr: *mut ibv_device_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_port(
        context: *mut ibv_context,
        port_num: u8,
        port_attr: *mut _compat_ibv_port_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_gid(
        context: *mut ibv_context,
        port_num: u8,
        index: ::std::os::raw::c_int,
        gid: *mut ibv_gid,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ibv_query_gid_ex(
        context: *mut ibv_context,
        port_num: u32,
        gid_index: u32,
        entry: *mut ibv_gid_entry,
        flags: u32,
        entry_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ibv_query_gid_table(
        context: *mut ibv_context,
        entries: *mut ibv_gid_entry,
        max_entries: usize,
        flags: u32,
        entry_size: usize,
    ) -> isize;
}
extern "C" {
    pub fn ibv_query_pkey(
        context: *mut ibv_context,
        port_num: u8,
        index: ::std::os::raw::c_int,
        pkey: *mut __be16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_get_pkey_index(
        context: *mut ibv_context,
        port_num: u8,
        pkey: __be16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_alloc_pd(context: *mut ibv_context) -> *mut ibv_pd;
}
extern "C" {
    pub fn ibv_dealloc_pd(pd: *mut ibv_pd) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_reg_mr_iova2(
        pd: *mut ibv_pd,
        addr: *mut ::std::os::raw::c_void,
        length: usize,
        iova: u64,
        access: ::std::os::raw::c_uint,
    ) -> *mut ibv_mr;
}
extern "C" {
    pub fn ibv_reg_mr(
        pd: *mut ibv_pd,
        addr: *mut ::std::os::raw::c_void,
        length: usize,
        access: ::std::os::raw::c_int,
    ) -> *mut ibv_mr;
}
extern "C" {
    pub fn ibv_reg_mr_iova(
        pd: *mut ibv_pd,
        addr: *mut ::std::os::raw::c_void,
        length: usize,
        iova: u64,
        access: ::std::os::raw::c_int,
    ) -> *mut ibv_mr;
}
extern "C" {
    pub fn ibv_reg_dmabuf_mr(
        pd: *mut ibv_pd,
        offset: u64,
        length: usize,
        iova: u64,
        fd: ::std::os::raw::c_int,
        access: ::std::os::raw::c_int,
    ) -> *mut ibv_mr;
}
pub const IBV_REREG_MR_ERR_INPUT: ibv_rereg_mr_err_code = -1;
pub const IBV_REREG_MR_ERR_DONT_FORK_NEW: ibv_rereg_mr_err_code = -2;
pub const IBV_REREG_MR_ERR_DO_FORK_OLD: ibv_rereg_mr_err_code = -3;
pub const IBV_REREG_MR_ERR_CMD: ibv_rereg_mr_err_code = -4;
pub const IBV_REREG_MR_ERR_CMD_AND_DO_FORK_NEW: ibv_rereg_mr_err_code = -5;
pub type ibv_rereg_mr_err_code = ::std::os::raw::c_int;
extern "C" {
    pub fn ibv_rereg_mr(
        mr: *mut ibv_mr,
        flags: ::std::os::raw::c_int,
        pd: *mut ibv_pd,
        addr: *mut ::std::os::raw::c_void,
        length: usize,
        access: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_dereg_mr(mr: *mut ibv_mr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_comp_channel(context: *mut ibv_context) -> *mut ibv_comp_channel;
}
extern "C" {
    pub fn ibv_destroy_comp_channel(channel: *mut ibv_comp_channel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_cq(
        context: *mut ibv_context,
        cqe: ::std::os::raw::c_int,
        cq_context: *mut ::std::os::raw::c_void,
        channel: *mut ibv_comp_channel,
        comp_vector: ::std::os::raw::c_int,
    ) -> *mut ibv_cq;
}
extern "C" {
    pub fn ibv_resize_cq(cq: *mut ibv_cq, cqe: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_destroy_cq(cq: *mut ibv_cq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_get_cq_event(
        channel: *mut ibv_comp_channel,
        cq: *mut *mut ibv_cq,
        cq_context: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_ack_cq_events(cq: *mut ibv_cq, nevents: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn ibv_create_srq(pd: *mut ibv_pd, srq_init_attr: *mut ibv_srq_init_attr) -> *mut ibv_srq;
}
extern "C" {
    pub fn ibv_modify_srq(
        srq: *mut ibv_srq,
        srq_attr: *mut ibv_srq_attr,
        srq_attr_mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_srq(srq: *mut ibv_srq, srq_attr: *mut ibv_srq_attr) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_destroy_srq(srq: *mut ibv_srq) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_qp(pd: *mut ibv_pd, qp_init_attr: *mut ibv_qp_init_attr) -> *mut ibv_qp;
}
extern "C" {
    pub fn ibv_modify_qp(
        qp: *mut ibv_qp,
        attr: *mut ibv_qp_attr,
        attr_mask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_qp_data_in_order(
        qp: *mut ibv_qp,
        op: ibv_wr_opcode::Type,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_qp(
        qp: *mut ibv_qp,
        attr: *mut ibv_qp_attr,
        attr_mask: ::std::os::raw::c_int,
        init_attr: *mut ibv_qp_init_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_destroy_qp(qp: *mut ibv_qp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_ah(pd: *mut ibv_pd, attr: *mut ibv_ah_attr) -> *mut ibv_ah;
}
extern "C" {
    pub fn ibv_init_ah_from_wc(
        context: *mut ibv_context,
        port_num: u8,
        wc: *mut ibv_wc,
        grh: *mut ibv_grh,
        ah_attr: *mut ibv_ah_attr,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_create_ah_from_wc(
        pd: *mut ibv_pd,
        wc: *mut ibv_wc,
        grh: *mut ibv_grh,
        port_num: u8,
    ) -> *mut ibv_ah;
}
extern "C" {
    pub fn ibv_destroy_ah(ah: *mut ibv_ah) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_attach_mcast(
        qp: *mut ibv_qp,
        gid: *const ibv_gid,
        lid: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_detach_mcast(
        qp: *mut ibv_qp,
        gid: *const ibv_gid,
        lid: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_fork_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_is_fork_initialized() -> ibv_fork_status;
}
extern "C" {
    pub fn ibv_node_type_str(node_type: ibv_node_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ibv_port_state_str(port_state: ibv_port_state::Type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ibv_event_type_str(event: ibv_event_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ibv_resolve_eth_l2_from_gid(
        context: *mut ibv_context,
        attr: *mut ibv_ah_attr,
        eth_mac: *mut u8,
        vid: *mut u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_set_ece(qp: *mut ibv_qp, ece: *mut ibv_ece) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibv_query_ece(qp: *mut ibv_qp, ece: *mut ibv_ece) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_sa_path_rec {
    pub dgid: ibv_gid,
    pub sgid: ibv_gid,
    pub dlid: __be16,
    pub slid: __be16,
    pub raw_traffic: ::std::os::raw::c_int,
    pub flow_label: __be32,
    pub hop_limit: u8,
    pub traffic_class: u8,
    pub reversible: ::std::os::raw::c_int,
    pub numb_path: u8,
    pub pkey: __be16,
    pub sl: u8,
    pub mtu_selector: u8,
    pub mtu: u8,
    pub rate_selector: u8,
    pub rate: u8,
    pub packet_life_time_selector: u8,
    pub packet_life_time: u8,
    pub preference: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_sa_path_rec"][::std::mem::size_of::<ibv_sa_path_rec>() - 64usize];
    ["Alignment of ibv_sa_path_rec"][::std::mem::align_of::<ibv_sa_path_rec>() - 8usize];
    ["Offset of field: ibv_sa_path_rec::dgid"]
        [::std::mem::offset_of!(ibv_sa_path_rec, dgid) - 0usize];
    ["Offset of field: ibv_sa_path_rec::sgid"]
        [::std::mem::offset_of!(ibv_sa_path_rec, sgid) - 16usize];
    ["Offset of field: ibv_sa_path_rec::dlid"]
        [::std::mem::offset_of!(ibv_sa_path_rec, dlid) - 32usize];
    ["Offset of field: ibv_sa_path_rec::slid"]
        [::std::mem::offset_of!(ibv_sa_path_rec, slid) - 34usize];
    ["Offset of field: ibv_sa_path_rec::raw_traffic"]
        [::std::mem::offset_of!(ibv_sa_path_rec, raw_traffic) - 36usize];
    ["Offset of field: ibv_sa_path_rec::flow_label"]
        [::std::mem::offset_of!(ibv_sa_path_rec, flow_label) - 40usize];
    ["Offset of field: ibv_sa_path_rec::hop_limit"]
        [::std::mem::offset_of!(ibv_sa_path_rec, hop_limit) - 44usize];
    ["Offset of field: ibv_sa_path_rec::traffic_class"]
        [::std::mem::offset_of!(ibv_sa_path_rec, traffic_class) - 45usize];
    ["Offset of field: ibv_sa_path_rec::reversible"]
        [::std::mem::offset_of!(ibv_sa_path_rec, reversible) - 48usize];
    ["Offset of field: ibv_sa_path_rec::numb_path"]
        [::std::mem::offset_of!(ibv_sa_path_rec, numb_path) - 52usize];
    ["Offset of field: ibv_sa_path_rec::pkey"]
        [::std::mem::offset_of!(ibv_sa_path_rec, pkey) - 54usize];
    ["Offset of field: ibv_sa_path_rec::sl"][::std::mem::offset_of!(ibv_sa_path_rec, sl) - 56usize];
    ["Offset of field: ibv_sa_path_rec::mtu_selector"]
        [::std::mem::offset_of!(ibv_sa_path_rec, mtu_selector) - 57usize];
    ["Offset of field: ibv_sa_path_rec::mtu"]
        [::std::mem::offset_of!(ibv_sa_path_rec, mtu) - 58usize];
    ["Offset of field: ibv_sa_path_rec::rate_selector"]
        [::std::mem::offset_of!(ibv_sa_path_rec, rate_selector) - 59usize];
    ["Offset of field: ibv_sa_path_rec::rate"]
        [::std::mem::offset_of!(ibv_sa_path_rec, rate) - 60usize];
    ["Offset of field: ibv_sa_path_rec::packet_life_time_selector"]
        [::std::mem::offset_of!(ibv_sa_path_rec, packet_life_time_selector) - 61usize];
    ["Offset of field: ibv_sa_path_rec::packet_life_time"]
        [::std::mem::offset_of!(ibv_sa_path_rec, packet_life_time) - 62usize];
    ["Offset of field: ibv_sa_path_rec::preference"]
        [::std::mem::offset_of!(ibv_sa_path_rec, preference) - 63usize];
};
impl Default for ibv_sa_path_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_sa_mcmember_rec {
    pub mgid: ibv_gid,
    pub port_gid: ibv_gid,
    pub qkey: u32,
    pub mlid: u16,
    pub mtu_selector: u8,
    pub mtu: u8,
    pub traffic_class: u8,
    pub pkey: u16,
    pub rate_selector: u8,
    pub rate: u8,
    pub packet_life_time_selector: u8,
    pub packet_life_time: u8,
    pub sl: u8,
    pub flow_label: u32,
    pub hop_limit: u8,
    pub scope: u8,
    pub join_state: u8,
    pub proxy_join: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_sa_mcmember_rec"][::std::mem::size_of::<ibv_sa_mcmember_rec>() - 64usize];
    ["Alignment of ibv_sa_mcmember_rec"][::std::mem::align_of::<ibv_sa_mcmember_rec>() - 8usize];
    ["Offset of field: ibv_sa_mcmember_rec::mgid"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, mgid) - 0usize];
    ["Offset of field: ibv_sa_mcmember_rec::port_gid"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, port_gid) - 16usize];
    ["Offset of field: ibv_sa_mcmember_rec::qkey"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, qkey) - 32usize];
    ["Offset of field: ibv_sa_mcmember_rec::mlid"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, mlid) - 36usize];
    ["Offset of field: ibv_sa_mcmember_rec::mtu_selector"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, mtu_selector) - 38usize];
    ["Offset of field: ibv_sa_mcmember_rec::mtu"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, mtu) - 39usize];
    ["Offset of field: ibv_sa_mcmember_rec::traffic_class"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, traffic_class) - 40usize];
    ["Offset of field: ibv_sa_mcmember_rec::pkey"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, pkey) - 42usize];
    ["Offset of field: ibv_sa_mcmember_rec::rate_selector"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, rate_selector) - 44usize];
    ["Offset of field: ibv_sa_mcmember_rec::rate"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, rate) - 45usize];
    ["Offset of field: ibv_sa_mcmember_rec::packet_life_time_selector"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, packet_life_time_selector) - 46usize];
    ["Offset of field: ibv_sa_mcmember_rec::packet_life_time"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, packet_life_time) - 47usize];
    ["Offset of field: ibv_sa_mcmember_rec::sl"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, sl) - 48usize];
    ["Offset of field: ibv_sa_mcmember_rec::flow_label"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, flow_label) - 52usize];
    ["Offset of field: ibv_sa_mcmember_rec::hop_limit"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, hop_limit) - 56usize];
    ["Offset of field: ibv_sa_mcmember_rec::scope"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, scope) - 57usize];
    ["Offset of field: ibv_sa_mcmember_rec::join_state"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, join_state) - 58usize];
    ["Offset of field: ibv_sa_mcmember_rec::proxy_join"]
        [::std::mem::offset_of!(ibv_sa_mcmember_rec, proxy_join) - 60usize];
};
impl Default for ibv_sa_mcmember_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_sa_service_rec {
    pub id: u64,
    pub gid: ibv_gid,
    pub pkey: u16,
    pub lease: u32,
    pub key: [u8; 16usize],
    pub name: [u8; 64usize],
    pub data8: [u8; 16usize],
    pub data16: [u16; 8usize],
    pub data32: [u32; 4usize],
    pub data64: [u64; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_sa_service_rec"][::std::mem::size_of::<ibv_sa_service_rec>() - 176usize];
    ["Alignment of ibv_sa_service_rec"][::std::mem::align_of::<ibv_sa_service_rec>() - 8usize];
    ["Offset of field: ibv_sa_service_rec::id"]
        [::std::mem::offset_of!(ibv_sa_service_rec, id) - 0usize];
    ["Offset of field: ibv_sa_service_rec::gid"]
        [::std::mem::offset_of!(ibv_sa_service_rec, gid) - 8usize];
    ["Offset of field: ibv_sa_service_rec::pkey"]
        [::std::mem::offset_of!(ibv_sa_service_rec, pkey) - 24usize];
    ["Offset of field: ibv_sa_service_rec::lease"]
        [::std::mem::offset_of!(ibv_sa_service_rec, lease) - 28usize];
    ["Offset of field: ibv_sa_service_rec::key"]
        [::std::mem::offset_of!(ibv_sa_service_rec, key) - 32usize];
    ["Offset of field: ibv_sa_service_rec::name"]
        [::std::mem::offset_of!(ibv_sa_service_rec, name) - 48usize];
    ["Offset of field: ibv_sa_service_rec::data8"]
        [::std::mem::offset_of!(ibv_sa_service_rec, data8) - 112usize];
    ["Offset of field: ibv_sa_service_rec::data16"]
        [::std::mem::offset_of!(ibv_sa_service_rec, data16) - 128usize];
    ["Offset of field: ibv_sa_service_rec::data32"]
        [::std::mem::offset_of!(ibv_sa_service_rec, data32) - 144usize];
    ["Offset of field: ibv_sa_service_rec::data64"]
        [::std::mem::offset_of!(ibv_sa_service_rec, data64) - 160usize];
};
impl Default for ibv_sa_service_rec {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_path_record {
    pub service_id: __be64,
    pub dgid: ibv_gid,
    pub sgid: ibv_gid,
    pub dlid: __be16,
    pub slid: __be16,
    pub flowlabel_hoplimit: __be32,
    pub tclass: u8,
    pub reversible_numpath: u8,
    pub pkey: __be16,
    pub qosclass_sl: __be16,
    pub mtu: u8,
    pub rate: u8,
    pub packetlifetime: u8,
    pub preference: u8,
    pub reserved: [u8; 6usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_path_record"][::std::mem::size_of::<ibv_path_record>() - 64usize];
    ["Alignment of ibv_path_record"][::std::mem::align_of::<ibv_path_record>() - 8usize];
    ["Offset of field: ibv_path_record::service_id"]
        [::std::mem::offset_of!(ibv_path_record, service_id) - 0usize];
    ["Offset of field: ibv_path_record::dgid"]
        [::std::mem::offset_of!(ibv_path_record, dgid) - 8usize];
    ["Offset of field: ibv_path_record::sgid"]
        [::std::mem::offset_of!(ibv_path_record, sgid) - 24usize];
    ["Offset of field: ibv_path_record::dlid"]
        [::std::mem::offset_of!(ibv_path_record, dlid) - 40usize];
    ["Offset of field: ibv_path_record::slid"]
        [::std::mem::offset_of!(ibv_path_record, slid) - 42usize];
    ["Offset of field: ibv_path_record::flowlabel_hoplimit"]
        [::std::mem::offset_of!(ibv_path_record, flowlabel_hoplimit) - 44usize];
    ["Offset of field: ibv_path_record::tclass"]
        [::std::mem::offset_of!(ibv_path_record, tclass) - 48usize];
    ["Offset of field: ibv_path_record::reversible_numpath"]
        [::std::mem::offset_of!(ibv_path_record, reversible_numpath) - 49usize];
    ["Offset of field: ibv_path_record::pkey"]
        [::std::mem::offset_of!(ibv_path_record, pkey) - 50usize];
    ["Offset of field: ibv_path_record::qosclass_sl"]
        [::std::mem::offset_of!(ibv_path_record, qosclass_sl) - 52usize];
    ["Offset of field: ibv_path_record::mtu"]
        [::std::mem::offset_of!(ibv_path_record, mtu) - 54usize];
    ["Offset of field: ibv_path_record::rate"]
        [::std::mem::offset_of!(ibv_path_record, rate) - 55usize];
    ["Offset of field: ibv_path_record::packetlifetime"]
        [::std::mem::offset_of!(ibv_path_record, packetlifetime) - 56usize];
    ["Offset of field: ibv_path_record::preference"]
        [::std::mem::offset_of!(ibv_path_record, preference) - 57usize];
    ["Offset of field: ibv_path_record::reserved"]
        [::std::mem::offset_of!(ibv_path_record, reserved) - 58usize];
};
impl Default for ibv_path_record {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibv_path_data {
    pub flags: u32,
    pub reserved: u32,
    pub path: ibv_path_record,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ibv_path_data"][::std::mem::size_of::<ibv_path_data>() - 72usize];
    ["Alignment of ibv_path_data"][::std::mem::align_of::<ibv_path_data>() - 8usize];
    ["Offset of field: ibv_path_data::flags"]
        [::std::mem::offset_of!(ibv_path_data, flags) - 0usize];
    ["Offset of field: ibv_path_data::reserved"]
        [::std::mem::offset_of!(ibv_path_data, reserved) - 4usize];
    ["Offset of field: ibv_path_data::path"][::std::mem::offset_of!(ibv_path_data, path) - 8usize];
};
impl Default for ibv_path_data {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct verbs_ex_private {
    pub _address: u8,
}
